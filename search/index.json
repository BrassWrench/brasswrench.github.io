[{"content":" Euclidean空间与向量函数 引言 我们知道，一元函数 \\(y=f(x)\\) 的图像是一条曲线，二元函数 \\(z=f(x,y)\\) 的图像是一张曲面。但是，把曲线和曲面表示成参数方程则更加便利于研究，这种表示方法首先是由Euler引进的。例如，在空间中取定Cartesian直角坐标系之后一条曲线可以表示为三个一元函数\n\\[ x=x(t),\\quad y=y(t),\\quad z=z(t) \\tag{1} \\] 在向量的概念出现之后，空间中的一条曲线可以自然地表示为一个一元向量函数\n\\[ \\bm{r}=\\bm{r}(t)=(x(t),y(t),z(t)) \\tag{2} \\] 在本章，我们首先要复习解析几何中已经学习过的向量代数知识，以及介绍向量函数相加、向量函数与函数相乘、向量函数的点乘和叉乘的求导法则，在三维Euclidean空间中标架是建立坐标系的基础，而且我们将来要把曲线和曲面与仅附在曲线和曲面上的标架族联系起来，用标架族的变化状态来刻画曲线和曲面的弯曲情况。因此本文我们还要介绍三维Euclidean空间中标架的概念，为在三维Euclidean空间中研究曲线和曲面做好准备。\n三维Euclidean空间中的标架 Euclidean空间 通常把我们所处的空间称为三维Euclidean空间。确切的说，所谓的三维Euclidean空间 \\(E^3\\) 是一个非空的集合，其中的元素称为点，任意两个不同的点唯一地决定了连接他们的直线，不在一条直线上的任意三个不同的点唯一地决定了通过这三点的平面，而且在 \\(E^3\\) 中存在不共面的四个点。另外，过直线外任意一点能够作、并且只能作一条直线与已知直线平行。最后这个断言就是欧氏几何的平行公理。\n向量 定义 任意两个点 \\(A,B \\in E^3\\) 都可以连接成一条直线段 \\(AB\\) 。指定 \\(A\\) 为起点、 \\(B\\) 为终点的线段 \\(AB\\) 称为有向线段，记作 \\(\\overrightarrow{AB}\\) 。设 \\(\\overrightarrow{AB}\\) 和 \\(\\overrightarrow{CD}\\) 是两条有向线段，如果 \\(ABDC\\) 成为一个平行四边形，则称这两条有向线段是相等的，记为\n\\[ \\overrightarrow{AB}=\\overrightarrow{CD} \\tag{3} \\] 所有相等的有向线段的集合称为一个向量。因此，在三维Euclidean空间 \\(E^3\\) 中，一个向量可以表示为 \\(E^3\\) 中的一条有向线段，而相等的有向线段所代表的是同一个向量。以后，我们经常用黑斜体单个字母，或者用带箭头的单个字母表示向量。\n加法 按照三角形法则，可以定义向量的加法如下：设 \\(\\bm{a},\\bm{b}\\) 是两个向量，并且假定它们用有向线段 \\(\\overrightarrow{AB}\\) 和 \\(\\overrightarrow{BC}\\) 来表示，则连接 \\(A\\) 和 \\(C\\) 的有向线段 \\(\\overrightarrow{AC}\\) 就代表向量 \\(\\bm{a}+\\bm{b}\\) 。我们把起点和终点相同的有向线段的集合称为零向量，记为 \\(\\bm{0}\\) ，于是任意一个向量与零向量之和为该向量自身，即\n\\[ \\bm{a}+\\bm{0}=\\bm{a} \\tag{4} \\] 另外，若向量 \\(a\\) 用有向线段 \\(\\overrightarrow{AB}\\) 来表示，并且把有向线段 \\(\\overrightarrow{BA}\\) 所代表的向量记为 \\(-\\bm{a}\\) ，于是\n\\[ \\bm{a}+(-\\bm{a})=\\bm{0} \\tag{5} \\] 我们把向量 \\(-\\bm{a}\\) 称为 \\(\\bm{a}\\) 的反向量。容易验证，向量的加法遵循下面的运算法则 \\[ \\bm{a}+\\bm{b}=\\bm{b}+\\bm{a} \\tag{6} \\] \\[ (\\bm{a}+\\bm{b})+\\bm{c}=\\bm{a}+(\\bm{b}+\\bm{c}) \\tag{7} \\]\n数乘 在三维Euclidean空间 \\(E^3\\) 中还规定线段 \\(AB\\) 的长度是点 \\(A\\) 到点 \\(B\\) 的距离，记为 \\(|AB|\\) ，并对于任意三点 \\(A,B,C\\) ，下面的三角形不等式成立\n\\[ |AB|+|BC|\\ge|AC| \\tag{8} \\] 向量 \\(\\bm{a}\\) 的长度 \\(|\\bm{a}|\\) 定义为代表它的有向线段 \\(\\bm{a}=\\overrightarrow{AB}\\) 的长度。这样，向量 \\(\\bm{a}\\) 与实数 \\(c\\) 的乘积 \\(c\\cdot\\bm{a}\\) 可以定义为与 \\(\\bm{a}\\) 平行的向量。当 \\(c\u003e0\\) 时 \\(c\\cdot\\bm{a}\\) 与 \\(\\bm{a}\\) 同向，当 \\(c\u003c0\\) 时 \\(c\\cdot\\bm{a}\\) 与 \\(\\bm{a}\\) 反向，并且 \\(c\\cdot\\bm{a}\\) 的长度 \\(|c\\cdot\\bm{a}|\\) 是 \\(\\bm{a}\\) 的长度 \\(|\\bm{a}|\\) 的 \\(|c|\\) 倍；当 \\(c=0\\) 时， \\(c\\cdot\\bm{a}=0\\) 。容易验证，向量与实数的乘法遵循下面的运算规则\n\\[ \\lambda(\\bm{a}+\\bm{b})=\\lambda\\bm{a}+\\lambda\\bm{b} \\tag{9} \\] \\[ (\\lambda+\\mu)\\bm{a}=\\lambda\\bm{a}+\\mu\\bm{a} \\tag{10} \\] \\[ (\\lambda\\mu)\\bm{a}=\\lambda(\\mu\\bm{a}) \\tag{11} \\]\n其中 \\(\\lambda,\\mu\\) 是任意实数。\n点乘 向量 \\(\\bm{a}\\) 和 \\(\\bm{b}\\) 的点乘 \\(\\bm{a}\\cdot\\bm{b}\\) 定义为实数\n\\[ \\bm{a}\\cdot\\bm{b}=|\\bm{a}|\\cdot|\\bm{b}|\\cdot\\cos\\angle(\\bm{a},\\bm{b}) \\tag{12} \\] 很明显，向量的点乘遵循下面的运算法则\n\\[ \\bm{c}\\cdot(\\bm{a}+\\bm{b})=\\bm{c}\\cdot\\bm{a}+\\bm{c}\\cdot\\bm{b} \\tag{13} \\] \\[ (\\lambda\\bm{a})\\cdot\\bm{b}=\\lambda(\\bm{a}\\cdot\\bm{b}) \\tag{14} \\] \\[ \\bm{a}\\cdot\\bm{b}=\\bm{b}\\cdot\\bm{a} \\tag{15} \\]\n由此可见\n\\[ |\\bm{a}|^2=\\bm{a}\\cdot\\bm{a}\\ge0 \\tag{16} \\] 叉乘 当向量 \\(\\bm{a}\\) 和向量 \\(\\bm{b}\\) 平行时，规定它们的叉乘为零向量。当 \\(\\bm{a}\\) 和 \\(\\bm{b}\\) 不平行时，规定向量 \\(\\bm{a}\\) 和 \\(\\bm{b}\\) 的叉乘 \\(\\bm{a}\\times\\bm{b}\\) 是与已知向量 \\( \\bm{a}\\) 和 \\( \\bm{b}\\) 都垂直的一个向量，其长度等于向量 \\(\\bm{a}\\) 和 \\(\\bm{b}\\) 所张成的平行四边形的面积，即\n\\[ |\\bm{a}\\times \\bm{b}|=|\\bm{a}|\\cdot|\\bm{b}|\\sin\\angle(\\bm{a},\\bm{b}) \\tag{17} \\] 并且它和 \\(\\bm{a},\\bm{b}\\) 构成右手系。容易验证，向量的叉乘遵循下面的运算法则\n\\[ \\bm{c}\\times(\\bm{a}+\\bm{b})=\\bm{c}\\times\\bm{a}+\\bm{c}\\times\\bm{b} \\tag{18} \\] \\[ (\\lambda\\bm{a})\\times\\bm{b}=\\lambda(\\bm{a}\\times\\bm{b}) \\tag{19} \\] \\[ \\bm{a}\\times\\bm{b}=-\\bm{b}\\times\\bm{a} \\tag{20} \\]\n根据定义，向量 \\(\\bm{a}\\) 和 \\(\\bm{b}\\) 平行的充分必要条件是\n\\[ \\bm{a}\\times\\bm{b}=\\bm{0} \\tag{21} \\] 标架 定义 在 \\(E^3\\) 中取定不共面的4个点，把其中一点记作 \\(O\\) ，把另外三点分别记为 \\(A,B,C\\) ，于是得到由一点 \\(O\\) 和 \\(3\\) 个不共面的向量 \\(\\overrightarrow{OA},\\overrightarrow{OB},\\overrightarrow{OC}\\) 构成的图形 \\(\\set{O;\\overrightarrow{OA},\\overrightarrow{OB},\\overrightarrow{OC}}\\) 。这样的一个图形称为 \\(E^3\\) 中的一个标架，其中点 \\(O\\) 称为该标架的原点。在 \\(E^3\\) 中取定一个标架 \\(\\set{O;\\overrightarrow{OA},\\overrightarrow{OB},\\overrightarrow{OC}}\\) 之后，则空间 \\(E^3\\) 中的任意一点 \\(P\\) 可以唯一地表示为 \\(3\\) 个有序的实数 \\((x,y,z)\\) 。事实上，从点 \\(P\\) 出发可以作唯一的一个平面与平面 \\(OBC\\) 平行，它和直线 \\(OA\\) 有唯一的交点，记为 \\(P_1\\) ，那么向量 \\(\\overrightarrow{OP_1}\\) 与 \\(\\overrightarrow{OA}\\) 共线，于是有实数 \\(x\\) ，使得 \\(\\overrightarrow{OP_1}=x\\space\\overrightarrow{OA}\\) 。同理，从点 \\(P\\) 出发可以作唯一的一个平面与平面 \\(OAC\\) 平行，它和直线 \\(OB\\) 有唯一的交点，记为 \\(P_2\\) ，从点 \\(P\\) 出发可以作唯一的一个平面与平面 \\(OAB\\) 平行，它和直线 \\(OC\\) 有唯一的交点，记为 \\(P_3\\) ，并且有实数 \\(y,z\\) ，使得 \\(\\overrightarrow{OP_2}=y\\space\\overrightarrow{OB}\\) ， \\(\\overrightarrow{OP_3}=z\\space\\overrightarrow{OC}\\) ，那么\n\\[ \\overrightarrow{OP}=\\overrightarrow{OP_1}+\\overrightarrow{OP_2}+\\overrightarrow{OP_3}=x\\space\\overrightarrow{OA}+y\\space\\overrightarrow{OB}+z\\space\\overrightarrow{OC} \\tag{22} \\] 因此，在 \\(E^3\\) 中取定标架 \\(\\set{O;\\overrightarrow{OA},\\overrightarrow{OB},\\overrightarrow{OC}}\\) 之后，点 \\(P\\) 和有序的 \\(3\\) 个实数构成的组 \\((x,y,z)\\) 是一一对应的，该数组称为点 \\(P\\) 关于已知标架 \\(\\set{O;\\overrightarrow{OA},\\overrightarrow{OB},\\overrightarrow{OC}}\\) 的坐标。\n注：在此简单证明一下为什么 \\(\\overrightarrow{OP}=\\overrightarrow{OP_1}+\\overrightarrow{OP_2}+\\overrightarrow{OP_3}\\) 。构造点 \\(P^\\prime\\) 使得 \\(\\overrightarrow{OP^\\prime}=\\overrightarrow{P_3P}\\) ，由相等的定义知 \\(OP^\\prime PP_3\\) 构成一个平行四边形，故也有 \\(\\overrightarrow{OP_3}=\\overrightarrow{P^\\prime P}\\) 。由 \\(P_3\\) 的定义知 \\(\\overrightarrow{P_3P}\\) 平行于平面 \\(OAB\\) ，因此 \\(OP^\\prime\\) 平行于平面 \\(OAB\\) ，故 \\(P^\\prime\\) 在平面 \\(OAB\\) 上。在平面 \\(OAB\\) 上过 \\(P^\\prime\\) 可作唯一直线平行于直线 \\(OA\\) ，设这条直线和直线 \\(OB\\) 交于点 \\(P_2^\\prime\\) ，现在来证 \\(P_2^\\prime\\) 就是点 \\(P_2\\) 。由 \\(P_2^\\prime\\) 、 \\(P^\\prime\\) 和 \\(P_3\\) 的定义知 \\(\\overrightarrow{P_2^\\prime P^\\prime}\\parallel\\overrightarrow{OA}\\) 且 \\(\\overrightarrow{P^\\prime P}\\parallel\\overrightarrow{OP_3}\\parallel\\overrightarrow{OC}\\) ，因此平面 \\(PP^\\prime P_2^\\prime\\) 与平面 \\(OAC\\) 平行。注意从 \\(P\\) 出发只有唯一的一个平面能与平面 \\(OAC\\) 平行，因此平面 \\(PP^\\prime P_2^\\prime\\) 就是这个平面，其与直线 \\(OB\\) 的唯一交点 \\(P_2^\\prime\\) 就是 \\(P_2\\) 。同理可以证明类似定义的 \\(P_1^\\prime\\) 就是 \\(P_1\\) 。故 \\(\\overrightarrow{P_2 P^\\prime}\\parallel\\overrightarrow{OA}\\parallel\\overrightarrow{OP_1}\\) ， \\(\\overrightarrow{P_1 P^\\prime}\\parallel\\overrightarrow{OB}\\parallel\\overrightarrow{OP_2}\\) ，因此 \\(OP_1P^\\prime P_2\\) 构成平行四边形，因此 \\(\\overrightarrow{OP^\\prime}=\\overrightarrow{OP_1}+\\overrightarrow{OP_2}\\) 。综上所述， \\(\\overrightarrow{OP}=\\overrightarrow{OP^\\prime}+\\overrightarrow{P^\\prime P}=\\overrightarrow{OP_1}+\\overrightarrow{OP_2}+\\overrightarrow{OP_3}\\) 。\n正交标架 设 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 是 \\(E^3\\) 的一个标架，并且 \\(\\bm{i},\\bm{j},\\bm{k}\\) 是彼此垂直的、构成右手系的 \\(3\\) 个单位向量，于是\n\\[ \\bm{i}\\cdot\\bm{i}=\\bm{j}\\cdot\\bm{j}=\\bm{k}\\cdot\\bm{k}=1,\\quad\\bm{i}\\cdot\\bm{j}=\\bm{i}\\cdot\\bm{k}=\\bm{j}\\cdot\\bm{k}=0 \\tag{23} \\] 并且\n\\[ \\bm{i}\\times\\bm{j}=\\bm{k},\\quad\\bm{j}\\times\\bm{k}=\\bm{i},\\quad\\bm{k}\\times\\bm{i}=\\bm{j} \\tag{24} \\] 这样的标架称为右手单位正交标架，简称为正交标架。由正交标架给出的坐标系称为Cartesian直角坐标系。在Cartesian直角坐标系下，设向量 \\(\\bm{a}\\) 和 \\(\\bm{b}\\) 的分量分别是 \\((x_1,y_1,z_1)\\) 和 \\((x_2,y_2,z_2)\\) ，则\n\\[ \\begin{aligned} \\bm{a}\\cdot\\bm{b}=\u0026(x_1\\bm{i}+y_1\\bm{j}+z_1\\bm{k})\\cdot(x_2\\bm{i}+y_2\\bm{j}+z_2\\bm{k})\\hspace{4em}\\\\[5pt] =\u0026x_1x_2+y_1y_2+z_1z_2 \\end{aligned} \\tag{25} \\] \\[ \\begin{aligned} \\bm{a}\\times\\bm{b}=\u0026(x_1\\bm{i}+y_1\\bm{j}+z_1\\bm{k})\\times(x_2\\bm{i}+y_2\\bm{j}+z_2\\bm{k})\\\\[5pt] =\u0026(x_1y_2-x_2y_1)(\\bm{i}\\times\\bm{j})+(y_1z_2-y_2z_1)(\\bm{j}\\times\\bm{k})\\\\[5pt] \u0026+(z_1x_2-z_2x_1)(\\bm{k}\\times\\bm{i})\\\\[5pt] =\u0026\\left( \\begin{vmatrix} y_1 \u0026 z_1 \\\\[5pt] y_2 \u0026 z_2 \\end{vmatrix} , \\begin{vmatrix} z_1 \u0026 x_1 \\\\[5pt] z_2 \u0026 x_2 \\end{vmatrix} , \\begin{vmatrix} x_1 \u0026 y_1 \\\\[5pt] x_2 \u0026 y_2 \\end{vmatrix} \\right) \\\\[15pt] =\u0026 \\begin{vmatrix} \\bm{i} \u0026 \\bm{j} \u0026 \\bm{k} \\\\[5pt] x_1 \u0026 y_1 \u0026 z_1 \\\\[5pt] x_2 \u0026 y_2 \u0026 z_2 \\end{vmatrix} \\end{aligned} \\tag{26} \\]\n设点 \\(A,B\\) 的坐标分别是 \\((x_1,y_1,z_1)\\) 和 \\((x_2,y_2,z_2)\\) ，则线段 \\(AB\\) 的长度是\n\\[ |AB|=\\sqrt{\\overrightarrow{AB}\\cdot\\overrightarrow{AB}}=\\sqrt{(x_2-x_1)^2+(y_2-y_1)^2+(z_2-z_1)^2} \\tag{27} \\] 因此，通常我们把三维Euclidean空间 \\(E^3\\) 写成 \\(\\R^3\\) ，并且把 \\(\\R^3\\) 中的向量 \\((x,y,z)\\) 的长度直接定义为 \\(\\sqrt{x^2+y^2+z^2}\\) 。事实上，这样的 \\(\\R^3\\) 是三维欧氏空间 \\(E^3\\) 在取定了一个正交标架 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 之后的具体表现形式。为简单起见，我们经常把三维Euclidean空间理解为上面所说的 \\(\\R^3\\) 。\n标架变换 现在我们来考察由 \\(E^3\\) 中全体正交标架所构成的集合。设 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 是在 \\(E^3\\) 中的一个固定的正交标架，则 \\(E^3\\) 中的任意一个正交标架 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 可以如下来确定\n\\[ \\begin{cases} \\overrightarrow{OP}=a_1\\bm{i}+a_2\\bm{j}+a_3\\bm{k}\\\\[5pt] \\bm{e}_1=a_{11}\\bm{i}+a_{12}\\bm{j}+a_{13}\\bm{k}\\\\[5pt] \\bm{e}_2=a_{21}\\bm{i}+a_{22}\\bm{j}+a_{23}\\bm{k}\\\\[5pt] \\bm{e}_3=a_{31}\\bm{i}+a_{32}\\bm{j}+a_{33}\\bm{k}\\\\[5pt] \\end{cases} \\tag{28} \\] 因为 \\(\\bm{e}_i\\) 是彼此正交的单位向量，所以\n\\[ \\bm{e}_i\\cdot\\bm{e}_j=\\sum_{k=1}^{3}a_{ik}a_{jk}=\\delta{ij}= \\begin{cases} 1,\\quad i=j\\\\[5pt] 0,\\quad i \\ne j \\end{cases} \\tag{29} \\] 由于 \\(\\bm{e}_1,\\bm{e}_2,\\bm{e}_3\\) 构成右手系，所以\n\\[ \\bm{e}_1\\times\\bm{e}_2=\\bm{e}_3 \\tag{30} \\] 因而 \\(\\bm{e}_1,\\bm{e}_2,\\bm{e}_3\\) 的混合积\n\\[ \\begin{aligned} (\\bm{e}_1,\\bm{e}_2,\\bm{e}_3)=\u0026(\\bm{e}_1\\times\\bm{e}_2)\\cdot\\bm{e}_3=\\bm{e}_3\\cdot\\bm{e}_3\\\\[10pt] =\u0026 \\begin{vmatrix} a_{11} \u0026 a_{12} \u0026 a_{13} \\\\[5pt] a_{21} \u0026 a_{22} \u0026 a_{23} \\\\[5pt] a_{31} \u0026 a_{32} \u0026 a_{33} \\end{vmatrix} =1 \\end{aligned} \\tag{31} \\] 令\n\\[ \\bm{a}=(a_1,a_2,a_3) \\tag{32} \\] \\[ \\bm{A}= \\begin{pmatrix} a_{11} \u0026 a_{12} \u0026 a_{13} \\\\[5pt] a_{21} \u0026 a_{22} \u0026 a_{23} \\\\[5pt] a_{31} \u0026 a_{32} \u0026 a_{33} \\end{pmatrix} \\tag{33} \\]\n由式29可得 \\(\\bm{A}\\bm{A}^T=\\bm{A}^T\\bm{A}=1\\) ，由式31可得 \\(|\\bm{A}|=1\\) ，因此 \\(\\bm{A}\\) 是行列式为 \\(1\\) 的正交矩阵，即 \\(A \\in \\rm{SO(3)}\\) （见SO(3)群）。在取定一个正交标架 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 下， \\(E^3\\) 中的任意一个正交标架 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e_3}}\\) 与矩阵 \\((\\bm{a},\\bm{A})\\) 是一一对应的，因此 \\(E^3\\) 中的全体正交标架的集合可以与集合 \\(E^3\\times \\rm{SO(3)}\\) （见Cartesian乘积）等同起来。注意到正交矩阵的条件式29是矩阵元素 \\(a_{ij}\\) 所满足的 \\(6\\) 个关系式。\n\\[ \\begin{cases} (a_{11})^2+(a_{12})^2+(a_{13})^2=1\\\\[5pt] (a_{21})^2+(a_{22})^2+(a_{33})^2=1\\\\[5pt] (a_{31})^2+(a_{32})^2+(a_{33})^2=1\\\\[5pt] a_{11}a_{21}+a_{12}a_{22}+a_{13}a_{23}=0\\\\[5pt] a_{11}a_{31}+a_{12}a_{32}+a_{13}a_{33}=0\\\\[5pt] a_{21}a_{31}+a_{22}a_{32}+a_{23}a_{33}=0 \\end{cases} \\tag{34} \\] 因此，其行列式为 \\(1\\) 的正交矩阵的集合 \\(\\rm{SO(3)}\\) 有 \\(3\\) 个自由度，因而 \\(E^3\\times \\rm{SO(3)}\\) 是一个 \\(6\\) 维空间。\n坐标变换 在 \\(E^3\\) 中两个不同的正交标架给出了两个不同的Cartesian直角坐标系，设 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 和 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 是 \\(E^3\\) 中的两个正交标架。它们的关系由式28给出。假定点 \\(q\\) 关于 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 的坐标是 \\((x,y,z)\\) ，关于 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 的坐标是 \\((\\tilde{x},\\tilde{y},\\tilde{z})\\)\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e Q 1 e 3 2 k i j P O (x,y,z) (x,y,z) ~ ~ ~ e e 图1\u0026emsp;坐标变换\n则一方面有\n\\[ \\overrightarrow{OQ}=x\\bm{i}+y\\bm{j}+z\\bm{k}= \\begin{pmatrix} x \u0026 y \u0026 z \\end{pmatrix} \\cdot \\begin{pmatrix} \\bm{i}\\\\[5pt] \\bm{j}\\\\[5pt] \\bm{k} \\end{pmatrix} \\tag{35} \\] 另一方面有\n\\[ \\begin{aligned} \\overrightarrow{OQ}=\u0026\\overrightarrow{OP}+\\overrightarrow{PQ}\\\\[5pt] =\u0026 \\begin{pmatrix} a_1 \u0026 a_2 \u0026 a_3 \\end{pmatrix} \\cdot \\begin{pmatrix} \\bm{i}\\\\[5pt] \\bm{j}\\\\[5pt] \\bm{k} \\end{pmatrix} +\\begin{pmatrix} \\tilde{x} \u0026 \\tilde{y} \u0026 \\tilde{z} \\end{pmatrix} \\cdot \\begin{pmatrix} \\bm{e}_1\\\\[5pt] \\bm{e}_2\\\\[5pt] \\bm{e}_3 \\end{pmatrix}\\\\ =\u0026\\left(\\bm{a}+\\begin{pmatrix}\\tilde{x}\u0026\\tilde{y}\u0026\\tilde{z}\\end{pmatrix}\\cdot\\bm{A}\\right)\\cdot \\begin{pmatrix} \\bm{i}\\\\[5pt] \\bm{j}\\\\[5pt] \\bm{k} \\end{pmatrix} \\end{aligned} \\tag{36} \\] 因此，点 \\(q\\) 在两个不同的Cartesian直角坐标系 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 和 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 下分别有坐标 \\((x,y,z)\\) 和 \\((\\tilde{x},\\tilde{y},\\tilde{z})\\) ，它们满足如下的关系式\n\\[ (x,y,z)=\\bm{a}+\\begin{pmatrix}\\tilde{x}\u0026\\tilde{y}\u0026\\tilde{z}\\end{pmatrix}\\cdot\\bm{A} \\tag{37} \\] 即\n\\[ \\begin{cases} x=a_1+a_{11}\\tilde{x}+a_{21}\\tilde{y}+a_{31}\\tilde{z}\\\\[5pt] y=a_2+a_{12}\\tilde{x}+a_{22}\\tilde{y}+a_{32}\\tilde{z}\\\\[5pt] z=a_3+a_{13}\\tilde{x}+a_{23}\\tilde{y}+a_{33}\\tilde{z} \\end{cases} \\tag{38} \\] 也可以写成\n\\[ \\begin{pmatrix} x\\\\[5pt] y\\\\[5pt] z \\end{pmatrix} = \\bm{a}^T+ \\bm{A}^T \\cdot \\begin{pmatrix} \\tilde{x}\\\\[5pt] \\tilde{y}\\\\[5pt] \\tilde{z} \\end{pmatrix} \\tag{39} \\] 刚体运动 定义 正交标架的重要性还在予它能够用来表示Euclidean空间\\(E^3\\)中刚体的运动。所谓刚体运动原是物理学中的一个概念．如果一个物体在空间中的运动不改变它的形状及其大小，只改变它在空问中的位置，那么该物体的这种运动称为刚体运动。要确定一个刚体在 \\(E^3\\) 中的位置，只要确定在该刚体上不共线的三个点的位置就行了，而刚体上其他的点可以通过它到已知的三个点的距离、以及所成的三个向量构成右手系还是左手系来确定。但是，在 \\(E^3\\) 中正交标架 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 是由点 \\(P\\) 和两个彼此正交的单位向量 \\(\\bm{e}_1,\\bm{e}_2\\) 决定的，它们恰好相当于空间中不共线的三个点。这样，在刚体上安装一个正交标架，则这个标架在空间中的位置代表了这个刚体的位置。如果把空间和刚体捆绑在一起，把刚体在空间中的运动看作空间自身在空间中的刚体运动，则这是空间 \\(E^3\\) 到它自身的一个变换，这个变换保持该空间中任意两点之间的距离不变。\n刚体运动与标架 设在刚体上安装的正交标架是 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 。假定它在初始位置时该标架与空间中取定的正交标架 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 重合，经过刚体运动 \\(\\sigma\\) 达到了现在的位置，那么空间中的任意一点 \\(Q\\) 在刚体运动 \\(\\sigma\\) 下变成了像点\n\\[ \\tilde{Q}=\\sigma(Q) \\tag{40} \\] 它关于标架 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 的相对位置与 \\(Q\\) 关于 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 的相对位置是一样的。若设\n\\[ \\overrightarrow{OQ}= \\begin{pmatrix} x \u0026 y \u0026 z \\end{pmatrix} \\cdot \\begin{pmatrix} \\bm{i}\\\\[5pt] \\bm{j}\\\\[5pt] \\bm{k} \\end{pmatrix} \\tag{41} \\] 则也有\n\\[ \\overrightarrow{P\\tilde{Q}}= \\begin{pmatrix} x \u0026 y \u0026 z \\end{pmatrix} \\cdot \\begin{pmatrix} \\bm{e}_1\\\\[5pt] \\bm{e}_2\\\\[5pt] \\bm{e}_3 \\end{pmatrix} \\tag{42} \\] 所以\n\\[ \\begin{aligned} \\overrightarrow{O\\tilde{Q}}=\u0026\\overrightarrow{OP}+\\overrightarrow{P\\tilde{Q}}\\\\ =\u0026\\left(\\bm{a}+\\begin{pmatrix}x\u0026y\u0026z\\end{pmatrix}\\cdot\\bm{A}\\right)\\cdot \\begin{pmatrix} \\bm{i}\\\\[5pt] \\bm{j}\\\\[5pt] \\bm{k} \\end{pmatrix} \\end{aligned} \\tag{43} \\] 这就是说，像点 \\(\\tilde{q}=\\sigma(q)\\) 关于 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 的坐标是\n\\[ \\begin{pmatrix}\\tilde{x}\u0026\\tilde{y}\u0026\\tilde{z}\\end{pmatrix}=\\bm{a}+\\begin{pmatrix}x\u0026y\u0026z\\end{pmatrix}\\cdot\\bm{A} \\tag{44} \\] 即\n\\[ \\begin{cases} \\tilde{x}=a_1+a_{11}x+a_{21}y+a_{31}z\\\\[5pt] \\tilde{y}=a_2+a_{12}x+a_{22}y+a_{32}z\\\\[5pt] \\tilde{z}=a_3+a_{13}x+a_{23}y+a_{33}z \\end{cases} \\tag{45} \\] 也可以写成\n\\[ \\begin{pmatrix} \\tilde{x}\\\\[5pt] \\tilde{y}\\\\[5pt] \\tilde{z} \\end{pmatrix} = \\bm{a}^T+ \\bm{A}^T \\cdot \\begin{pmatrix} x\\\\[5pt] y\\\\[5pt] z \\end{pmatrix} \\tag{46} \\] 因此如果把正交标架 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 变到 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 的刚体运动同时把点 \\(q=(x,y,z)\\) 变到点 \\(\\tilde{q}=(\\tilde{x},\\tilde{y},\\tilde{z})\\) （它们分别是点 \\(q\\) 和 \\(\\tilde{q}\\) 关于正交标架 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 的坐标），则 \\((\\tilde{x},\\tilde{y},\\tilde{z})\\) 与 \\((x,y,z)\\) 之间的关系恰好是由式44给出的．注意到式44和式37有很大的相似性，但是它们的意义却是完全不同的，前者是点不变而标架变换，后者是点随标架一起同步变换。这种在公式上的相似性说明刚体运动在某种意义上可以看作一种坐标变换（参看图2）。具体地说，式44可以解读为把点 \\(\\tilde{q}\\) 在标架 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 下的坐标 \\((x,y,z)\\) 变换为在标架 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 下的坐标 \\((\\tilde{x},\\tilde{y},\\tilde{z})\\) 的公式。\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e Q k i j P 1 3 ~ 2 Q O (x,y,z) (x,y,z) ~ ~ ~ e e e 图2\u0026emsp;刚体运动\n我们可以把上述讨论总结成下面的定理。\n定理1： \\(E^3\\) 中的刚体运动把一个正交标架变成另一个正交标架；反过来，对于 \\(E^3\\) 中的任意两个正交标架，必有 \\(E^3\\) 的一个刚体运动把其中一个正交标架变成另一个正交标架。\n等距变换 距离不变的变换称为等距变换。刚体运动是一种等距变换。容易证明，等距变换把共线的三个点变为共线的三个点，并且保持它们的分比不变，进而可以证明等距变换是如式44给出的线性变换，但是此时只能证明其中的矩阵 \\(\\bm{A}\\) 是正交矩阵，而不要求它的行列式的值是正的因此等距变换把单位正交标架变成一个另单位正交标架，但是可能把右手系变成左手系。换句话说刚体运动是保持右手系不变的等距变换，而等距变换或者是一个刚体运动，或者是一个刚体运动与关于某个平面的反射的合成。\n注：在此简单证明一下式44给出的变换是等距变换（ \\(\\bm{A}\\) 是正交矩阵，满足 \\(\\bm{A}\\bm{A}^T=\\bm{A}^T\\bm{A}=1\\) ）。设有 \\(P_1=(x_1,y_1,z_1),P_2=(x_2,y_2,z_2)\\) 被式44变换为 \\(\\tilde{P}_1(\\tilde{x}_1,\\tilde{y}_1,\\tilde{z}_1),\\tilde{P}_2=(\\tilde{x}_2,\\tilde{y}_2,\\tilde{z}_2)\\) 。其距离被变换为\n\\[ \\begin{aligned} \\left|\\tilde{P}_1\\tilde{P}_2\\right|=\u0026\\sqrt{(\\tilde{x}_1-\\tilde{x}_2)^2+(\\tilde{y}_1-\\tilde{y}_2)^2+(\\tilde{z}_1-\\tilde{z}_2)^2}\\\\[5pt] =\u0026\\sqrt{\\left(\\begin{pmatrix}\\tilde{x}_1\u0026\\tilde{y}_1\u0026\\tilde{z}_1\\end{pmatrix}-\\begin{pmatrix}\\tilde{x}_2\u0026\\tilde{y}_2\u0026\\tilde{z}_2\\end{pmatrix}\\right)\\cdot\\left(\\begin{pmatrix}\\tilde{x}_1\u0026\\tilde{y}_1\u0026\\tilde{z}_1\\end{pmatrix}-\\begin{pmatrix}\\tilde{x}_2\u0026\\tilde{y}_2\u0026\\tilde{z}_2\\end{pmatrix}\\right)^T}\\\\[5pt] =\u0026\\sqrt{\\left(\\begin{pmatrix}x_1\u0026y_1\u0026z_1\\end{pmatrix}-\\begin{pmatrix}x_2\u0026y_2\u0026z_2\\end{pmatrix}\\right)\\bm{A}\\cdot\\bm{A}^T\\left(\\begin{pmatrix}x_1\u0026y_1\u0026z_1\\end{pmatrix}-\\begin{pmatrix}x_2\u0026y_2\u0026z_2\\end{pmatrix}\\right)^T}\\\\[5pt] =\u0026\\sqrt{\\left(\\begin{pmatrix}x_1\u0026y_1\u0026z_1\\end{pmatrix}-\\begin{pmatrix}x_2\u0026y_2\u0026z_2\\end{pmatrix}\\right)\\cdot\\left(\\begin{pmatrix}x_1\u0026y_1\u0026z_1\\end{pmatrix}-\\begin{pmatrix}x_2\u0026y_2\u0026z_2\\end{pmatrix}\\right)^T}\\\\[5pt] =\u0026\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2+(z_1-z_2)^2}=|P_1P_2| \\end{aligned} \\tag{47} \\] 故距离不变。对于共线的三个点 \\(P_1,P_2,P_3\\) ，必存在不为零的 \\(\\lambda,\\mu\\) 使得\n\\[ (x_1,y_1,z_1)=\\lambda\\cdot(x_2,y_2,z_2)+\\mu\\cdot(x_3,y_3,z_3) \\tag{48} \\] 而式44是个线性变换，因此变换后上式也能满足（容易代入验证），因此三点共线的性质不变。\n在空间 \\(E^3\\) 中取定Cartesian直角坐标系之后，几何图形就能够用坐标来表达，几何图形固有的性质自然也可以用坐标来表达，但是所表达的性质应该与Cartesian直角坐标系的取法无关。反过来，如果儿何图形的一个用笛卡儿直角坐标表示的量与笛卡儿直角坐标系的取法无关，则这个量应该是几何图形所固有的量；另外，这个量在几何图形的刚体运动下是保持不变的。我们所研究的就是几何图形的这种不变量。\n仿射标架 除了正交标架外，我们还经常使用仿射标架。所谓仿射标架，是指空间中的一个点 \\(P\\) 和在该点的三个不共面的向量 \\(\\bm{e}_1,\\bm{e}_2,\\bm{e}_3\\) 组成的图形 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) ，但是对该图形不要求这三个向量有单位正交的性质。令\n\\[ g_{ij}=\\bm{e}_i\\cdot\\bm{e}_j\\quad 1 \\le i,j \\le 3 \\tag{49} \\] 我们把 \\((g_{ij})\\) 称为仿射标架 \\(\\set{P;\\bm{e}_1,\\bm{e}_2,\\bm{e}_3}\\) 的度量系数。空间 \\(E^3\\) 的刚体运动把仿射标架变成仿射标架，并且保持它的度量系数不变，保持标架的定向不变。反过来，对于对于 \\(E^3\\) 中任意两个有相同度量系数的、成右手系的仿射标架，必有 \\(E^3\\) 中的一个刚体运动把其中一个仿射标架变成另一个仿射标架。很明显， \\(E^3\\) 中的全体仿射标架的集合可以等同于 \\(E^3\\times\\rm{GL(3)}\\) （见GL(3)群），其中 \\(\\rm{GL(3)}\\) 表示可逆的 \\(3\\times 3\\) 矩阵的集合。因此，\\(E^3\\) 的全体仿射标架构成一个 \\(12\\) 维的空间。\n向量函数 向量空间 定义 由三维Euclidean空间 \\(E^3\\) 中的全体向量组成的空间称为三维Euclidean向量空间。在给定了一个正交标架 \\(\\set{O;\\bm{i},\\bm{j},\\bm{k}}\\) 之后，该空间等同于由有序的三个实数的组构成的空间 \\(\\R^3\\) 。\n数量积 设有 \\(\\R^3\\) 中的三个向量\n\\[ \\bm{a}=(a_1,a_2,a_3)\\\\[5pt] \\bm{b}=(b_1,b_2,b_3)\\\\[5pt] \\bm{c}=(c_1,c_2,c_3) \\tag{50} \\] 则 \\(\\bm{a}\\) 和 \\(\\bm{b}\\) 的点乘（以后也称为内积，或数量积）是\n\\[ \\bm{a}\\cdot\\bm{b}=|\\bm{a}|\\cdot|\\bm{b}|\\cdot\\cos\\angle(\\bm{a},\\bm{b})=a_1b_1+a_2b_2+a_3b_3 \\tag{51} \\] 向量积 \\(\\bm{a}\\) 和 \\(\\bm{b}\\) 的叉乘（也称为向量积）是\n\\[ \\begin{aligned} \\bm{a}\\times\\bm{b}=\u0026\\left( \\begin{vmatrix} a_2 \u0026 a_3 \\\\[5pt] b_2 \u0026 b_3 \\end{vmatrix} , \\begin{vmatrix} a_3 \u0026 a_1 \\\\[5pt] b_3 \u0026 b_1 \\end{vmatrix} , \\begin{vmatrix} a_1 \u0026 a_2 \\\\[5pt] b_1 \u0026 b_2 \\end{vmatrix} \\right) \\\\[15pt] =\u0026 \\begin{vmatrix} \\bm{i} \u0026 \\bm{j} \u0026 \\bm{k} \\\\[5pt] a_1 \u0026 a_2 \u0026 a_3 \\\\[5pt] b_1 \u0026 b_2 \u0026 b_3 \\end{vmatrix} \\end{aligned} \\tag{52} \\] 因此 \\(\\bm{a}\\times\\bm{b}\\perp\\bm{a}, \\bm{a}\\times\\bm{b}\\perp\\bm{b}\\) 。向量 \\(\\bm{a},\\bm{b}\\) 和 \\(\\bm{a}\\times\\bm{b}\\) 构成右手系，并且\n\\[ |\\bm{a}\\times\\bm{b}|=|\\bm{a}|\\cdot|\\bm{b}|\\cdot\\sin\\angle(\\bm{a},\\bm{b}) \\tag{53} \\] 混合积 \\(\\bm{a},\\bm{b}\\) 和 \\(\\bm{c}\\) 的混合积是\n\\[ (\\bm{a},\\bm{b},\\bm{c})=(\\bm{a}\\times\\bm{b})\\cdot\\bm{c}= \\begin{vmatrix} a_1 \u0026 a_2 \u0026 a_3 \\\\[5pt] b_1 \u0026 b_2 \u0026 b_3 \\\\[5pt] c_1 \u0026 c_2 \u0026 c_3 \\end{vmatrix} \\tag{54} \\] 它的几何意义是由向量 \\(\\bm{a},\\bm{b}\\) 和 \\(\\bm{c}\\) 所张城的平行六面体的有向体积。\n向量函数 定义 所谓向量函数是指从它的定义域到 \\(\\R^3\\) 中的映射，也就是三个有序的实函数。设有定义在区间[a,b]上的向量函数\n\\[ \\bm{r}(t)=(x(t),y(t),z(t))\\quad a \\le t \\le b \\tag{55} \\] 微积分 如果 \\(x(t),y(t),z(t)\\) 都是 \\(t\\) 的连续函数，则称向量函数 \\(\\bm{r}(t)\\) 是连续的；如果 \\(x(t),y(t),z(t)\\) 都是 \\(t\\) 的连续可微函数，则称向量函数 \\(\\bm{r}(t)\\) 是连续可微的。向量函数 \\(\\bm{r}(t)\\) 的导数和积分的定义与数值函数的导数和积分的定义是相同的，即\n\\[ \\begin{aligned} \\left.\\frac{d\\bm{r}}{dt}\\right|_{t=t_0}=\u0026\\lim\\limits_{\\Delta t \\to 0}\\frac{\\bm{r}(t_0+\\Delta t)-\\bm{r}(t_0)}{\\Delta t}\\\\[10pt] =\u0026\\lim\\limits_{\\Delta t \\to 0}\\left(\\frac{x(t_0+\\Delta t)-x(t_0)}{\\Delta t},\\frac{y(t_0+\\Delta t)-y(t_0)}{\\Delta t},\\frac{z(t_0+\\Delta t)-z(t_0)}{\\Delta t}\\right) \\end{aligned} \\tag{56} \\] \\[ \\begin{aligned} \\int_{a}^{b}\\bm{r}(t)dt=\u0026\\lim\\limits_{\\lambda\\to 0}\\sum_{i=1}^{n}\\bm{r}(t_i^\\prime)\\Delta t_i\\\\[10pt] =\u0026\\left(\\int_{a}^{b}x(t)dt,\\int_{a}^{b}y(t)dt,\\int_{a}^{b}z(t)dt\\right) \\end{aligned} \\tag{57} \\]\n其中 \\(a=t_0 \u003c t_1 \u003c \\cdots \u003c t_n = b\\) 是区间 \\([a,b]\\) 的任意一个分割， \\(\\Delta t_i=t_i-t_{i-1},\\space t_i^\\prime \\in [t_{i-1},t_i]\\) ，并且 \\(\\lambda=\\max\\set{\\Delta t_i;i=1,\\cdots,n}\\) 。这就是说，向量函数的求导和积分归结为它的分量函数的求导和积分，因此向量函数的可微性和可积性归结为它的分量函数的可微性和可积性。\n定理2：\n","date":"2024-10-08T15:55:08+08:00","image":"https://www.brasswrench.com/posts/mathematics/differential_geometry/propaedeutics/figures/image.zh-cn.svg","permalink":"https://www.brasswrench.com/posts/mathematics/differential_geometry/propaedeutics/","title":"微分几何（一）：Euclidean空间与向量函数"},{"content":" 函数的无穷级数和无穷乘积展开 引言 在本文中，我们介绍一些在初等数学课程里不常讲到的关于函数的无穷级数展开，无穷乘积展开和渐近展开。\nBernoulli多项式和Bernoulli数 定义1（Bernoulli多项式）：称下列展开式给出的 \\(\\varphi_n(x)(n=0,1,2,\\cdots)\\) 为Bernoulli多项式\n\\[ \\frac{te^{xt}}{e^t-1}=\\sum_{n=0}^{\\infin}\\frac{t^n}{n!}\\varphi_n(x) \\tag{1} \\] 左方的函数称为Bernoulli多项式的生成函数。级数在 \\(|t|\u003c2\\pi\\) 时收敛，因为左方函数离 \\(t=0\\) 最近的奇点是 \\(t=\\pm 2\\pi i\\) （ \\(|t|\u003c2\\pi\\) 时没有奇点故值有限）。\n","date":"2024-10-06T22:21:34+08:00","image":"https://www.brasswrench.com/posts/mathematics/special_functions/infinite_expansions/figures/image.zh-cn.svg","permalink":"https://www.brasswrench.com/posts/mathematics/special_functions/infinite_expansions/","title":"特殊函数（一）：函数的无穷级数和无穷乘积展开"},{"content":" Legendre函数 引言 Legendre函数是一类特殊函数，在数学和物理学中扮演着重要的角色，特别是在涉及到球面和多项式近似的领域。作为一类正交多项式，勒让德多项式具有独特的性质，使其在数值分析、量子力学和电磁学等多个领域中广泛应用。尽管勒让德函数的应用十分广泛，但它们的理论基础及其数学性质同样值得深入研究。本篇文章将重点探讨勒让德函数的定义、性质以及相关的数学工具，旨在为读者提供对这一重要数学对象的全面理解。\nLegendre函数 普通Legendre函数 定义1（Legendre方程）：将如下方程定义为Legendre方程（普通Legendre方程）\n\\[ (1-x^2)\\frac{d^2y}{dx^2}-2x\\frac{dy}{dx}+\\nu(\\nu+1)y=0 \\tag{1} \\] \\(\\nu\\) 和 \\(x\\) 可以是任何复数。该方程的解称为Legendre函数（普通Legendre函数）。\n连带Legendre函数 定义2（连带Legendre方程）：将如下方程定义为连带Legendre方程\n\\[ (1-x^2)\\frac{d^2y}{dx^2}-2x\\frac{dy}{dx}+\\left(\\nu(\\nu+1)-\\frac{\\mu}{1-x^2}\\right)y=0 \\tag{2} \\] 该方程的解称为连带Legendre函数。可以看到，Legendre方程是连带Legendre方程在 \\(\\mu=0\\) 时的特殊情况。\n该方程有三个奇点： \\(-1,1,\\infin\\) ，而且都是正则奇点，指标分别为 \\(\\displaystyle\\left(\\frac{\\mu}{2},-\\frac{\\mu}{2}\\right),\\left(\\frac{\\mu}{2},-\\frac{\\mu}{2}\\right),\\left(\\nu+1,\\nu\\right)\\) ，因此这个方程属于超几何方程类型。它的解也可以用超几何方程表达。由《特殊函数概论》2.9节(12)和(16)有该方程解为\n\\[ P \\begin{Bmatrix} -1 \u0026 1 \u0026 \\infin \u0026 \\\\[10pt] \\displaystyle\\frac{\\mu}{2} \u0026 \\displaystyle\\frac{\\mu}{2} \u0026 \\nu+1; \u0026 x\\\\[10pt] \\displaystyle-\\frac{\\mu}{2} \u0026 \\displaystyle-\\frac{\\mu}{2} \u0026 -\\nu \u0026 \\end{Bmatrix} =P \\begin{Bmatrix} 1 \u0026 0 \u0026 \\infin \u0026 \\\\[10pt] \\displaystyle\\frac{\\mu}{2} \u0026 \\displaystyle\\frac{\\mu}{2} \u0026 \\nu+1; \u0026 \\displaystyle\\frac{1-x}{2}\\\\[10pt] \\displaystyle-\\frac{\\mu}{2} \u0026 \\displaystyle-\\frac{\\mu}{2} \u0026 -\\nu \u0026 \\end{Bmatrix} \\\\[10pt] =\\left(\\frac{1-x}{2}\\right)^{\\frac{\\mu}{2}}\\left(1-\\frac{1-x}{2}\\right)^{\\frac{\\mu}{2}} \\begin{Bmatrix} 1 \u0026 0 \u0026 \\infin \u0026 \\\\[10pt] 0 \u0026 0 \u0026 \\nu+\\mu+1; \u0026 \\displaystyle\\frac{1-x}{2}\\\\[10pt] -\\mu \u0026 -\\mu \u0026 -\\nu+\\mu \u0026 \\end{Bmatrix} \\\\[10pt] =2^{-\\mu}(1-x^2)^{\\frac{\\mu}{2}}P \\begin{Bmatrix} 1 \u0026 0 \u0026 \\infin \u0026 \\\\[10pt] 0 \u0026 0 \u0026 \\nu+\\mu+1; \u0026 \\displaystyle\\frac{1-x}{2}\\\\[10pt] -\\mu \u0026 -\\mu \u0026 -\\nu+\\mu \u0026 \\end{Bmatrix} \\tag{3} \\] 在实际应用中最常见的是 \\(\\mu\\) 和 \\(\\nu\\) 都等于整数的情形。当 \\(\\mu\\) 和 \\(\\nu\\) 不是整数时，需要较多地用到超几何函数理论。\nLegendre多项式 Legendre多项式的定义 定义3（Legendre多项式）：Legendre多项式是如下Legendre方程的多项式解\n\\[ (1-x^2)\\frac{d^2y}{dx^2}-2x\\frac{dy}{dx}+n(n+1)y=0\\quad(n=0,1,2,\\cdots) \\tag{4} \\] ","date":"2024-10-01T13:25:22+08:00","image":"https://www.brasswrench.com/posts/mathematics/special_functions/legendre_functions/figures/image.zh-cn.svg","permalink":"https://www.brasswrench.com/posts/mathematics/special_functions/legendre_functions/","title":"特殊函数（五）：Legendre函数"},{"content":" ","date":"2024-09-26T13:00:05+08:00","image":"https://www.brasswrench.com/posts/artificial_intelligence/computer_vision/image_generation_models/diffusion_model/figures/image.zh-cn.svg","permalink":"https://www.brasswrench.com/posts/artificial_intelligence/computer_vision/image_generation_models/diffusion_model/","title":"图像生成模型（一）：扩散模型"},{"content":" 3D高斯泼溅算法 引言 在三维重建领域，随着计算机图形学和相关技术的飞速发展，各种创新算法不断涌现，为精准、高效地构建三维场景提供了强大支持。其中，3D高斯泼溅算法（3D Gaussian Splatting，简称3DGS）‌作为一种新兴的、具有革命性的三维重建技术，正逐渐受到广泛关注。\n3D高斯泼溅算法的创新在于其独特的表示和渲染方法。它通过将场景中的每个点视为一个高斯球，利用三维高斯函数的数学性质，将离散的数据点或体素转换为可视化的效果。这一过程中，三维高斯球的叠加不仅实现了数据的平滑过渡，还保留了场景中的细粒度细节。同时，结合快速的可见性感知渲染算法，3D高斯泼溅算法能够在保证高质量渲染效果的同时，实现实时的新视图合成。\n对比NeRF和传统的Mesh：一个是纯连续的、隐式表达在可微空间内；一个是纯离散的（虽然可以插值）、显式表达在三维空间内，3D高斯是在离散和连续间的一个平衡：在高斯球内部是连续的、可微的；在整个空间中，每个高斯球又是离散的。\n本文将深入探讨3D高斯泼溅算法的基本原理，从其数学基础、实现步骤到应用场景，全面解析这一先进技术的核心优势和技术特点。通过本文的介绍，读者将能够更深入地理解3D高斯泼溅算法的工作原理，并探索其在三维重建、点云渲染、体数据可视化等领域的广泛应用前景。\n算法框架 3DGS的主要任务有两个：三维重建和渲染。简单来说，就是提供一组某个场景的照片，然后将这个场景实时渲染出来。算法的主要框架如下图所示。\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e SfM Points Initialization 3D Gaussians Projection Adaptive Density Control Differentiable Tile Rasterizer Image Camera Operation Flow Gradient Flow 图1\u0026emsp;3D Gaussian Splatting整体框架\n由上图可以看出，当拿到一组场景照片以后，我们需要先使用某种SfM（Structure from Motion）算法估计出这一组照片的结构（位置）和姿态（摄像机方向）和一组稀疏点云（SfM Points）。然后交给3DGS进行初始化（Initialization）‌得到一组初始的3D高斯球（3D Gaussians）。然后，我们借助相机外参（结构和姿态）将这一组3D高斯球投影到相机平面上（Projection），接着再使用可微分块光栅化（Differentiable Tile Rasterizer）‌渲染得到图像（Image）。得到渲染图像后将其与相机原始的图像（Ground Truth）进行loss比对，然后沿着虚线箭头进行梯度回传。虚线箭头从上回传的时候，更新3D高斯球中的参数，从下回传时会经过自适应密度控制（Adaptive Density Control）‌的处理，而后更新3D高斯球中的点云。\n接下来，我们详细讲解算法中的每一个步骤，并给出具体的实现方式。\n算法内容 运动结构恢复 由于该步骤并不是3D Gaussian Splatting的主要内容（详细请见运动结构恢复），而且已经有较成熟的算法和软件可以实现这部分内容（例如COLMAP），因此在此不做过多介绍。\n3D高斯椭球集的创建及描述 拿到相机的位置、姿态和稀疏点云后，就可以开始创建初始的3D高斯椭球集。描述一个3D高斯椭球需要四种信息：位置、形状、颜色和不透明度。\n3D高斯椭球 在概率论中我们已经学到了多维高斯分布的表达式如下：\n\\[ f\\left(\\bm{x}|\\bm{\\mu},\\bm{\\Sigma}\\right)=\\frac{1}{\\sqrt{\\left(2\\pi\\right)^3\\left|\\bm{\\Sigma}\\right|}}\\exp\\left(-\\frac{1}{2}\\left(\\bm{x}-\\bm{\\mu}\\right)^{T}\\bm{\\Sigma}^{-1}\\left(\\bm{x}-\\bm{\\mu}\\right)\\right) \\tag{1} \\] 其中 \\(\\bm{\\mu}\\) 是均值， \\(\\bm{\\Sigma}\\) 是协方差矩阵，它是对称且正定的。在三维空间中，我们将这么一个三维高斯分布叫做一个3D高斯椭球。\n位置 3D高斯椭球的均值 \\(\\bm{\\mu}\\) 就是这个3D高斯椭球的位置，也就是其中心点。初始化3D高斯椭球的时候，这个中心点就是由SfM算法得到的稀疏点云。\n形状 3D高斯椭球的协方差 \\(\\bm{\\Sigma}\\) 就是代表它的形状。由实对称矩阵的正交相似对角化和 \\(\\bm{\\Sigma}\\) 的对称性和正定性， \\(\\bm{\\Sigma}\\) 可以被分解成 \\(\\bm{\\Sigma}=\\bm{R}\\bm{\\Lambda}\\bm{R}^T\\) ，其中 \\(\\bm{R}\\) 是一个正交矩阵， \\(\\bm{\\Lambda}\\) 是由 \\(\\bm{\\Sigma}\\) 的特征值构成的对角矩阵。注意正定矩阵的特征值都是正的，因此 \\(\\bm{\\Lambda}\\) 还可以被分解成 \\(\\bm{\\Lambda}=\\bm{S}\\bm{S}^T\\) ，其中 \\(\\bm{S}\\) 也是一个正的对角矩阵，且其对角线上的值其实就是对应的 \\(\\bm{\\Sigma}\\) 特征值的平方根。因此有\n\\[ \\bm{\\Sigma}=\\bm{R}\\bm{S}\\bm{S}^T\\bm{R}^T \\tag{2} \\] 我们注意看这个式子的几何意义。由于 \\(\\bm{S}\\) 是一个对角矩阵，因此其可以被看成一个放缩变换，而 \\(\\bm{R}\\) 是一个正交矩阵，因此可以看成一个旋转变换（见旋转变换）。将其代回式1，易得实际上这个操作就是把正交基先拉伸后旋转，再将去均值的随机向量 \\(\\bm{x}-\\bm{\\mu}\\) 投影到新的正交基上的操作。\n对于三维对角矩阵 \\(\\bm{S}\\) ，只需要一个三维向量 \\(\\bm{s}\\) 描述即可，该向量的每个分量对应对角矩阵 \\(\\bm{S}\\) 的每个对角分量。即\n\\[ \\bm{S}\\left(\\bm{s}\\right)= \\begin{pmatrix} s_1 \u0026 0 \u0026 0 \\\\[5pt] 0 \u0026 s_2 \u0026 0 \\\\[5pt] 0 \u0026 0 \u0026 s_3 \\end{pmatrix} \\tag{3} \\] 对于正交矩阵 \\(\\bm{R}\\) ，可以用一个四元数 \\(\\bm{q}\\) 来表示（见四元数与旋转）。在机器学习中，直接对 \\(\\bm{\\Sigma}\\) 进行学习很难保证其正定性。因此，3DGS采用的方法是对 \\(\\bm{s}\\) 和 \\(\\bm{q}\\) 进行学习，再用公式间接计算 \\(\\bm{\\Sigma}\\) 。这里，我们先给出四元数到旋转矩阵的计算关系（具体推导见四元数与旋转）：\n\\[ \\bm{R}\\left(\\bm{q}\\right)= \\begin{pmatrix} 1-2\\left(q_2^2+q_3^2\\right) \u0026 2\\left(q_1q_2-q_0q_3\\right) \u0026 2\\left(q_1q_3+q_0q_2\\right) \\\\[5pt] 2\\left(q_1q_2+q_0q_3\\right) \u0026 1-2\\left(q_1^2+q_3^2\\right) \u0026 2\\left(q_2q_3-q_0q_1\\right) \\\\[5pt] 2\\left(q_1q_3-q_0q_2\\right) \u0026 2\\left(q_2q_3+q_0q_1\\right) \u0026 1-2\\left(q_1^2+q_2^2\\right) \\end{pmatrix} \\tag{4} \\] 在初始化的时候，3DGS会利用KNN算法计算点云中每个点到与其最近的3个点的平均距离，然后取对数，将其同时作为 \\(\\bm{s}\\) 中的三个分量的值。对于 \\(\\bm{q}\\) ，3DGS将其初始化为 \\(\\bm{q}=\\left(1,0,0,0\\right)\\) ，也就是不进行旋转。\n颜色 对于一个3D高斯球，它的不同方向会呈现不同的颜色，那么这种各向异性的颜色该如何描述呢？这里需要运用到数学中的一个重要的展开工具：实球谐函数（Real Spherical Harmonics）（见球谐函数）。\n计算机图形学中常用的实球谐函数的定义如下：\n\\[ \\mathcal{Y}_l^m\\left(\\theta,\\varphi\\right)= \\begin{cases} \\displaystyle\\sqrt{2}K_l^mP^m_l\\left(\\cos\\theta\\right)\\cos m\\varphi\\quad \u0026(m\u003e0)\\\\[5pt] \\displaystyle K_l^mP^{m}_{l}\\left(\\cos\\theta\\right)\\quad \u0026(m=0)\\\\[5pt] \\displaystyle\\sqrt{2}K_l^mP^{-m}_{l}\\left(\\cos\\theta\\right)\\sin (-m\\varphi)\\quad \u0026(m\u003c0) \\end{cases} \\tag{5} \\] 其中\n\\[ K_l^m=\\sqrt{\\frac{2l+1}{4\\pi}\\frac{\\left(l-|m|\\right)!}{\\left(l+|m|\\right)!}} \\tag{6} \\] 是归一化系数。 \\(P^m_l\\left(\\cos\\theta\\right)\\) 是连带Legendre多项式（见连带Legendre多项式），定义如下：\n\\[ P^m_l\\left(x\\right)=\\left(-1\\right)^m\\frac{\\left(1-x^2\\right)^{\\frac{m}{2}}}{2^ll!}\\frac{d^{l+m}}{dx^{l+m}}(x^2-1)^l \\tag{7} \\] 类似于Tayler展开和Fourier展开，任何一个在球面上连续的实函数 \\(f(\\theta,\\varphi)\\) 可以用 \\(Y_{lm}(\\theta,\\varphi)\\) 展开为一平均收敛的级数\n\\[ f(\\theta,\\varphi)=\\sum_{l=0}^{\\infin}\\sum_{-l}^{l}C_l^m\\mathcal{Y}_l^m(\\theta,\\varphi) \\tag{8} \\] 其中\n\\[ C_l^m=\\int_0^\\pi\\int_0^{2\\pi}\\mathcal{Y}_l^m(\\theta,\\varphi)f(\\theta,\\varphi)\\sin\\theta d\\theta d\\varphi \\tag{9} \\] 3DGS算法使用 \\(3\\) 阶球函数近似，使用RGB颜色来进行渲染。也就是，一共有三个通道，每个通道由区间 \\([0,1]\\) 的一个数来映射到每个通道表示颜色的 \\(0\\text{\\textasciitilde}255\\) 的一个数字。将每个RGB通道展开成一个 \\(3\\) 阶球函数需要 \\((3+1)^2=16\\) 个系数。由此可得，要想表示一个3D高斯椭球的颜色信息，需要 \\(3\\times (3+1)^2=48\\) 个参数。\n具体的，当我们拿到这 \\(48\\) 个参数和一个方向向量 \\(\\bm{n}=(x,y,z)\\) 以后，利用式8，我们可以通过如下推导得到该方向的球谐函数值\n\\[ \\begin{aligned} f_i(\\bm{n})_{SH}=\u0026\\sum_{l=0}^{3}\\sum_{-l}^{l}C_l^m(i)\\mathcal{Y}_l^m(\\bm{n})\\\\[5pt] =\u0026C_0^0(i)\\mathcal{Y}_0^0(\\bm{n})+\\\\[5pt] \u0026C_1^{-1}(i)\\mathcal{Y}_1^{-1}(\\bm{n})+C_1^0\\mathcal{Y}_1^0(\\bm{n})+C_1^1\\mathcal{Y}_1^1(\\bm{n})+\\\\[5pt] \u0026C_2^{-2}(i)\\mathcal{Y}_2^{-2}(\\bm{n})+C_2^{-1}(i)\\mathcal{Y}_2^{-1}(\\bm{n})+C_{20}\\mathcal{Y}_{20}(\\bm{n})+C_{21}\\mathcal{Y}_{21}(\\bm{n})+C_{22}(i)\\mathcal{Y}_{22}(\\bm{n})+\\\\[5pt] \u0026C_3^{-3}(i)\\mathcal{Y}_3^{-3}(\\bm{n})+C_3^{-2}(i)\\mathcal{Y}_3^{-2}(\\bm{n})+C_3^{-1}(i)\\mathcal{Y}_3^{-1}(\\bm{n})+C_3^0\\mathcal{Y}_3^0(\\bm{n})+C_3^1\\mathcal{Y}_3^1(\\bm{n})+C_3^2(i)\\mathcal{Y}_3^2(\\bm{n})+C_3^3(i)\\mathcal{Y}_3^3(\\bm{n}) \\end{aligned} \\tag{10} \\] \\(i\\) 取 \\(1,2,3\\) 表示 \\(3\\) 个RGB通道， \\(C_{00}(i)\\text{\\textasciitilde}C_{33}(i)\\) 均已知，下面给出 \\(\\mathcal{Y}_{00}(\\bm{n})\\text{\\textasciitilde}\\mathcal{Y}_{33}(\\bm{n})\\) 的表达式（可直接根据式5得到）\n实球谐函数 表达式 值 \\(\\mathcal{Y}_0^0(\\bm{n})\\) \\(\\displaystyle\\frac{1}{2}\\sqrt{\\frac{1}{\\pi}}\\) \\(0.28209479177387814\\) \\(\\mathcal{Y}_1^{-1}(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{2}\\sqrt{\\frac{3}{2\\pi}}y\\) \\(-0.4886025119029199\\times y\\) \\(\\mathcal{Y}_1^0(\\bm{n})\\) \\(\\displaystyle\\frac{1}{2}\\sqrt{\\frac{3}{2\\pi}}z\\) \\(0.4886025119029199\\times z\\) \\(\\mathcal{Y}_1^1(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{2}\\sqrt{\\frac{3}{2\\pi}}x\\) \\(-0.4886025119029199\\times x\\) \\(\\mathcal{Y}_2^{-2}(\\bm{n})\\) \\(\\displaystyle\\frac{1}{2}\\sqrt{\\frac{15}{\\pi}}xy\\) \\(1.0925484305920792\\times xy\\) \\(\\mathcal{Y}_2^{-1}(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{2}\\sqrt{\\frac{15}{\\pi}}yz\\) \\(-1.0925484305920792\\times yz\\) \\(\\mathcal{Y}_2^0(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{4}\\sqrt{\\frac{5}{\\pi}}(3z^2-1)\\) \\(0.31539156525252005\\times (3z^2-1)\\) \\(\\mathcal{Y}_2^1(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{2}\\sqrt{\\frac{15}{\\pi}}xz\\) \\(-1.0925484305920792\\times xz\\) \\(\\mathcal{Y}_2^2(\\bm{n})\\) \\(\\displaystyle\\frac{1}{4}\\sqrt{\\frac{15}{\\pi}}(x^2-y^2)\\) \\(0.5462742152960396\\times (x^2-y^2)\\) \\(\\mathcal{Y}_3^{-3}(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{8}\\sqrt{\\frac{70}{\\pi}}y(3x^2-y^2)\\) \\(-0.5900435899266435\\times y(3x^2-y^2)\\) \\(\\mathcal{Y}_3^{-2}(\\bm{n})\\) \\(\\displaystyle\\frac{1}{2}\\sqrt{\\frac{105}{\\pi}}xyz\\) \\(2.890611442640554\\times xyz\\) \\(\\mathcal{Y}_3^{-1}(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{8}\\sqrt{\\frac{42}{\\pi}}y(5z^2-1)\\) \\(-0.4570457994644658\\times y(5z^2-1)\\) \\(\\mathcal{Y}_3^0(\\bm{n})\\) \\(\\displaystyle\\frac{1}{4}\\sqrt{\\frac{7}{\\pi}}z(5z^2-3)\\) \\(0.3731763325901154\\times z(5z^2-3)\\) \\(\\mathcal{Y}_3^1(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{8}\\sqrt{\\frac{42}{\\pi}}x(5z^2-1)\\) \\(-0.4570457994644658\\times x(5z^2-1)\\) \\(\\mathcal{Y}_3^2(\\bm{n})\\) \\(\\displaystyle\\frac{1}{4}\\sqrt{\\frac{105}{\\pi}}z(x^2-y^2)\\) \\(1.445305721320277\\times z(x^2-y^2)\\) \\(\\mathcal{Y}_3^3(\\bm{n})\\) \\(-\\displaystyle\\frac{1}{8}\\sqrt{\\frac{70}{\\pi}}x(x^2-3y^2)\\) \\(-0.5900435899266435\\times x(x^2-3y^2)\\) 这是在实球谐函数一侧进行合成的方法。但是我们还需要将其换算到RGB通道参数。为了方便合成与分解（减少精度损失）和让展开更对称，3DGS采用如下变换联系实球谐函数和RGB通道参数：\n\\[ f_i(\\bm{n})_{SH}=f_i(\\bm{n})_{RGB}-0.5 \\tag{11} \\] 在初始化的时候，3DGS将 \\(C_0^0(i)\\) 初始化成稀疏点云中的RGB通道值（需要通过上式变换到球谐函数侧），其他参数均初始化为0。\n不透明度 除了位置、形状和颜色，每个3D高斯椭球还有一个不透明度参数 \\(\\omicron\\) 。此时对于某个点 \\((x,y,z)\\) ，其不透明度为：\n\\[ \\alpha(x,y,z)=\\omicron\\cdot\\exp\\left(-\\frac{1}{2}\\left(\\bm{x}-\\bm{\\mu}\\right)^{T}\\bm{\\Sigma}^{-1}\\left(\\bm{x}-\\bm{\\mu}\\right)\\right) \\tag{12} \\] 这个不透明度会在下文渲染部分仔细讲解。初始化的时候，每个3D高斯椭球的透明度均被初始化成 \\(0.1\\) 。\n渲染 得到一组3D高斯椭球集之后，我们需要把他渲染出来。渲染操作的输入是3D高斯椭球集的各个参数和相机参数，输出是相机看到的图片。首先，我们需要将3D高斯椭球集投影到相机对应的2D平面内，然后再采用可微分块光栅化的办法进行渲染。\n投影 如何将3D高斯椭球投影到2D平面进行渲染是3DGS中非常重要的关键点。首先我们来证明一个重要的结论：\n结论1：多维高斯分布的概率分布函数 \\(\\displaystyle f\\left(\\bm{x}|\\bm{\\mu},\\bm{\\Sigma}\\right)\\) ，对仿射变换 \\(\\bm{u}=\\phi(\\bm{x})=\\bm{M}\\bm{x}+\\bm{c}\\) ，有\n\\[ f\\left(\\bm{x}|\\bm{\\mu},\\bm{\\Sigma}\\right)=\\frac{1}{\\left|\\bm{M}^{-1}\\right|}f\\left(\\bm{u}|\\phi(\\bm{\\mu}),\\bm{M}\\bm{\\Sigma}\\bm{M}^T\\right) \\tag{13} \\] 证明（结论1）：由上式和式1可得\n\\[ \\begin{aligned} \u0026\\frac{1}{\\left|\\bm{M}^{-1}\\right|}f\\left(\\bm{u}|\\phi(\\bm{\\mu}),\\bm{M}\\bm{\\Sigma}\\bm{M}^T\\right)\\\\ =\u0026\\frac{1}{\\left|\\bm{M}^{-1}\\right|}f\\left(\\phi(\\bm{x})|\\phi(\\bm{\\mu}),\\bm{M}\\bm{\\Sigma}\\bm{M}^T\\right)\\\\ =\u0026\\frac{1}{\\left|\\bm{M}^{-1}\\right|}f\\left(\\bm{M}\\bm{x}+\\bm{c}|\\bm{M}\\bm{\\mu}+\\bm{c},\\bm{M}\\bm{\\Sigma}\\bm{M}^T\\right)\\\\ =\u0026\\frac{1}{\\left|\\bm{M}^{-1}\\right|}\\frac{1}{\\sqrt{\\left(2\\pi\\right)^3\\left|\\bm{M}\\bm{\\Sigma}\\bm{M}^T\\right|}}\\exp\\left(-\\frac{1}{2}\\left(\\left(\\bm{M}\\bm{x}+\\bm{c}\\right)-\\left(\\bm{M}\\bm{\\mu}+\\bm{c}\\right)\\right)^{T}(\\bm{M}\\bm{\\Sigma}\\bm{M}^T)^{-1}\\left(\\left(\\bm{M}\\bm{x}+\\bm{c}\\right)-\\left(\\bm{M}\\bm{\\mu}+\\bm{c}\\right)\\right)\\right)\\\\ \\end{aligned} \\tag{14} \\] 由 \\(|AB|=|A||B|\\) 和 \\(|A^T|=|A|\\) ，对系数部分有\n\\[ \\begin{aligned} \u0026\\frac{1}{\\left|\\bm{M}^{-1}\\right|}\\frac{1}{\\sqrt{\\left(2\\pi\\right)^3\\left|\\bm{M}\\bm{\\Sigma}\\bm{M}^T\\right|}}\\\\ =\u0026\\frac{1}{\\sqrt{\\left|\\bm{M}^{-1}\\right|^2\\left(2\\pi\\right)^3\\left|\\bm{M}\\right|\\left|\\bm{\\Sigma}\\right|\\left|\\bm{M}^T\\right|}}\\\\ =\u0026\\frac{1}{\\sqrt{\\left|\\bm{M}^{-1}\\right|^2\\left(2\\pi\\right)^3\\left|\\bm{M}\\right|\\left|\\bm{\\Sigma}\\right|\\left|\\bm{M}\\right|}}\\\\ =\u0026\\frac{1}{\\sqrt{\\left(2\\pi\\right)^3\\left|\\bm{M}^{-1}\\right|\\left|\\bm{M}\\right|\\left|\\bm{\\Sigma}\\right|\\left|\\bm{M}^{-1}\\right|\\left|\\bm{M}\\right|}}\\\\ =\u0026\\frac{1}{\\sqrt{\\left(2\\pi\\right)^3\\left|\\bm{M}^{-1}\\bm{M}\\right|\\left|\\bm{\\Sigma}\\right|\\left|\\bm{M}^{-1}\\bm{M}\\right|}}\\\\ =\u0026\\frac{1}{\\sqrt{\\left(2\\pi\\right)^3\\left|\\bm{\\Sigma}\\right|}} \\end{aligned} \\tag{15} \\] 由 \\((AB)^{-1}=B^{-1}A^{-1}\\) 和 \\((AB)^T=B^TA^T\\) ，对指数部分有\n\\[ \\begin{aligned} \u0026\\exp\\left(-\\frac{1}{2}\\left(\\left(\\bm{M}\\bm{x}+\\bm{c}\\right)-\\left(\\bm{M}\\bm{\\mu}+\\bm{c}\\right)\\right)^{T}(\\bm{M}\\bm{\\Sigma}\\bm{M}^T)^{-1}\\left(\\left(\\bm{M}\\bm{x}+\\bm{c}\\right)-\\left(\\bm{M}\\bm{\\mu}+\\bm{c}\\right)\\right)\\right)\\\\ =\u0026\\exp\\left(-\\frac{1}{2}\\left(\\bm{M}\\left(\\bm{x}-\\bm{\\mu}\\right)\\right)^{T}\\left(\\bm{M}^T\\right)^{-1}\\bm{\\Sigma}^{-1}\\bm{M}^{-1}\\bm{M}\\left(\\bm{x}-\\bm{\\mu}\\right)\\right)\\\\ =\u0026\\exp\\left(-\\frac{1}{2}\\left(\\bm{x}-\\bm{\\mu}\\right)^T\\bm{M}^T\\left(\\bm{M}^T\\right)^{-1}\\bm{\\Sigma}^{-1}\\bm{M}^{-1}\\bm{M}\\left(\\bm{x}-\\bm{\\mu}\\right)\\right)\\\\ =\u0026\\exp\\left(-\\frac{1}{2}\\left(\\bm{x}-\\bm{\\mu}\\right)^T\\bm{\\Sigma}^{-1}\\left(\\bm{x}-\\bm{\\mu}\\right)\\right)\\\\ \\end{aligned} \\tag{16} \\] 综上可得\n\\[ \\frac{1}{\\left|\\bm{M}^{-1}\\right|}f\\left(\\bm{u}|\\phi(\\bm{\\mu}),\\bm{M}\\bm{\\Sigma}\\bm{M}^T\\right)=\\frac{1}{\\sqrt{\\left(2\\pi\\right)^3\\left|\\bm{\\Sigma}\\right|}}\\exp\\left(-\\frac{1}{2}\\left(\\bm{x}-\\bm{\\mu}\\right)^T\\bm{\\Sigma}^{-1}\\left(\\bm{x}-\\bm{\\mu}\\right)\\right)=f\\left(\\bm{x}|\\bm{\\mu},\\bm{\\Sigma}\\right) \\tag{17} \\] 证毕。\n我们先将3D高斯椭球从世界坐标系下变换到相机坐标系下（只是平移和旋转）。这个变换可以写为\n\\[ \\bm{x}^{\\prime\\prime}=\\phi^{\\prime\\prime}(\\bm{x})=\\bm{W}\\bm{x}+\\bm{b} \\tag{18} \\] 其中 \\(\\bm{W}\\) 和 \\(\\bm{b}\\) 可以由相机坐标系的旋转矩阵 \\(\\bm{R}\\) 和位置坐标 \\(\\bm{t}\\) 得来。\n\\[ \\bm{W}=\\bm{R}^T\\\\[5pt] \\bm{b}=-\\bm{R}^T\\bm{t} \\tag{19} \\] 使用结论1，我们可以得到经过该变换后的期望值 \\(\\bm{\\mu}^{\\prime\\prime}\\) 协方差矩阵 \\(\\bm{\\Sigma}^{\\prime\\prime}\\)\n\\[ \\bm{\\mu}^{\\prime\\prime}=\\phi(\\bm{\\mu})\\\\[5pt] \\bm{\\Sigma}^{\\prime\\prime}=\\bm{W}\\bm{\\Sigma}\\bm{W}^T \\tag{20} \\] 然后，在相机坐标系下，我们需要使用一个透视变换将其变换到图像坐标系（见透视变换）。注意3DGS使用了和UnrealEngine相同的左手坐标系。\n\\[ \\bm{M}= \\begin{pmatrix} \\displaystyle\\frac{2z_{near}}{x_{right}-x_{left}} \u0026 0 \u0026 \\displaystyle\\frac{x_{right}+x_{left}}{x_{right}-x_{left}} \u0026 0 \\\\[20pt] 0 \u0026 \\displaystyle\\frac{2z_{near}}{y_{top}-y_{bottom}} \u0026 \\displaystyle\\frac{y_{top}+y_{bottom}}{y_{top}-y_{bottom}} \u0026 0\\\\[20pt] 0 \u0026 0 \u0026 \\displaystyle\\frac{z_{far}}{z_{far}-z_{near}} \u0026 \\displaystyle-\\frac{z_{far}z_{near}}{z_{far}-z_{near}}\\\\[20pt] 0 \u0026 0 \u0026 1 \u0026 0 \\end{pmatrix} \\tag{21} \\] 该矩阵是在齐次坐标下的变换矩阵，所以是4维的。其中， \\(z_{near}\\) 是近平面， \\(z_{far}\\) 是远平面， \\(y_{top},y_{bottom},x_{left},x_{right}\\) 分别是相机取景框的上下左右边框。可以将其用 \\(x,y\\) 轴的视场角表示\n\\[ \\begin{aligned} \u0026x_{right}=z_{near}\\tan\\left(\\frac{fov_x}{2}\\right)\\\\[5pt] \u0026x_{left}=-x_{right}\\\\[5pt] \u0026y_{top}=z_{near}\\tan\\left(\\frac{fov_y}{2}\\right)\\\\[5pt] \u0026y_{bottom}=-y_{top} \\end{aligned} \\tag{22} \\] 透视变换的三维形式不是仿射变换，但我们可以尝试写出它。对于 \\(\\bm{P}^{\\prime\\prime}=(x^{\\prime\\prime},y^{\\prime\\prime},z^{\\prime\\prime},1)^T\\) ，由 \\(\\bm{P}^{\\prime}=\\bm{M}\\bm{P}^{\\prime\\prime}\\) 得\n\\[ \\bm{P}^{\\prime}= \\begin{pmatrix} \\displaystyle\\frac{2z_{near}}{x_{right}-x_{left}}x^{\\prime\\prime}+\\displaystyle\\frac{x_{right}+x_{left}}{x_{right}-x_{left}}z^{\\prime\\prime}\\\\[20pt] \\displaystyle\\frac{2z_{near}}{y_{top}-y_{bottom}}y^{\\prime\\prime}+\\displaystyle\\frac{y_{top}+y_{bottom}}{y_{top}-y_{bottom}}z^{\\prime\\prime}\\\\[20pt] \\displaystyle\\frac{z_{far}}{z_{far}-z_{near}}z^{\\prime\\prime}\\displaystyle-\\frac{z_{far}z_{near}}{z_{far}-z_{near}}\\\\[20pt] z^{\\prime\\prime} \\end{pmatrix} \\tag{23} \\] 将其齐次化后可得\n\\[ \\begin{aligned} x^{\\prime}=\u0026\\displaystyle\\frac{2z_{near}}{x_{right}-x_{left}}\\frac{x^{\\prime\\prime}}{z^{\\prime\\prime}}+\\displaystyle\\frac{x_{right}+x_{left}}{x_{right}-x_{left}}\\\\[20pt] y^{\\prime}=\u0026\\displaystyle\\frac{2z_{near}}{y_{top}-y_{bottom}}\\frac{y^{\\prime\\prime}}{z^{\\prime\\prime}}+\\displaystyle\\frac{y_{top}+y_{bottom}}{y_{top}-y_{bottom}}\\\\[20pt] z^{\\prime}=\u0026\\displaystyle\\frac{z_{far}}{z_{far}-z_{near}}-\\displaystyle\\frac{z_{far}z_{near}}{z_{far}-z_{near}}\\frac{1}{z^{\\prime\\prime}} \\end{aligned} \\tag{24} \\] 这不是一个仿射变换。但是，考虑到3D高斯椭球都很小，我们可以将右端的式子在 \\(\\bm{\\mu}^{\\prime\\prime}=\\phi(\\bm{\\mu})\\) 处展开。由多元函数展开\n\\[ \\begin{pmatrix} x^{\\prime}\\\\ y^{\\prime}\\\\ z^{\\prime} \\end{pmatrix} =\\bm{\\mu}^{\\prime\\prime}+\\bm{J}(\\bm{\\mu}^{\\prime\\prime}) \\begin{pmatrix} x^{\\prime\\prime}\\\\ y^{\\prime\\prime}\\\\ z^{\\prime\\prime} \\end{pmatrix} \\tag{25} \\] 其中 \\(\\bm{J}(\\bm{\\mu}^{\\prime\\prime})\\) 是上述变换的Jacobi矩阵。具体来说对式24\n\\[ \\begin{aligned} \\bm{J}(\\bm{\\mu}^{\\prime\\prime})=\u0026 \\left. \\begin{pmatrix} \\displaystyle\\frac{\\partial x^{\\prime}}{\\partial x^{\\prime\\prime}} \u0026 \\displaystyle\\frac{\\partial x^{\\prime}}{\\partial y^{\\prime\\prime}} \u0026 \\displaystyle\\frac{\\partial x^{\\prime}}{\\partial z^{\\prime\\prime}}\\\\[10pt] \\displaystyle\\frac{\\partial y^{\\prime}}{\\partial x^{\\prime\\prime}} \u0026 \\displaystyle\\frac{\\partial y^{\\prime}}{\\partial y^{\\prime\\prime}} \u0026 \\displaystyle\\frac{\\partial y^{\\prime}}{\\partial z^{\\prime\\prime}}\\\\[10pt] \\displaystyle\\frac{\\partial z^{\\prime}}{\\partial x^{\\prime\\prime}} \u0026 \\displaystyle\\frac{\\partial z^{\\prime}}{\\partial y^{\\prime\\prime}} \u0026 \\displaystyle\\frac{\\partial z^{\\prime}}{\\partial z^{\\prime\\prime}}\\\\[10pt] \\end{pmatrix} \\right._{\\bm{x}^{\\prime\\prime}=\\bm{\\mu}^{\\prime\\prime}} \\\\[50pt] =\u0026 \\begin{pmatrix} \\displaystyle\\frac{2z_{near}}{x_{right}-x_{left}}\\frac{1}{\\mu_z^{\\prime\\prime}} \u0026 \\displaystyle-\\frac{2z_{near}}{x_{right}-x_{left}}\\frac{\\mu_x^{\\prime\\prime}}{\\left(\\mu_z^{\\prime\\prime}\\right)^2} \u0026 0\\\\[20pt] 0 \u0026 \\displaystyle\\frac{2z_{near}}{y_{top}-y_{bottom}}\\frac{1}{\\mu_z^{\\prime\\prime}} \u0026 \\displaystyle-\\frac{2z_{near}}{y_{top}-y_{bottom}}\\frac{\\mu_y^{\\prime\\prime}}{\\left(\\mu_z^{\\prime\\prime}\\right)^2}\\\\[20pt] 0 \u0026 0 \u0026 \\displaystyle\\frac{z_{far}z_{near}}{z_{far}-z_{near}}\\frac{1}{\\left(\\mu_z^{\\prime\\prime}\\right)^2} \\end{pmatrix} \\end{aligned} \\tag{26} \\] 这样就可以把透视变换近似为一个仿射变换。因此可以使用结论1\n\\[ \\bm{\\Sigma}^{\\prime}=\\bm{J}\\bm{\\Sigma}^{\\prime\\prime}\\bm{J}^T \\tag{27} \\] 综合式20和式27可得在相机视角下\n\\[ \\bm{\\Sigma}^{\\prime}==\\bm{J}\\bm{W}\\bm{\\Sigma}\\bm{W}^T\\bm{J}^T \\tag{28} \\] \\(\\bm{\\mu}\\) 按照点坐标规则变换就行。这样我们就将3D高斯椭球变换到了图像坐标系内。但是，在3DGS算法中， \\(\\bm{\\Sigma}^{\\prime}\\) 实际上是 \\(2\\times 2\\) 的2D形式，也就是忽略 \\(z\\) 坐标而直接投影到了 \\(xy\\) 平面。这也很简单，把式28中的 \\(\\bm{J}\\) 的第三行去掉，变成 \\(2 \\times 3\\) 的矩阵，此时容易验证结论1仍然适用。此时得到的 \\(\\bm{\\Sigma}^{\\prime}\\) 就是投影到 \\(xy\\) 平面上的2D矩阵了。\n着色 3DGS采用的是Alpha-Blending和体渲染光线行进着色算法。假设我们让视图平面某个点 \\((x,y)\\) 对N个高斯进行采样，那么该点的颜色为\n\\[ C(x,y)=\\sum_{i=1}^{N}c_i(x,y)\\alpha_i(x,y)\\prod_{j=1}^{i-1}(1-\\alpha_j(x,y)) \\tag{29} \\] 这N个高斯按照世界坐标系下与 \\((x,y)\\) 的距离（深度）由近到远的顺序排序。 \\(c_i(x^{\\prime},y^{\\prime})\\) 是第 \\(i\\) 个高斯在 \\((x^{\\prime},y^{\\prime})\\) 处的颜色（在世界坐标系下用式10和式11求出）。 \\(\\alpha_i(x^{\\prime},y^{\\prime})\\) 是第 \\(i\\) 个高斯在 \\((x^{\\prime},y^{\\prime})\\) 处的不透明度，在二维平面中式12也适用，因此有\n\\[ \\alpha_i(x^{\\prime},y^{\\prime})=\\omicron_i\\cdot\\exp\\left(-\\frac{1}{2}\\left(\\bm{x}^{\\prime}-\\bm{\\mu}^{\\prime}\\right)^{T}\\left(\\bm{\\Sigma}^{\\prime}\\right)^{-1}\\left(\\bm{x}^{\\prime}-\\bm{\\mu}^{\\prime}\\right)\\right) \\tag{30} \\] \\(\\omicron_i\\) 就是由不透明度定义的第 \\(i\\) 个3D高斯椭球的不透明度。注意，式29中的 \\(C(x,y)\\) 是三个RGB通道各自的颜色值，取值范围为 \\([0,1]\\) 。也就是三个RGB通道各自独立混合后，再一起作为 \\((x,y)\\) 点处的颜色。\n分块 如果对于每个像素，相对所有高斯（2D）都进行一次光线行进，那这将耗费巨大的计算资源而且还不一定能起到很好的效果。因此，3DGS提出了一种分块渲染的方法。其思想是将屏幕分成每个大小为 \\(16\\times 16\\) 像素的块，在渲染每个块中的像素的时候只考虑和这个块有交叠的高斯。对于不同的块，可以采用并行计算的方法加快渲染速度。\n那么该如何判断某个高斯与某个块是否有交叠呢？首先得确定它的边界。3DGS采用 \\(99\\\\%\\) 作为置信区间，也就是以概率为 \\(99\\\\%\\) 作为边界。即\n\\[ f\\left(\\bm{x}^\\prime|\\bm{\\mu}^\\prime,\\bm{\\Sigma}^\\prime\\right)=\\frac{1}{\\sqrt{\\left(2\\pi\\right)^3\\left|\\bm{\\Sigma}^\\prime\\right|}}\\exp\\left(-\\frac{1}{2}\\left(\\bm{x}^{\\prime}-\\bm{\\mu}^{\\prime}\\right)^{T}\\left(\\bm{\\Sigma}^{\\prime}\\right)^{-1}\\left(\\bm{x}^{\\prime}-\\bm{\\mu}^{\\prime}\\right)\\right)=0.99 \\tag{31} \\] 由于 \\(\\bm{\\Sigma}^\\prime\\) 是正定矩阵，因此这是一个椭圆。椭圆方程可以被求出来，再结合某个块的四条边的参数，就可以判断出是否交叠。（当然，在实际代码中并没有采用上述椭圆方程的求法，也没有采用传统的椭圆和矩形的碰撞检测算法，因为这样会增加不必要的计算量，因此在3DGS的代码实现中将2D高斯的碰撞箱简化为了一个矩形，再用这个矩形做碰撞判断，具体见代码）。\n我们先对所有高斯做一个预处理。对于我们需要处理的高斯，首先，这个高斯必须位于相机的视锥内部（或与其相交），这样可以预先排除掉很大一部分高斯。然后，这个高斯不能距离摄像机过近或过远（一般来说，会将 \\(z^\\prime\\) 控制在某一个区间内）。最后再执行判断这个高斯与某个块是否有交叠的操作。\n接下来的问题是如何得到与某个块有交叠的所有高斯，并按照深度进行排序方便进行着色。\n","date":"2024-09-23T19:43:18+08:00","image":"https://www.brasswrench.com/posts/artificial_intelligence/computer_vision/3d_reconstruction/3d_gaussian_splatting/figures/image.zh-cn.svg","permalink":"https://www.brasswrench.com/posts/artificial_intelligence/computer_vision/3d_reconstruction/3d_gaussian_splatting/","title":"三维重建（一）：3D高斯泼溅算法"},{"content":" 操作系统引论 引言 操作系统（Operating System，OS） 是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充，其主要作用是管理好这些设备，提高它们的利用率和系统的吞吐量，并为用户和应用程序提供一个简单的接口，便于用户使用。OS是现代计算机系统中最基本和最重要的系统软件，而其他的诸如编译程序、数据库管理系统等系统软件，以及大量的应用软件，都直接依赖于操作系统的支持，取得它所提供的服务。事实上OS已经成为现代计算机系统、多处理机系统、计算机网络中都必须配置的系统软件。\n操作系统的目标和作用 操作系统的目标与应用环境有关。例如在查询系统中所用的OS，希望能提供良好的人机交互性；对于工业控制、武器控制以及多媒体环境下的OS，要求其具有实时性。而对于微机上配置的OS，则更看重的是其使用的方便性。\n操作系统的目标 在计算机系统上配置操作系统，其主要目标是：方便性、有效性、可扩充性和开放性。\n方便性 一个未配置OS的计算机系统是极难使用的。用户如果想直接在计算机硬件（裸机）上运行自己的程序，就必须用机器语言书写；但是如果配置了OS，系统就可以使用编译命令将用户采用高级语言书写的程序翻译成机器代码，或直接通过OS所提供的各种命令操纵计算机系统，极大地方便了用户，使计算机变得易学易用。\n有效性 有效性所包含的第一层含义是提高系统资源的利用率。在早期未配置OS的计算机系统中，诸如处理机、I/O设备等都经常处于空闲状态，各种资源无法得到充分利用，所以在当时，提高系统资源利用率是推动OS发展最主要的动力。有效性的另一层含义是提高系统的吞吐量。OS可以通过合理地组织计算机的工作流程，加速程序的运行，缩短程序的运行周期，从而提高了系统的吞吐量。\n方便性和有效性是设计OS时最重要的两个目标。在过去很长的一段时间内，由于计算机系统非常昂贵，有效性显得特别重要。然而，近十多年来，随着硬件越来越便宜，在设计配置在微机上的OS时，似乎更加重视如何提高用户使用计算机的方便性。因此，在微机操作系统中都配置了深受用户欢迎的图形用户界面，以及为程序员提供了大量的系统调用，方便了用户对计算机的使用和编程。\n可扩充性 为适应计算机硬件、体系结构以及计算机应用发展的要求，OS必须具有很好的可扩充性。可扩充性的好坏与OS的结构有精密的联系，由此推动了OS结构的不断发展。从早期的无结构发展成模块化结构，进而又发展成层次化结构，近年来OS已广泛采用了微内核结构。微内核结构能方便地增添新的功能和模块，以及对原有的功能和模块进行修改，具有良好的可扩充性。\n开放性 随着计算机应用的日益普及，计算机硬件和软件的兼容性问题便提到了议事日程上来。世界各国相应地制定了一系列的软、硬件标准，使得不同厂家按照标准生产的软、硬件都能在本国范围内很好地相互兼容。这无疑给用户带来了极大的方便，也给产品的推广、应用铺平了道路。近年来，随着Internet的迅速发展，使得计算机OS的应用环境由单机环境转向了网络环境，其应用环境就必须更为开放，进而对OS的开放性提出了更高的要求。\n所谓开放性，是指系统能遵循世界标准规范，特别是遵循开放系统互连OSI国际标准。事实上，凡遵循国际标准所开发的硬件和软件，都能彼此兼容，方便地实现互连。开放性已称为20世纪90年代以后计算机技术的一个核心问题，也是衡量一个新推出的系统或软件能否被广泛应用的至关重要的因素。\n操作系统的作用 操作系统在计算机系统中所起的作用，可以从用户、资源管理及资源抽象等多个不同的角度来进行分析和讨论。\nOS作为用户与计算机硬件系统之间的接口 OS作为用户与计算机硬件系统之间的接口的含义是：OS处于用户与计算机硬件系统之间，用户通过OS来使用计算机系统。或者说，用户在OS帮助下能够方便、快捷、可靠地操纵计算机硬件和运行自己的程序。图1是OS作为接口的示意图。由图可看出，用户可通过三种方式使用计算机，即通过命令方式、系统调用方式和图标\u0026mdash;窗口方式来实现与操作系统的通信，并取得它的服务。\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e 用户 应用程序 命令 系统调用 图标—窗口 操作系统 计算机硬件 图1\u0026emsp;OS作为接口的示意图\nOS作为计算机系统资源的管理者 在一个计算机系统中，通常都含有多种硬件和软件资源。归纳起来可将这些资源分为四类：处理机、存储器、I/O设备以及文件（数据和程序）。相应地，OS的主要功能也正是对这四类资源进行有效的管理。处理机管理适用于分配和控制处理机；存储器管理主要负责内存的分配与回收；I/O设备管理是负责I/O设备的分配（回收）与操纵；文件管理适用于实现对文件的存取、共享和保护。可见，OS的确是计算机系统资源的管理者。\n当一台计算机系统供多个用户使用时，诸多用户对系统中共享资源的需求（包括数量和时间）有可能发生冲突。为此，操作系统必须对使用资源的请求进行授权，以协调诸用户对共享资源的使用。\nOS实现了对计算机资源的抽象 对一台完全无软件的计算机系统（即裸机），由于它向用户提供的仅是硬件接口（物理接口），因此，用户必须对物理接口的实现细节有充分的了解，这就致使该物理机器难于广泛使用。为了方便用户使用I/O设备，人们在裸机上覆盖上一层I/O设备管理软件，如图2所示，由它来实现对I/O设备操作的细节，并向上将I/O设备抽象为一组数据结构以及一组I/O操作命令，如read或write命令，这样用户即可利用这些数据结构及操作命令来进行数据输入或输出，而无需关心I/O是如何具体实现的。此时用户所看到的机器是一台比裸机功能更强、使用更方便的机器。换言之，在裸机上铺设的I/O软件隐藏了I/O设备的具体细节，向上提供了一组抽象的I/O设备。\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e 用户 物理接口 硬件 用户 物理接口 硬件 I/O软件 I/O操作命令 ( r e a d , wri t e ) 虚机器 图2\u0026emsp;I/O软件隐藏了I/O操作实现的细节\n通常把覆盖了上述软件的机器称为扩充机器或者虚机器。它向用户提供了一个对硬件操作的抽象模型。用户可利用该模型的接口使用计算机，无需了解物理接口的实现细节，从而使用户更容易地使用计算机硬件资源。亦即，I/O设备管理软件实现了对计算机硬件操作的第一个层次的抽象。\n同理，为了方便用户使用文件系统，又可在第一层软件（I/O管理软件）上再覆盖一层用于文件管理的软件，由它来实现对文件操作的细节，并向上层提供一组实现对文件进行存取操作的数据结构和命令。这样，用户可利用该软件提供的数据结构及命令对文件进行存取。此时用户所看到的是一台功能更强、使用更方便的虚机器。亦即，文件管理软件实现了对硬件资源操作的第二个层次的抽象。以此类推，如果文件管理软件上再覆盖一层面向用户的窗口软件，则用户便可在窗口环境下方便地使用计算机，从而形成一台功能更强的虚机器。\n由此可知，OS是铺设在计算机硬件上的多层软件的集合，它们不仅增强了系统的功能，还隐藏了对硬件操作的具体细节，实现了对计算机硬件操作的多个层次的抽象模型。值得说明的是，不仅可在底层对一个硬件资源加以抽象，还可以在高层对该资源底层已抽象的模型再次进行抽象，称为更高层的抽象模型。随着抽象层次的提高，抽象接口所提供的功能就越强，用户使用起来也越方便。\n推动操作系统发展的主要动力 OS自20世纪50年代产生后，经历了由简单到复杂，由低级到高级的发展。在短短60多年间，OS在各方面都有了长足的进步，能够很好地适应计算机硬件和体系结构的快速发展，以及应用需求的不断变化。下面我们对推动OS发展的主要推动力做具体阐述。\n不断提高计算机资源利用率 在计算机发展的初期，计算机系统特别昂贵，人们必须千方百计地提高计算机系统中各种资源的利用率，这就是OS最初发展的推动力。由此形成了能自动地对一批作业进行处理的多道批处理系统。20世纪60年代和70年代有分别出现了能够有效提高I/O设备和CPU利用率的SPOOLing系统，以及极大地改善了存储器系统利用率的虚拟存储器技术。此后在网络环境下，通过在服务器上配置网络文件系统和数据库系统算法，将资源提供给全网络用户共享，又进一步提高了资源的利用率。\n方便用户 当资源利用率不高的问题得到基本解决后，用户在上机、调试程序时的不方便行便成为主要矛盾，这又成为继续推动OS发展的主要因素。20世纪60年代分时系统的出现，不仅提高了系统资源的利用率，还能实现人\u0026mdash;机交互，使用户能像早期使用计算机时一样，感觉自己是独占全机资源，对其进行直接操控，极大地方便了程序员对程序进行调试和修改的操作。90年代初，图形用户界面的出现收到用户的广泛欢迎，进一步方便了用户对计算机的使用，这无疑又加速推动了计算机的迅速普及和广泛使用。\n器件的不断更新换代 随着IT技术的飞讯发展，尤其是微机芯片的不断更新换代，使得计算机的性能快速提高，从而也推动了OS的功能和性能迅速增强和提高。例如当微机芯片由8位发展到16位、32位，进而又发展到64位时，相应的微机OS也就由8位OS发展到16位和32位，进而又发展到64位，此时，相应OS的功能和性能也有了显著的增强和提高。\n与此同时，外部设备也在迅速发展。OS所能支持的外部设备也越来越多，如现在的微机OS已能够支持种类繁多的外部设备，除了传统的外设外，还可以支持光盘、移动硬盘、闪存盘、扫描仪、数码相机等。\n计算机体系结构的不断发展 计算机体系结构的发展，也不断推动着OS的发展，并产生新的OS类型。例如当计算机由单处理机系统发展为多处理机系统时，相应地，OS也就由单处理机OS发展为多处理机OS。又如当出现了计算机网络后，配置在计算机网络上的操作系统也就应运而生。它不仅能有效地管理好网络中的共享资源，而且还向用户提供了许多网络服务。\n不断提出新的应用需求 操作系统能如此迅速发展的另一个重要原因是，人们不断提出新的应用需求，例如，为了提高产品的质量和数量，需要将计算机应用于工业控制中，此时在计算机上就需要配置能进行实时控制的OS，由此产生了实时系统。此后，为了能满足用户在计算机上听音乐、看电影和玩游戏等需求，又在OS中添加了多媒体功能。另外，由于在计算机系统中保存了越来越多的宝贵信息，致使能够确保系统的安全性也成为OS必须具备的功能。尤其是随着VLSI（超大规模集成电路） 的发展，计算机芯片的体积越来越小，价格也越来越便宜，大量智能设备应运而生，这样，微机操作系统的产生和发展也成了一种必然。\n操作系统的发展过程 在20世纪50年代中期，出现了第一个简单的批处理OS；60年代中期开发出多道程序批处理系统；不久又推出分时系统，与此同时，用于工业和武器控制的实时OS也相继问世。20世纪70到90年代，是VLSI和计算机体系结构大发展的年代，导致了卫星及、多处理机和计算机网络的诞生和发展，与与此相应地，也相继开发出了微机OS，多处理机OS和网络OS，并得到极为迅猛的发展。\n未配置操作系统的计算机系统 从1945年诞生的第一台计算机，到50年代中期的计算机，都属于第一代计算机。这时还未出现OS，对计算机的全部操作都是由用户采取人工操作方式进行的。\n人工操作方式 早期的操作方式是由程序员将事先已穿孔的纸带（或卡片），装入纸带输入机（或卡片输入机），再启动它们将纸带（或卡片）上的程序和数据输入计算机，然后启动计算机运行。仅当程序运行完毕并取走计算结果后，才允许下一个用户上机。这种人工操作方式有以下两方面缺点：\n(1)用户独占全机，即一台计算机的全部资源由上级用户所独占。\n(2)CPU等待人工操作。当用户进行装带（卡），卸带（卡）等人工操作时，CPU及内存等资源是空闲的。\n可见，人工操作方式严重降低了计算机资源的利用率，此即所谓的人机矛盾。虽然CPU的速度在迅速提高，但I/O设备的速度却提高缓慢，这使CPU与I/O设备之间速度不匹配的矛盾更加突出。为此，曾先后出现了通道技术、缓冲技术，然而都未能很好地解决上述矛盾，直到后来引入了脱机输入/输出技术，才获得了相对较为满意的结果。\n脱机输入/输出（Off-Line IO）方式 为了解决人机矛盾及CPU和I/O设备之间速度不匹配的矛盾，20世纪50年代末出现了脱机I/O技术。该技术是实现将装有用户程序和数据的纸带装入纸带输入机，在一台外围机的控制下，把纸带（卡片）上的数据（程序）输入到磁带上。当CPU需要这些程序和数据时，再从磁带上高速地调入内存。\n类似地，当CPU需要输出时，可先由CPU把数据直接从内存高速地输送到磁带上，然后在另一台外围机的控制下，再将此大地上的结果通过相应地输出设备输出。图3示出了脱机输入/输出的过程。\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e 输入设备 外围机 磁盘 磁盘 主机 磁盘 磁盘 外围机 输出设备 图3\u0026emsp;脱机I/O示意图\n由于程序和数据的输入和输出都是在外围机的控制下完成的，或者说，它们是在脱离主机的情况下进行的，故称为脱机输入/输出方式。反之，把在主机的直接控制下进行输入/输出的方式称为联机输入/输出（On-Line I/O） 方式。这种脱机I/O方式的主要优点为：\n(1)减少了CPU的空闲时间。装带、卸带，以及将数据从低俗I/O设备送到高速磁带上（或反之）的操作，都是在脱机情况下由外围机万郴个，并不占用主机时间，从而有效地减少了CPU的空闲时间。\n(2)提高了I/O速度。当CPU在运行中需要输入数据时，是直接从高速的磁带上将数据输入到内存的，这便极大地提高了I/O速度，从而进一步减少了CPU的空闲时间。\n单道批处理系统（Simple Batch Processing System） 20世纪50年代中期出现了第二代晶体管计算机，此时计算机虽已具有推广应用的价值，但计算机系统仍然非常昂贵，为了能充分地提高它的利用率，应尽量保持系统的连接运行，即在处理完一个作业后，紧接着处理下一个作业，以减少机器的空闲等待时间。\n单道批处理系统的处理过程 为了实现对作业的连续处理，需要先把一批作业以脱机方式输入到磁带上，并在系统中配上监督程序（Monitor），在它的控制下，使这批作业能一个接一个连续处理。其处理过程是：首先由监督程序将磁带上的第一个作业装入内存，并把运行控制权交给该作业；当该作业处理完成时，又把控制权交给监督程序，再由监督程序把磁带上的第二个作业调入内存。计算机系统就这样自动地一个作业紧接着一个作业地进行处理，直至磁带上的所有作业全部完成，这样便形成了早期的批处理系统。虽然系统对作业的处理是成批进行的，但在内存中时终止保持一道作业，故称为单道批处理系统。图4示出了单道批处理系统的处理流程。\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e 还有下一个作业？ 把下一个作业的源程序转换为目标程序 是 源程序有错吗？ 开始 否 装配目标程序 运行目标程序 是 否 停止 图4\u0026emsp;单道批处理系统的处理流程\n单道批处理系统的缺点 单道批处理系统最主要的缺点是，系统中的资源得不到充分的利用。这是因为在内存中仅有一道程序，每逢该程序在运行中发出I/O请求后，CPU便处于等待状态，必须在其I/O完成后才继续运行。又因I/O设备的低速性，更使CPU的利用率显著降低。图5示出了单道程序的运行情况，从图可以看出：在 $t_2$ ~ $t_3$ 、 $t_6$ ~ $t_7$ 时间间隔内CPU空闲。\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e 用户程序 监督程序 I/O操作 I/O中断请求 启动I/O I/O完成 结束中断 I/O中断请求 启动I/O I/O完成 结束中断 t 1 t 2 t 3 t 4 t 5 t 6 t 7 t 8 t 图5\u0026emsp;单道程序的运行情况\n为了能在系统中运行较大的作业，通常在计算机中都配置了较大容量的内存，但实际情况是有80%以上的作业都属于中小型，因此在单道程序环境下，也必定造成内存的浪费。类似地，为了满足各种类型的作业需要，在系统中将会配置多种类型的I/O设备。显然在单道程序环境下也不能充分利用系统资源。\n多道批处理系统（Multiprogrammed Batch Processing System） 20世纪60年代中期，IBM公司生产了第一台小规模集成电路计算机IBM 360（第三代计算机系统）。由于它较之于晶体管计算机无论在体积、功耗、速度和可靠性上都有了显著的改善，因而获得了极大的成功。IBM公司为该机开发的OS/360操作系统是第一个能运行多道程序的批处理系统。\n多道程序设计的基本概念 为了进一步提高资源的利用率和系统吞吐量，在20世纪60年代中期引入了多道程序设计技术，由此形成了多道批处理系统。在该系统中，用户所提交的作业先存放在外存上，并排成一个队列，称为“后备队列”。然后由作业调度程序按一定的算法，从后备队列中选择若干个作业调入内存，使它们共享CPU和系统中的各种资源。由于同时在内存中装有若干道程序，这样便可以在运行程序A时，利用其因I/O操作而暂停执行时的CPU空挡时间，再调度另一道程序B运行，同样可以利用程序B在I/O操作时的空档时间，再调度程序C运行，使多道程序交替地运行，这样便可以保持CPU处于忙碌状态。图6示出了四道程序时的运行情况。\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e 程序A 程序B 程序C 程序D 调度程序 程序B 程序AI/O请求 程序BI/O请求 程序A 程序A IO处理 程序B I/O处理 程序C 程序C I/O处理 程序D 程序CI/O请求 程序DI/O请求 程序A I/O完成 程序A再被调度 程序C I/O完成 程序A 完成 程序C 再被调度 程序D I/O处理 程序B被调度 程序C 程序C被调度 程序D被调度 CPU执行线 程序A 调度 调度 调度 调度 调度 图6\u0026emsp;多道程序的运行情况\n多道批处理系统的优缺点 多道批处理系统的优点如下：\n(1)资源利用率高。引入多道批处理能使多道程序交替运行，以保持CPU处于忙碌状态；在内存中装入多道程序可提高内存的利用率；此外还可以提高I/O设备的利用率。\n(2)系统吞吐量大。能提高系统吞吐量的主要原因可归结为：\n①CPU和其他资源保持“忙碌状态”；\n②仅当作业完成时或运行不下去时才进行切换，系统开销小。\n多道批处理系统的缺点如下：\n(1)平均周转时间长。由于作业要排队依次进行处理，因而作业的周转时间较长，通常需几个小时，甚至几天。\n(2)无交互能力。用户一旦把作业提交给系统后，直至作业完成，用户都不能与自己的作业进行交互，修改和调试程序极不方便。\n多道批处理系统需要解决的问题 多道批处理系统是一种十分有效，但又非常复杂的系统，为使系统中的多道程序间能协调地运行，系统必须解决下述一系列问题：\n(1)处理机争用问题。既要能满足各道程序运行的需要，又要能提高处理机的利用率。\n(2)内存分配和保护问题。系统应能为每道程序分配必要的内存空间，使它们各得其所，且不会因某道程序出现异常情况而破坏其他程序。\n(3)I/O设备分配问题。系统应采取适当的策略来分配系统中的I/O设备，以达到既能方便用户对设备的使用，又能提高设备利用率的目的。\n(4)文件的组织和管理问题。系统应能有效地组织存放在系统中的大量的程序和数据，使它们既便于用户使用，又能保证数据的安全性。\n(5)作业管理问题。系统中存在着各种作业（应用程序），系统应能对系统中所有的作业进行合理的组织，以满足这些作业用户的不同需求。\n(6)用户与系统的接口问题。为使用户能方便的使用操作系统，OS还应提供用户与OS之间的接口。\n为此，应在计算机系统中增加一组软件，用以对上述问题进行妥善、有效的处理。这组软件应包括：能有效地组织和管理四大资源的软件、合理地对各类作业进行调度和控制它们运行的软件，以及方便用户使用计算机的软件。正是这样一组软件构成了操作系统。据此，我们可以把操作系统定义为：操作系统是一组能有效地组织和管理计算机硬件和软件资源，合理地对各类作业进行调度，以及方便用户使用的程序的集合。\n分时系统（Time Sharing System） 分时系统的引入 如果说推动多道批处理系统形成和发展的主要动力是提高资源利用率和系统吞吐量，那么，推动分时系统的形成和发展的主要动力，则是为了满足用户对人\u0026mdash;机交互的需求，由此形成了一种新型OS，用户的需求具体表现在以下几个方面：\n(1)人\u0026mdash;机交互。每当程序员写好一个新程序时，都需要上机进行调试。由于新编程序难免存在一些错误或不当之处，需要进行修改，因此用户希望能像早期使用计算机时一样，独占权及并对它进行直接控制，宜宾能方便地对程序中的错误进行修改。亦即，用户希望能进行人\u0026mdash;机交互。\n(2)共享主机。在20世纪60年代，计算机还十分昂贵，一台计算机要同时供很多用户共享使用。显然，用户们在共享一台计算机时，每个人都希望能像独占时一样，不仅可以随时与计算机进行交互，而且还不会感觉到其他用户的存在。\n由上述不难得知，分时系统是指，在一台主机上连接了多个配有显示器和键盘的终端并由此所组成的系统，该系统允许多个用户同时通过自己的终端，以交互方式使用计算机，共享主机中的资源。\n分时系统实现中的关键问题 在多道批处理系统中，用户无法与自己的作业进行交互的主要原因是：作业都先驻留在外存上，即使以后被调入内存，也要经过较长时间的等待后方能运行。用户无法与自己的作业进行交互。为了能够实现人机交互，必须解决的关键问题是，如何使用户能与自己的作业进行交互。为此，系统首先必须能提供多个终端，同时给多个用户使用。其次，当用户在自己的终端上键入命令时，系统应能及时接收，并及时处理该命令，再将结果返回给用户。此后，用户可根据系统返回的响应情况，再继续键入下一条命令，此即人\u0026mdash;机交互。亦即，允许有多个用户同时通过自己的键盘键入命令，系统也应能全部及时接收并处理。\n(1)及时接收。要做到及时接收多个用户键入的命令或数据，只需在系统中配置一个多路卡即可。例如当主机上要连接64个终端时，就配置一个64用户的多路卡。多路卡的作用是，实现分时多路复用。即主机以很快的速度周期性地扫描各个终端，在每个终端处停留很短的时间，如30ms，用于接收从终端发来的数据。对于64用户的多路卡，用不到2秒的时间便可完成一次扫描，即主机能用不到2秒的时间分时接收哥哥用户从终端上输入的数据一次。此外，为了能使从终端上输入的数据被依次逐条地进行处理，还需要为每个终端配置一个缓冲区，用来暂存用户键入的命令（或数据）。\n(2)及时处理。人\u0026mdash;机交互的关键在于，用户键入命令后，能对自己的作业及其运行及时地实时控制，或进行修改。因此，各个用户的作业都必须驻留在内存中，并能频繁地获得处理机运行。否则，用户键入的命令将无法作用到自己的作业上。由此可见，为了实现人\u0026mdash;机交互，必须彻底地改变原来批处理系统的运行方式，转而采用下面的方式：\n①作业直接进入内存。因为作业在磁盘上是不能运行的，所以作业应该直接进入内存。\n②采用轮转运行方式。如果一个作业独占CPU连续运行，那么其他作业就没有机会被调度运行。为避免一个作业长期独占处理机，引入了时间片的概念。一个时间片，就是一段很短的时间（例如30ms）。系统规定每个作业每次只能运行一个时间片，然后就暂停该作业的运行，并立即调度下一个作业的运行。如果在不长时间内能使所有的作业都执行一个时间片的时间，便可以使每个用户都能及时地与自己的作业进行交互，从而可使用户的请求得到及时相应。\n分时系统的特征 分时系统与多道批处理系统相比，具有非常明显的不同特性，可归纳成以下四个方面。\n(1)多路性。该特性是指系统允许将堕胎终端同时连接到一台主机上，并按分时原则为每个用户服务。多路性允许多个用户共享一台计算机，显著地提高了资源利用率，降低了使用费用，从而促进了计算机更广泛的应用。\n(2)独立性。该特性是指系统提供了这样的用机环境，即每个用户在各自的终端上进行操作，彼此之间互不干扰，给用户的感觉就像是他一人独占主机进行操作。\n(3)及时性。及时性是指用户的请求能在很短时间内获得响应。这一时间间隔是根据人们所能接受的等待时间确定的，通常仅为1~3秒钟。\n(4)交互性。交互性是指用户可通过终端与系统进行广泛的人机对话。其广泛性表现在：用户可以请求系统提供多方面的服务，如进行文件编辑和数据处理，访问系统中的文件系统和数据库系统，请求提供打印服务等。\n实时系统（Real Time System） 所谓实时，是表示“及时”。而“实时计算”，则可定义为这样一类计算：系统的正确性，不仅由计算的逻辑结果来确定，而且还取决于产生结果的时间。事实上实时系统最主要的特征，是将时间作为关键参数，它必须对所接收到的某些信号做出“及时”或“实时”的反应。由此得知，实时系统是指系统能及时响应外部事件的请求，在规定时间内完成对该事件的处理，并控制所有实时任务协调一致地运行。\n实时系统的类型 随着计算机应用的普及，实时系统的类型也相应增多，下面列出当前常见的几种：\n(1)工业（武器）控制系统。当计算机被用于生产过程的控制，形成以计算机为中心的控制系统时，该系统应具有能实时采集现场数据，并对所采集的数据进行及时处理，进而能够自动地控制相应的执行机构，使之具有按预定的规律变化的功能，确保产品的质量和产量。类似地，也可将计算机用于对武器的控制，如火炮的自动控制系统、飞机的自动驾驶系统、以及导弹的制导系统等。\n(2)信息查询系统。该系统接受从远程终端上发来的服务请求，根据用户提出的请求，对信息进行检索和处理，并能及时对用户做出正确的回答。实时信息处理系统由飞机或火车的订票系统等。\n(3)多媒体系统。随着计算机硬件和软件的快速发展，已可将文本、图像、音频和视频等信息集成在一个文件中，形成一个多媒体文件。如在用DVD播放器所播放的数字电影中就包含了音频、适配和横向滚动的文字等信息。为了保证有好的听觉和视觉感受，用于播放音频和视频的多媒体系统等，也必须是实时信息处理系统。\n(4)嵌入式系统。随着集成电路的发展，已制作出各种类型的芯片，可将这些芯片嵌入到各种一起和设备中，用于对设备进行控制或对其中的信息作出处理，这样就构成了所谓的智能仪器和设备。此时还需要配置嵌入式OS，它同样需要具有实时控制或处理的功能。\n实时任务的类型 (1)周期性实时任务和非周期性实时任务。周期性实时任务是指这样一类任务，外部设备周期性地发出激励信号给计算机，要求它按指定周期循环执行，以便周期性地控制某我i不设备。反之，非周期性实时任务并无明显的周期性，但都必须联系着一个截止时间（Deadline），或称为最后期限。它又可分为：①开始截止时间：指某个任务在某时间以前必须开始执行；②完成截止时间：指某任务在某时间以前必须完成。\n(1)硬实时任务和软实时任务。硬实时任务（Hard Real-time Task，HRT） 是指系统必须满足任务对截止时间的要求，否则可能出现难以预测的后果。用于工业和武器控制的实时系统，通常它所执行的是硬实时任务。软实时任务（Soft Real-time Task, SRT） 也联系着一个截止时间，但并不严格，若偶尔错过了截止时间，对系统产生的影响也不会太大。诸如用于信息查询系统和多媒体系统中的实时系统，通常是软实时任务。\n实时系统与分时系统特征的比较 (1)多路性。信息查询系统和分时系统中的多路性都表现为系统按分时原则为多个终端用户服务；实时控制系统的多路性则是指系统周期性地对多路现场信息进行采集，以及对多个对象或多个执行机构进行控制。\n(2)独立性。信息查询系统中的每个终端用户在与系统交互时，彼此相互独立互不干扰，同样在实时控制系统中，对信息的采集和对对象的控制也都是彼此互不干扰的。\n(3)及时性。信息查询系统对实时性的要求是依据人所能接受的等待时间确定的。而多媒体系统实时性的要求是，播放出来的音乐和电视能令人满意。实时控制系统的实时性则是以控制对象所要求的截止时间来确定的，一般为秒级到毫秒级。\n(4)交互性。在信息查询系统中，人与系统的交互性仅限于访问系统中某些特定的专用服务程序，它并不像分时系统那样，能向终端用户提供数据处理、资源共享等服务。而多媒体系统的交互性也仅限于用户发送某些特定的命令，如开始、停止、快进等，由系统立即响应。\n(5)可靠性。分时系统要求系统可靠，实时系统要求系统高度可靠，因为任何差错都可能带来无法预料的灾难性的后果。因此，在实时系统中，往往都采取了多级容错措施来保障系统的安全性及数据的安全性。\n微机操作系统 随着VLSI和计算机体系结构的发展，以及应用需求的不断扩大，操作系统仍在继续发展。由此先后形成了微机操作系统、网络操作系统等。本小节对微机操作系统的发展作扼要的介绍。\n配置在微型机上的操作系统称为微机操作系统，最早诞生的危机操作系统是配置在8位微机上的CP/M，后来出现了16位微机，相应地，16位微机操作系统也就应运而生。当微机发展为32位、64位时，32位和64位微机操作系统也应运而生。可见微机操作系统可按微机的字长来分，但也可以将它按运行方式分为如下几类：\n单用户单任务操作系统 单用户单任务操作系统的含义是：只允许一个用户上机，且只允许用户程序作为一个任务运行，这是最简单的微机操作系统，主要配置在8位和16位微机上，最有代表性的单用户单任务微机操作系统时CP/M和MS-DOS。\n①CP/M\n1974年第一代通用8位微处理机芯片Intel 8080出现后的第二年，Digital Research公司就开发出带有软盘系统的8位微机操作系统CP/M。1977年Digital Research公司对CP/M进行了重写，使其剋配置在以Intel 8080、8085、Z80等8位芯片为基础的多种微机上。1979年又推出带有硬盘管理功能的CP/M 2.2版本。由于CP/M具有较好的体系结构，可适应性强，可以执行以及易学易用等优点，使之在8位微机中占据了统治地位。\n②MS-DOS\n1981年IBM公司首次推出了IBM-PC个人计算机（16位微机），在微机中采用了微软公司开发的MS-DOS（Disk Operating System） 操作系统，该操作系统在CP/M的基础上进行了较大的扩充，使其在功能上有很大的提高。1983年IBM退出PC/AT（配有Intel 80286芯片），相应地微软又开发出MS-DOS 2.0版本，它不仅能支持硬盘设备，还采用了树形目录结构的文件系统。1987年又宣布了MS-DOS 3.3版本。从MS-DOS 1.0到3.3位置的版本都属于单用户单任务操作系统，内存被限制在640KB。从1989到1993年又先后推出了多个MS-DOS版本，它们都可以配置在Intel 80386、80486等32位微机上。从80年代到90年代初，由于MS-DOS性能优越受到当时用户的广泛欢迎，称为事实上的16位单用户单任务操作系统标准。\n单用户多任务操作系统 单用户多任务操作系统的含义是，只允许一个用户上机，但允许用户把程序分为若干个任务，使它们并发，从而有效地改善了系统的性能。目前在32位维基上配置的操作系统，基本上都是单用户多任务操作系统。其中最有代表性的是由微软公司推出的Windows。1985年和1987年微软公司先后推出了Windows 1.0和Windows 2.0版本操作系统，由于当时的硬件平台还只是16位微机，对1.0和2.0版本不能很好地支持。1990年微软公式又发布了Windows 3.0版本，随后又宣布了Windows 3.1版本，它们主要是针对386和486等32位微机开发的，它较之以前的操作系统有着很重大的改进，引入了友善的图形用户界面，支持多任务和扩展内存的功能。使计算机更好使用，从而称为386和486等微机的主流操作系统。\n1995年微软公司推出了Windows 95，它较之以前的Windows 3.1有许多重大改进，采用了全32位的处理技术，并兼容以前的16位应用程序，在该系统中还集成了支持Internet的网络功能。1998年微软公司又推出了Windows 95的改进版Windows 98，它已是最后一个仍然兼容以前16位应用程序的Windows。其最主要的改进是把微软公司自己开发的Internet浏览器整合到系统中，大大方便了用户上网浏览；另一个改进是增加了对多媒体的支持。2001年微软又发布了Windows XP，同时提供了家用和商业工作站两种版本，在此后相当长的一段时间，称为使用最广泛的个人操作系统之一。在开发上述Windows操作系统的同时，微软公司又开始对网络操作系统Windows NT进行开发，它是针对网络开发的操作系统，在系统中融入许多面向网络的功能，从2006年后推出的一系列内核版本号为NT6.X的桌面操作系统，包括Windows Vista、Windows 7、Windows 8等，这里就不对它们进行介绍。\n多用户多任务操作系统 多用户多任务操作系统的含义是，允许多个用户通过各自的终端，使用同一台机器，共享主机系统中的各种资源，而每个用户程序又可进一步分为几个任务，使它们能并发，从而可进一步提高资源利用率和系统吞吐量。在大、中和小型机中配置的大多是多用户多任务操作系统，而在32位微机上，也有不少配置的是多用户多任务操作系统，其中最有代表性的是UNIX OS。\nUNIX OS是美国电报电话公司的Bell实验室在1969~1970年期间开发的，1979年推出来的UNIX V.7已被广泛应用于多种小型机上。随着微机性能的提高，人们又将UNIX移植到微机上。在1980年后，将UNIX第7版本移植到Motorola公司的MC 680xx微机上，后来又将UNIX V7.0版本进行简化后，移植到Intel 8080上，把它称为Xenix。现在最有影响的两个能运行在微机上的UNIX操作系统变形是Solaris OS和Linux OS。\n(1)Solaris OS：SUN公司于1982年推出的SUN OS 1.0，是一个运行在MOTOROLA 680X0平台上的UNIX OS，在1988年宣布的SUN OS 4.0，把运行平台从早期的MOTOROLA 680X0平台迁移到SPARC平台，并开始支持Intel公司的80X86；1992年SUN发布了Solaris 2.0。从1998年开始，Sun公司推出64位操作系统Solaris 2.7和2.8，这几款操作系统在网络特性、互操作性、兼容性以及易于配置和管理方面均有很大的提高。\n(2)Linux OS：Linux是UNIX的一个重要变种，最初是由芬兰学生Linus Torvalds针对Intel 8086开发的，1991年，在Internet网上发布第一个Linux版本，由于源代码公开，因此有很多人通过Internet与之合作，使Linux的性能迅速提高，其应用范围也日益扩大，相应地，源代码而急剧膨胀，此时它已是具有全面功能的UNIX系统，大量在UNIX上运行的软件（包括1000多种使用工具软件和大量网络软件），被移植到Linux上，而且可以在主要的微机上运行，如Intel 80X86 Pentium等。\n操作系统的基本特性 前面所介绍的多道批处理系统、分时系统和实时系统这三种基本草祖宗系统都具有各自不同的特征，如批处理系统有着高的资源利用率和系统吞吐量；分时系统能获得及时响应；实时系统具有实时特征。除此之外，它们还共同具有并发、共享、虚拟和异步四个基本特征。\n并发（Concurrence） 正是系统中的程序能并发执行这一特征，才使得OS能有效地提尕奥系统中的资源利用率，增加系统的吞吐量。\n并行与并发 并行性和并发性是既相似又有区别的两个概念。并行性是指两个或多个事件在同一时刻发生。而并发性是指两个或多个事件在同一时间间隔内发生。在多道程序环境下，并发性是指在一段时间内宏观上有多个程序在同时运行，但在单处理机系统中，每一时刻却只能有一道程序执行，故微观上这些程序只能是分时地交替进行。例如，在1秒钟时间内，0~15ms程序A运行；15~30ms程序B运行；30~45ms程序C运行；45~60ms程序D运行，因此可以说，在1秒钟时间间隔内，宏观上有四道程序在同时运行，但微观上，程序A、B、C、D是分时地交替执行的。\n倘若在计算机系统中有多个处理机，这些可以并发执行的程序便可被分配到多个处理机上，实现并行执行，即利用每个处理机来处理一个可并发执行的程序。这样，多个程序便可同时执行。\n引入进程 在一个未引入进程的系统中，在属于同一个应用程序的计算程序和I/O程序之间只能是顺序执行，即只有在计算程序执行告一段落后，才允许I/O程序执行；反之，在程序执行I/O操作时,计算程序也不能执行。但在为计算程序和1/0程序分别建立一个进程（Process）‌后，这两个进程便可并发执行。若对内存中的多个程序都分别建立一个进程，它们就可以并发执行，这样便能极大地提高系统资源的利用率，增加系统的吞吐量。\n所谓进程，是指在系统中能独立运行并作为资源分配的基本单位。它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。多个进程之间可以并发执行和交换信息。事实上，进程和并发是现代操作系统中最重要的基本概念，也是操作系统运行的基础。\n共享（Sharing） 一般情况下的共享与操作系统环境下的共享其含义并不完全相同。前者只是说明某种资源能被大家使用，如图书馆中的图书能提供给大家借阅，但并未限定借阅者必须在同一时间（间隔）和同一地点阅读。又如，学校中的计算机机房供全校学生上机，或者说，全校学生共享该机房中的计算机设备，虽然所有班级的上机地点是相同的，但各班的上机时间并不相同。对于这样的资源共享方式，只要通过适当的安排，用户之间并不会产生对资源的竞争，因此资源管理是比较简单的。\n而在OS环境下的资源共享或称为资源复用，是指系统中的资源可供内存中多个并发执行的进程共同使用。这里在宏观上既限定了时间（进程在内存期间），也限定了地点（内存）。对于这种资源共享方式，其管理就要复杂得多，因为系统中的资源远少于多道程序需求的总和，会形成它们对共享资源的争夺。所以，系统必须对资源共享进行妥善管理。由于资 源属性的不同，进程对资源复用的方式也不同，目前主要实现资源共享的方式有如下两种。\n互斥共享方式 系统中的某些资源，如打印机、磁带机等，虽然可以提供给多个进程（线程）使用，但应规定在一段时间内，只允许一个进程访问该资源。为此，在系统中应建立一种机制，以保证多个进程对这类资源的互斥访问。当进程A要访问某资源时，必须先提出请求。若此时该资源空闲，系统便可将之分配给请求进程A使用。此后若再有其它进程也要访问该资源，只要A未用完就必须等待。仅当A进程访问完并释放系统资源后，才允许另一进程对该资源进行访问。这种资源共享方式称为互斥式共享，把这种在一段时间内只允许一个进程访问的资源，称为临界资源（或独占资源）。系统中的大多数物理设备，以及栈、变量和表格，都属于临界资源，都只能被互斥地共享。为此，在系统中必须配置某种机制，用于保证诸进程互斥地使用临界资源。\n同时访问方式 系统中还有另一类资源，允许在一段时间内由多个进程“同时”对它们进行访问。这里所谓的“同时”，在单处理机环境下是宏观意义上的，而在微观上，这些进程对该资源的访问是交替进行的。典型的可供多个进程“同时”访问的资源是磁盘设备。一些用重入码编写的文件也可以被“同时”共享，即允许若干个用户同时访问该文件。\n并发和共享是多用户（多任务）OS的两个最基本的特征。它们又是互为存在的条件。即一方面资源共享是以进程的并发执行为条件的，若系统不允许并发执行也就不存在资源共享问题：另一方面，若系统不能对资源共享实施有效管理，以协调好诸进程对共享资源的访问，也必然会影响到诸进程间并发执行的程度，甚至根本无法并发执行。\n虚拟（Virtual） 用于实现“虚拟”的技术最早出现在通信系统中。在早期，每一条物理信道只能供一对用户通话，为了提高通信信道的利用率而引入了\u0026quot;虚拟”技术。该技术是通过\u0026quot;空分复用”或“时分复用”技术，将一条物理信道变为若干条逻辑信道，使原来只能供一对用户通话的物理信道，变为能供多个用户同时通话的逻辑信道。\n在OS中，把通过某种技术将一个物理实体变为若干个逻辑上的对应物的功能称为\u0026quot;虚拟”。前者是实的，即实际存在的，而后者是虚的，是用户感觉上的东西。相应地，把用于实现虚拟的技术称为虚拟技术。在OS中也是利用时分复用和空分复用技术来实现\u0026quot;虚拟”的。\n时分复用技术 在计算机领域中，广泛利用时分复用技术来实现虚拟处理机、虚拟设备等，使资源的利用率得以提高。时分复用技术能提高资源利用率的根本原因在于，它利用某设备为一用户服务的空闲时间，又转去为其他用户服务，使设备得到最充分的利用。\n1.虚拟处理机技术。利用多道程序设计技术，为每道程序建立至少一个进程，让多道程序并发执行。此时虽然系统中只有一台处理机，但通过分时复用的方法，能实现同时（宏观上）为多个用户服务，使每个终端用户都认为是有一个处理机在专门为他服务。亦即，利用多道程序设计技术，可将一台物理上的处理机虚拟为多台逻辑上的处理机，在每台逻辑处理机上运行一道程序，我们把用户所感觉到的处理机称为虚拟处理器。\n2.虚拟设备技术。我们还可以利用虚拟设备技术，也通过分时复用的方法，将一台物理I/O设备虚拟为多台逻辑上的I/O设备，并允许每个用户占用一台逻辑上的I/O设备。 这样便可使原来仅允许在一段时间内由一个用户访问的设备（即临界资源），变为允许多个用户\u0026quot;同时”访问的共享设备，既宏观上能\u0026quot;同时”为多个用户服务。例如原来的打印机属于临界资源，而通过虚拟设备技术又可以把它变为多台逻辑上的打印机，供多个用户\u0026quot;同时”打印。\n空分复用技术 20世纪初，电信业中就已使用频分复用技术来提高信道的利用率。它是指将一个频率范围比较宽的信道划分成多个频率范围较窄的信道（称为频带），其中的任何一个频带都仅供一对用户通话。早期的频分复用技术只能将一条物理信道划分为几条到几十条话路，后来又很快发展到成千上万条话路，每条话路供一对用户通话。再后来在计算机中也把空分复用技术用于对存储空间的管理，用以提高存储空间的利用率。\n如果说，多道程序技术（时分复用技术）是通过利用处理机的空闲时间运行其它程序，提高了处理机的利用率，那么，空分复用技术则是利用存储器的空闲空间分区域存放和运行其它的多道程序，以此来提高内存的利用率。\n但是，单纯的空分复用存储器只能提高内存的利用率，并不能实现在逻辑上扩大存储器容量的功能，还必须引入虚拟存储技术才能达到此目的。虚拟存储技术在本质上是实现内存的分时复用，即它可以通过分时复用内存的方式，使一道程序仅在远小于它的内存空间中运行。例如，一个100MB的应用程序之所以可以运行在30MB的内存空间，实质上就是每次只把用户程序的一部分调入内存运行，运行完成后将该部分换出，再换入另一部分到内存中运行，通过这样的置换功能，便实现了用户程序的各个部分分时地进入内存运行。应当着重指出：虚拟的实现，如果是采用分时复用的方法，即对某一物理设备进行分时使用，设N是某物理设备所对应的虚拟的逻辑设备数，则每台虚拟设备的平均速度必然等于或低于物理设备速度的1/N。类似地，如果是利用空分复用方法来实现虚拟，此时一台虚拟设备平均占用的空间必然也等于或低于物理设备所拥有空间的1/N。\n异步（Asynchronism） 在多道程序环境下，系统允许多个进程并发执行。在单处理机环境下，由于系统中只有一台处理机，因而每次只允许一个进程执行，其余进程只能等待。当正在执行的进程提出某种资源要求时，如打印请求，而此时打印机正在为其它进程打印，由于打印机属于临界资源，因此正在执行的进程必须等待，并释放出处理机，直到打印机空闲，并再次获得处理机时，该进程方能继续执行。可见，由于资源等因素的限制，使进程的执行通常都不可能\u0026quot;一气呵成”，而是以\u0026quot;停停走走”的方式运行。\n对于内存中的每个进程，在何时能获得处理机运行，何时又因提出某种资源请求而暂停，以及进程以怎样的速度向前推进，每道程序总共需要多少时间才能完成等等，都是不可预知的。由于各用户程序性能的不同，比如，有的侧重于计算而较少需要I/O；而有的程序其计算少而I/O多，这样，很可能是先进入内存的作业后完成，而后进入内存的作业先完成。或者说，进程是以人们不可预知的速度向前推进的，此即进程的异步性。尽管如此,但只要在OS中配置有完善的进程同步机制，且运行环境相同，则作业即便经过多次运行，也都会获得完全相同的结果。因此异步运行方式是允许的，而且是操作系统的一个重要特征。\n操作系统的主要功能 引入OS的主要目的是，为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度地提高系统中各种资源的利用率，方便用户的使 用。为此，在传统的OS中应具有处理机管理、存储器管理、设备管理和文件管理等基本功能。此外，为了方便用户使用OS,还需向用户提供方便的用户接口。\n处理机管理功能 在传统的多道程序系统中，处理机的分配和运行都是以进程为基本单位的，因而对处理机的管理可归结为对进程的管理。处理机管理的主要功能有：创建和撤消进程，对诸进程的运行进行协调，实现进程之间的信息交换，以及按照一定的算法把处理机分配给进程。\n进程控制 在多道程序环境下为使作业能并发执行，必须为每道作业创建一个或几个进程，并为之分配必要的资源。当进程运行结束时，应立即撤消该进程，以便能及时回收该进程所占用的各类资源，供其它进程使用。在设置有线程的OS中，进程控制还应包括为一个进程创建若干个线程，以提高系统的并发性。因此，进程控制的主要功能也就是为作业创建进程、撤消（终止）已结束的进程，以及控制进程在运行过程中的状态转换。\n进程同步 为使多个进程能有条不紊地运行，系统中必须设置相应的进程同步机制。该机制的主要任务是为多个进程（含线程）的运行进行协调。常用的协调方式有两种：①进程互斥方式,这是指诸进程在对临界资源进行访问时，应采用互斥方式；②进程同步方式，指在相互合作去完成共同任务的诸进程间，由同步机构对它们的执行次序加以协调。最简单的用于实现进程互斥的机制是为每一个临界资源配置一把锁W,当锁打开时，进程可以对该临界资源进行访问:而当锁关上时，则禁止进程访问该临界资源。而实现进程同步时，最常用的机制是信号量机制。\n进程通信 当有一组相互合作的进程去完成一个共同的任务时，在它们之间往往需要交换信息。例如，有输入进程、计算进程和打印进程三个相互合作的进程，输入进程负责将所输入的数据传送给计算进程；计算进程利用输入数据进行计算，并把计算结果传送给打印进程；最后由打印进程把计算结果打印出来。进程通信的任务是实现相互合作进程之间的信息交换。\n当相互合作的进程处于同一计算机系统时，通常在它们之间采用直接通信方式，即由源进程利用发送命令直接将消息（message）‌挂到目标进程的消息队列上，以后由目标进程利用接收命令从其消息队列中取出消息。\n调度 在传统OS中，调度包括作业调度和进程调度两步。\n①作业调度。作业调度的基本任务是从后备队列中按照一定的算法选择出若干个作业，为它们分配运行所需的资源，在将这些作业调入内存后，分别为它们建立进程，使它们都成为可能获得处理机的就绪进程，并将它们插入就绪队列中。\n②进程调度。进程调度的任务是从进程的就绪队列中按照一定的算法选出一个进程，将处理机分配给它，并为它设置运行现场，使其投入执行。\n","date":"2024-09-19T22:28:10+08:00","image":"https://www.brasswrench.com/posts/computer_science/operating_system/introduction_to_operating_system/figures/image.zh-cn.svg","permalink":"https://www.brasswrench.com/posts/computer_science/operating_system/introduction_to_operating_system/","title":"操作系统（一）：操作系统引论"},{"content":" Markov过程 引言 有一类随机过程，它具备所谓的“无后效性”（Markov性），即，要确定过程将来的状态，知道它此刻的情况就足够了，并不需要对它以往的情况的认识，这类过程称为Markov过程。本文将介绍Markov过程中最简单的两种类型：离散时间Markov链（简称马氏链）及连续时间的Markov链。\n基本概念 Markov链的定义 Markov链 定义1（Markov链）：给定随机过程 \\(\\set{X_n,n=0,1,2,\\cdots}\\) ，若它只取有限或可列个值 \\(E_0,E_1,E_2,\\cdots\\) （我们以 \\(\\set{0,1,2,\\cdots}\\) 来标记 \\(E_0,E_1,E_2\\) 并称他们是过程的状态， \\(\\set{0,1,2\\cdots}\\) 或者其子集记为 \\(S\\) ，称为过程的状态空间）。若对 \\(\\set{X_n,n=0,1,2,\\cdots}\\) （一般就认为它的状态是非负整数）和任意的 \\(n\\ge0\\) 及状态 \\(i,j,i_0,i_1\\cdots,i_{n-1}\\) ，有\n\\[ \\begin{aligned} \u0026P\\set{X_{n+1}=j|X_0=i_0,X_1=i_1,X_2=i_2,\\cdots,X_{n-1}=i_{n-1},X_n=i}\\\\[5pt] =\u0026P\\set{X_{n+1}=j|X_n=i} \\end{aligned} \\tag{1} \\] 则称随机过程 \\(\\set{X_n,n=0,1,2,\\cdots}\\) 为Markov链。\nMarkov性 式1刻画了Markov链的特性，故称为Markov性。\n转移概率 转移概率的定义 定义2（一步转移概率）：称式1中的条件概率 \\(P\\set{X_{n+1}=j|X_n=i}\\) 为Markov链 \\(\\set{X_n\\left(n=0,1,2,\\cdots\\right)}\\) 的一步转移概率，简称转移概率。\n一般情况下，转移概率与状态 \\(i,j\\) 和时刻 \\(n\\) 有关。\n时齐Markov链 定义3（时齐）：当Markov链的转移概率只与状态 \\(i,j\\) 有关，而与 \\(n\\) 无关时，称Markov链为时齐的，并记 \\(p_{ij}=P\\set{X_{n+1}=j|X_n=i}\\left(n \\ge 0\\right)\\) ；否则，就称之为非时齐的。\n本文只讨论时齐Markov链并将其简称为Markov链。\n有限链和无限链 定义4（有限链和无限链）：当Markov链的状态为有限时，成为有限链，否则成为无限链。但无论状态有限还是无限，我们都可以将 \\(p_{ij}\\left(i,j\\in S\\right)\\) 排成一个矩阵的形式，令\n\\[ \\bm{P}=\\left(p_{ij}\\right)= \\begin{pmatrix} p_{00} \u0026 p_{01} \u0026 p_{02} \u0026 p_{03} \u0026 \\cdots \\\\[5pt] p_{10} \u0026 p_{11} \u0026 p_{12} \u0026 p_{13} \u0026 \\cdots \\\\[5pt] p_{20} \u0026 p_{21} \u0026 p_{22} \u0026 p_{23} \u0026 \\cdots \\\\[5pt] p_{30} \u0026 p_{31} \u0026 p_{32} \u0026 p_{33} \u0026 \\cdots \\\\[5pt] \\vdots \u0026 \\vdots \u0026 \\vdots \u0026 \\vdots \u0026 \\ddots \\\\[5pt] \\end{pmatrix} \\tag{2} \\] 则称 \\(\\bm{P}\\) 为转移概率矩阵，一般称为转移矩阵。容易看出 \\(p_{ij}\\left(i,j\\in S\\right)\\) 有性质\n\\[ p_{ij} \\ge 0, i,j\\in S \\tag{3} \\] \\[ \\sum_{j \\in S}{p_{ij}} = 1, \\forall i \\in S \\tag{4} \\]\nn步转移概率与C-K方程 n步转移概率 定义5（n步转移概率）：称条件概率\n\\[ p_{ij}^{\\left(n\\right)}=P\\set{X_{m+n}=j|X_m=i}\\quad i,j\\in S,m \\ge 0, n \\ge 1 \\tag{5} \\] 为Markov链的n步转移概率，相应地称 \\(\\bm{P}^{\\left(n\\right)}=\\left(p_{ij}^{\\left(n\\right)}\\right)\\) 为n步转移矩阵。\n当 \\(n=1\\) 时， \\(p_{ij}^{\\left(1\\right)}=p_{ij}\\) ， \\(\\bm{P}^{\\left(1\\right)}=\\bm{P}\\) 。此外规定\n\\[ p_{ij}^{\\left(0\\right)}= \\begin{cases} 0, \\quad i \\ne j\\\\[5pt] 1, \\quad i=j \\end{cases} \\tag{6} \\] 显然，n步转移概率 \\(p_{ij}^{\\left(n\\right)}\\) 指的就是系统从状态 \\(i\\) 经过 \\(n\\) 步后转移到了 \\(j\\) 的概率，它对中间的 \\(n-1\\) 步转移经过的状态无要求。下面的定理给出了 \\(p_{ij}^{\\left(n\\right)}\\) 和 \\(p_{ij}\\) 的关系。\nC-K方程 定理1（Charpman-Kolmogorov方程，简称C-K方程）：对一切 \\(n,m \\ge 0\\) ， \\(i,j \\in S\\) 有\n\\[ p_{ij}^{\\left(m+n\\right)}=\\sum_{k \\in S}{p_{ik}^{\\left(m\\right)}}p_{kj}^{\\left(n\\right)} \\tag{7} \\] \\[ \\bm{P}^{\\left(n\\right)}=\\bm{P} \\cdot \\bm{P}^{\\left(n-1\\right)} = \\bm{P} \\cdot \\bm{P} \\cdot \\bm{P}^{\\left(n-2\\right)} = \\cdots = \\bm{P}^n \\tag{8} \\] 证明（C-K方程）‌：由全概率公式可得\n\\[ \\begin{aligned} p_{ij}^{\\left(m+n\\right)}\u0026=P\\set{X_{m+n}=j|X_0=i}\\\\[5pt] \u0026=\\frac{P\\set{X_{m+n}=j,X_0=i}}{P\\set{X_0=i}}\\\\[10pt] \u0026=\\sum_{k \\in S}{\\frac{P\\set{X_{m+n}=j,X_m=k,X_0=i}}{P\\set{X_0=i}}}\\text{（全概率公式）}\\\\ \u0026=\\sum_{k \\in S}{\\frac{P\\set{X_{m+n}=j,X_m=k,X_0=i}}{P\\set{X_m=k,X_0=i}}\\frac{P\\set{X_m=k,X_0=i}}{P\\set{X_0=i}}}\\\\ \u0026=\\sum_{k \\in S}{P\\set{X_{m+n}=j|X_m=k,X_0=i}}P\\set{X_m=k|X_0=i}\\\\ \u0026=\\sum_{k \\in S}{p_{kj}^{\\left(n\\right)}p_{ik}^{\\left(m\\right)}}\\\\ \u0026=\\sum_{k \\in S}{p_{ik}^{\\left(m\\right)}p_{kj}^{\\left(n\\right)}} \\end{aligned} \\tag{9} \\] 由矩阵乘法易得式8是式7的矩阵形式。\n结论1：对任意 \\(n_1,n_2,n_3,\\cdots,n_m\\left(n_i\\ge0\\right)\\) 和 \\(k_1,k_2,k_3,\\cdots,k_m\\left(k_j \\in S\\right)\\) ，有\n\\[ p_{ij}^{\\left(n_1+n_2+n_3+\\cdots+n_m\\right)}\\ge p_{ik_1}^{\\left(n_1\\right)}p_{k_1k_2}^{\\left(n_2\\right)}p_{k_2k_3}^{\\left(n_3\\right)}\\cdots p_{k_{m-1}j}^{\\left(n_m\\right)} \\tag{10} \\] 证明（结论1）‌：由C-K方程和概率的非负性可得\n\\[ \\begin{aligned} p_{ij}^{\\left(n_1+n_2+n_3+\\cdots+n_m\\right)}=\u0026\\sum_{k \\in S}p_{ik}^{\\left(n_1\\right)}p_{kj}^{\\left(n_2+n_3+\\cdots+n_m\\right)}\\\\[5pt] \\ge\u0026p_{ik_1}^{\\left(n_1\\right)}p_{k_1j}^{\\left(n_2+n_3+\\cdots+n_m\\right)}\\\\[5pt] \\ge\u0026\\sum_{k \\in S}p_{ik_1}^{\\left(n_1\\right)}p_{k_1k}^{\\left(n_2\\right)}p_{kj}^{\\left(n_3+\\cdots+n_m\\right)}\\\\ \\ge\u0026p_{ik_1}^{\\left(n_1\\right)}p_{k_1k_2}^{\\left(n_2\\right)}p_{k_2j}^{\\left(n_3+\\cdots+n_m\\right)}\\\\ \\vdots\\\\ \\ge\u0026p_{ik_1}^{\\left(n_1\\right)}p_{k_1k_2}^{\\left(n_2\\right)}p_{k_2k_3}^{\\left(n_3\\right)}\\cdots p_{k_{m-1}j}^{\\left(n_m\\right)} \\end{aligned} \\tag{11} \\] 状态的分类及性质 可达、互通、类、可约 定义6（可达与互通）：称状态 \\(i\\) 可达状态 \\(j\\left(i,j \\in S\\right)\\) ，若存在 \\(n \\ge 0\\) 使得 \\(p_{ij}^{\\left(n\\right)} \\ge 0\\) ，记为 \\(i \\rightarrow j\\) 。若同时有状态 \\(j \\rightarrow i\\) ，则称 \\(i\\) 与 \\(j\\) 互通，记为 \\(i \\leftrightarrow j\\) 。\n定理2：互通是一种等价关系，即满足：\n①自反性： \\(i \\leftrightarrow i\\) ；\n②对称性： \\(i \\leftrightarrow j\\) ，则 \\(j \\leftrightarrow i\\) ；\n③传递性： \\(i \\leftrightarrow j\\) , \\(j \\leftrightarrow k\\) ，则 \\(i \\leftrightarrow k\\) 。\n证明（定理2）‌：从互通的定义可知①②是显然的，只证③。由互通定义可知，需证 \\(i \\rightarrow k\\) 且 \\(k \\rightarrow i\\) 。首先，由 \\(i \\rightarrow j\\) ， \\(j \\rightarrow k\\) 可知存在 \\(m\\) ， \\(n\\) 使得 \\(p_{ij}^{\\left(m\\right)}\u003e0\\) ， \\(p_{jk}^{\\left(n\\right)}\u003e0\\) 。再由结论1可知 \\(p_{ik}^{\\left(m+n\\right)}\\ge {p_{ij}^{\\left(m\\right)}p_{jk}^{\\left(n\\right)}}\u003e0\\) ，故 \\(i \\rightarrow k\\) 。反过来同样有 \\(k \\rightarrow i\\) ，即证 \\(i \\leftrightarrow k\\) 。\n定义7（类）：我们把任何两个相通状态归为一个类，由上述定理可知，同在一类的状态应该都是互通的，并且任何一个状态不能同时属于两个不同的类。\n定义8（可约）：若Markov链只存在一个类，就称它是不可约的。否则称为可约的。\n周期 定义9（周期）：若集合 \\(\\set{n|n \\ge 1,p_{ii}^{\\left(n\\right)} \\ge 0}\\) 非空，则称它的最大公约数 \\(d=d\\left(i\\right)\\) 为状态 \\(i\\) 的周期。若 \\(d \\ge 1\\) ，则称 \\(i\\) 是周期的；若 \\(d=1\\) ，则称 \\(i\\) 是非周期的。并特别规定上述集合为空集时，称 \\(i\\) 的周期为无穷大。 。\n定理3：若状态 \\(i,j\\) 同属一类，则 \\(d\\left(i\\right)=d\\left(j\\right)\\) 。\n证明（定理3）‌：由类的定义可知 \\(i \\leftrightarrow j\\) ，即存在 \\(m,n\\) 使 \\(p_{ij}^{\\left(m\\right)}\u003e0,p_{ji}^{\\left(n\\right)}\u003e0\\) 。则由结论1知 \\(p_{ii}^{\\left(m+n\\right)}\\ge p_{ij}^{\\left(m\\right)}p_{ji}^{\\left(n\\right)}\u003e0\\) ，同时对所有使得 \\(p_{jj}^{\\left(s\\right)} \u003e 0\\) 的 \\(s\\) ，有\n\\[ p_{ii}^{\\left(m+s+n\\right)} \\ge p_{ij}^{\\left(m\\right)}p_{jj}^{\\left(s\\right)}p_{ji}^{\\left(n\\right)}\u003e0 \\tag{12} \\] 由周期的定义可知，由于 \\(p_{ii}^{\\left(m+n\\right)}\u003e0\\) 且 \\(p_{ii}^{\\left(m+s+n\\right)}\u003e0\\) ， \\(d\\left(i\\right)\\) 必然同时整除 \\(n+m\\) 和 \\(n+m+s\\) ，因此，它也必然整除 \\(s\\) （见整除的基本性质）。同时我们还需注意我们已经假设了 \\(p_{jj}^{\\left(s\\right)} \u003e 0\\) ，因此 \\(d\\left(j\\right)\\) 必定也整除 \\(s\\) 。注意 \\(s\\) 的任意性，不妨直接令 \\(s=d\\left(j\\right)\\) ，由此可得 \\(d\\left(i\\right)\\) 整除 \\(d\\left(j\\right)\\) 。我们把上述证明的 \\(i\\) 和 \\(j\\) 交换一下，就也能得到 \\(d\\left(j\\right)\\) 整除 \\(d\\left(i\\right)\\) ，于是 \\(d\\left(i\\right)=d\\left(j\\right)\\) （见 整除的基本性质）。\n常返 首达概率、常返与非常返（瞬过） 定义10（首达概率）：对于任何状态 \\(i,j\\) ，以 \\(f_{ij}^{\\left(n\\right)}\\) 记从i出发经n步后首次到达 \\(j\\) 的概率（首达概率），则有\n\\[ f_{ij}^{\\left(n\\right)}= \\begin{cases} 0 \\quad n=0 \\\\[5pt] P\\set{X_n=j,X_k \\ne j\\left(k=1,2,\\cdots ,n-1\\right)| X_0=i} \\quad n \\ge 1 \\end{cases} \\tag{13} \\] 定义11（常返）：令 \\(f_{ij}=\\displaystyle\\sum_{n=1}^{\\infin}{f_{ij}^{\\left(n\\right)}}\\) ，若 \\(f_{jj}=1\\) ，则称状态 \\(j\\) 为常返状态，若 \\(f_{jj}\u003c1\\) ，称 \\(j\\) 为非常返状态或瞬过状态。\n\\(f_{ij}\\) 的含义可由如下得出：由集合 \\(A_n\\) 的定义 \\(A_n=\\set{X_n=j,X_k \\ne j, k=1,2,\\cdots n-1 | X_0=i}\\) 可知 \\(n\\) 不同的时候 \\(A_n\\) 不相交。而 \\(\\displaystyle\\bigcup_{n=1}^{\\infin}{A_n}\\) 表示的事件正是总有一个 \\(n\\) 使得过程经 \\(n\\) 步后可从 \\(i\\) 到达 \\(j\\) ,那么由不相交事件概率的可加性可得：\n\\[ P\\left(\\bigcup_{n=1}^{\\infin}{A_n}\\right)=\\sum_{n=1}^{\\infin}{P\\left(A_n\\right)}=\\sum_{n=1}^{\\infin}f_{ij}^{\\left(n\\right)}=f_{ij} \\tag{14} \\] 因此 \\(f_{ij}\\) 表示从 \\(i\\) 出发，有限步内可以到达 \\(j\\) 的概率。当 \\(i\\) 为常返状态时，以概率 \\(1\\) 从 \\(i\\) 出发，在有限步过程将重新返回 \\(i\\) ，而当 \\(i\\) 为非常返状态时，若也以概率 \\(1\\) 从 \\(i\\) 出发，则以概率 \\(1-f_{ii}\\) 不再回到 \\(i\\) （即从 \\(i\\) 滑过）。\n对于常返态 \\(i\\) ，定义\n\\[ \\mu_i=\\sum_{n=1}^{\\infin}{nf_{ii}^{\\left(n\\right)}} \\tag{15} \\] 表示由 \\(i\\) 出发再返回到 \\(i\\) 所需的平均步数（时间）。\n正常返、零常返、遍历、吸收 定义12（正常返、零常返、遍历、吸收）：对于常返态 \\(i\\) ，若 \\(\\mu_i\u003c+\\infin\\) ，则称 \\(i\\) 为正常返态；若 \\(\\mu_i=+\\infin\\) ，则称 \\(i\\) 为零常返态。特别地，若 \\(i\\) 正常返且是非周期的，则称之为遍历状态。若 \\(i\\) 是遍历状态，且 \\(f_{ii}^{\\left(1\\right)}=1\\) ，则称 \\(i\\) 为吸收状态。此时显然 \\(\\mu_i=1\\) 。\n若干性质证明 常返的极限判定 定理4：状态 \\(i\\) 为常返状态当且仅当 \\(\\displaystyle\\sum_{n=0}^{\\infin}{p_{ii}^{\\left(n\\right)}}=+\\infin\\) 。状态 \\(i\\) 为非常返状态时\n\\[ \\sum_{n=0}^{\\left(\\infin\\right)}{p_{ii}^{\\left(n\\right)}}=\\frac{1}{1-f_{ii}} \\tag{16} \\] 因而此时有 \\(\\lim\\limits_{n \\rightarrow \\infin}p_{ii}^{\\left(n\\right)}=0\\) 。\n为了证明定理4，我们需要先证明结论2和引理1。\n结论2：对任意状态 \\(i,j\\) ，有\n\\[ f_{ij}^{\\left(l+1\\right)}=\\sum_{k \\ne j,\\thinspace k \\in S}{f_{ik}^{\\left(1\\right)}f_{kj}^{\\left(l\\right)}} \\tag{17} \\] 证明（结论2）‌：由首达概率的定义、Markov链的定义、时齐的定义和全概率公式可得\n\\[ \\begin{aligned} f_{ij}^{\\left(l+1\\right)}=\u0026P\\set{X_{l+1}=j,X_m \\ne j\\left(m=1,2,\\cdots ,l\\right) | X_0=i}\\quad \\text{（首达概率）}\\\\[5pt] =\u0026\\sum_{k \\ne j,\\thinspace k \\in S}{P\\set{X_{l+1}=j,X_m \\ne j\\left(m=2,\\cdots ,l\\right),X_1=k | X_0=i}}\\text{（全概率公式）}\\\\ =\u0026\\sum_{k \\ne j,\\thinspace k \\in S}{\\frac{P\\set{X_{l+1}=j,X_m \\ne j\\left(m=2,\\cdots ,l\\right),X_1=k,X_0=i}}{P\\set{X_0=i}}}\\\\ =\u0026\\sum_{k \\ne j,\\thinspace k \\in S}{\\frac{P\\set{X_1=k,X_0=i}}{P\\set{X_0=i}}\\frac{P\\set{X_{l+1}=j,X_m \\ne j\\left(m=2,\\cdots ,l\\right),X_1=k,X_0=i}}{P\\set{X_1=k,X_0=i}}}\\\\ =\u0026\\sum_{k \\ne j,\\thinspace k \\in S}{P\\set{X_1=k|X_0=i}P\\set{X_{l+1}=j,X_m \\ne j\\left(m=2,\\cdots ,l\\right)|X_1=k,X_0=i}}\\\\ =\u0026\\sum_{k \\ne j,\\thinspace k \\in S}{P\\set{X_1=k|X_0=i}P\\set{X_{l+1}=j,X_m \\ne j\\left(m=2,\\cdots ,l\\right)|X_1=k}}\\text{（Markov链）}\\\\ =\u0026\\sum_{k \\ne j,\\thinspace k \\in S}{P\\set{X_1=k|X_0=i}P\\set{X_l=j,X_m \\ne j \\left(m=1,\\cdots ,l-1\\right)|X_0=k}}\\text{（时齐）}\\\\ =\u0026\\sum_{k \\ne j,\\thinspace k \\in S}{f_{ik}^{\\left(1\\right)}f_{kj}^{\\left(l\\right)}} \\end{aligned} \\tag{18} \\] 引理1：对任意状态 \\(i,j\\) 及 \\(1 \\le n \u003c \\infin\\) ，有\n\\[ p_{ij}^{\\left(n\\right)}=\\sum_{l=1}^{n}{f_{ij}^{\\left(l\\right)}p_{jj}^{\\left(n-l\\right)}} \\tag{19} \\] 证明（引理1）‌：用归纳法。对 \\(n=1\\) ，由 \\(p_{ij}^{\\left(1\\right)}=f_{ij}^{\\left(1\\right)}\\) ，易证上式成立。\n假设对 \\(n-1\\) ，已有 \\(p_{ij}^{\\left(n-1\\right)}=\\displaystyle\\sum_{l=1}^{n-1}{f_{ij}^{\\left(l\\right)}p_{jj}^{\\left(n-1-l\\right)}}\\) 成立。\n当取 \\(n\\) 时，利用C-K方程、归纳假设和结论2，可以推导出\n\\[ \\begin{aligned} p_{ij}^{\\left(n\\right)}\u0026=\\sum_{k \\in S}{p_{ik}^{\\left(1\\right)}p_{kj}^{\\left(n-1\\right)}} \\qquad \\text{（C-K方程）}\\\\ \u0026=p_{ij}^{\\left(1\\right)}p_{jj}^{\\left(n-1\\right)}+\\sum_{k \\ne j,\\thinspace k \\in S}{p_{ik}^{\\left(1\\right)}p_{kj}^{\\left(n-1\\right)}}\\\\ \u0026=f_{ij}^{\\left(1\\right)}p_{jj}^{\\left(n-1\\right)}+\\sum_{k \\ne j,\\thinspace k \\in S}{f_{ik}^{\\left(1\\right)}p_{kj}^{\\left(n-1\\right)}} \\text{（归纳法n=1时的情况）}\\\\ \u0026=f_{ij}^{\\left(1\\right)}p_{jj}^{\\left(n-1\\right)}+\\sum_{k \\ne j,\\thinspace k \\in S}f_{ik}^{\\left(1\\right)}\\left(\\sum_{l=1}^{n-1}{f_{kj}^{\\left(l\\right)}p_{jj}^{\\left(n-1-l\\right)}}\\right) \\text{（归纳假设n-1时的情况）}\\\\ \u0026=f_{ij}^{\\left(1\\right)}p_{jj}^{\\left(n-1\\right)}+\\sum_{l=1}^{n-1}{\\left(\\sum_{k \\ne j,\\thinspace k \\in S}{f_{ik}^{\\left(1\\right)}f_{kj}^{\\left(l\\right)}}\\right)p_{jj}^{\\left(n-1-l\\right)}}\\\\ \u0026=f_{ij}^{\\left(1\\right)}p_{jj}^{\\left(n-1\\right)}+\\sum_{l=1}^{n-1}{f_{ij}^{\\left(l+1\\right)}p_{jj}^{\\left(n-1-l\\right)}} \\quad \\text{（结论2）}\\\\ \u0026=f_{ij}^{\\left(1\\right)}p_{jj}^{\\left(n-1\\right)}+\\sum_{l=2}^{n}{f_{ij}^{\\left(l\\right)}p_{jj}^{\\left(n-l\\right)}}\\\\ \u0026=\\sum_{l=1}^{n}{f_{ij}^{\\left(l\\right)}p_{jj}^{\\left(n-l\\right)}}\\\\ \\end{aligned} \\tag{20} \\] 现在，我们可以用引理1证明定理4。\n证明（定理4）‌：\n\\[ \\begin{aligned} \\sum_{n=0}^{\\infin}{p_{ii}^{\\left(n\\right)}}=\u0026\\:p_{ii}^{\\left(0\\right)}+\\sum_{n=1}^{\\infin}{p_{ii}^{\\left(n\\right)}}\\\\ =\u0026\\:1+\\sum_{n=1}^{\\infin}\\left(\\sum_{l=1}^{n}{f_{ii}^{\\left(l\\right)}p_{ii}^{\\left(n-l\\right)}}\\right)\\\\ =\u0026\\:1+\\sum_{l=1}^{\\infin}\\sum_{n=l}^{\\infin}{f_{ii}^{\\left(l\\right)}p_{ii}^{\\left(n-l\\right)}}\\\\ =\u0026\\:1+\\sum_{l=1}^{\\infin}\\sum_{m=0}^{\\infin}{f_{ii}^{\\left(l\\right)}p_{ii}^{\\left(m\\right)}}\\\\ =\u0026\\:1+\\left(\\sum_{l=1}^{\\infin}{f_{ii}^{\\left(l\\right)}}\\right)\\left(\\sum_{n=0}^{\\infin}{p_{ii}^{\\left(n\\right)}}\\right)\\\\ =\u0026\\:1+f_{ii}\\left(\\sum_{n=0}^{\\infin}{p_{ii}^{\\left(n\\right)}}\\right) \\end{aligned} \\tag{21} \\] 左右有相同项 \\(\\displaystyle\\sum_{n=0}^{\\infin}{p_{ii}^{\\left(n\\right)}}\\) ，则解该等式得\n\\[ \\sum_{n=0}^{\\infin}{p_{ii}^{\\left(n\\right)}}=\\frac{1}{1-f_{ii}} \\tag{22} \\] 因此\n\\[ \\sum_{n=0}^{\\infin}{p_{ii}^{\\left(n\\right)}}\\text{收敛}\\iff f_{ii}\u003c1\\text{；} \\sum_{n=0}^{\\infin}{p_{ii}^{\\left(n\\right)}}=\\infin \\iff f_{ii}=1 \\tag{23} \\] 常返互通则必达 引理2：若 \\(i \\leftrightarrow j\\) 且 \\(i\\) 为常返态，则 \\(f_{ji}=1\\) 。\n证明（引理2）‌：用反证法。假设 \\(f_{ji}\u003c1\\) ，则从 \\(j\\) 出发不一定能在有限步内到达 \\(i\\) ，但是由于 \\(i \\rightarrow j\\) ，则从 \\(i\\) 出发一定能在有限步到达 \\(j\\) 。这意味着从 \\(i\\) 出发如果经过 \\(j\\) ，将不一定能在有限步之内再回到 \\(i\\) ，这与 \\(i\\) 的常返性相矛盾，假设不成立。因此 \\(f_{ij}=1\\) 。\n常返是一个类性质 定理5：常返性是一个类性质。即若 \\(i \\leftrightarrow j\\) 则 \\(i,j\\) 同为常返状态或非常返状态，且当 \\(i,j\\) 同为常返状态时，它们同为正常返态或零常返态。\n证明（定理5）‌：先证明若 \\(i \\leftrightarrow j\\) 则 \\(i,j\\) 同为常返状态或非常返状态。\n由 \\(i \\leftrightarrow j\\) 知。存在 \\(n, m\\) 使得 \\(p_{ij}^{\\left(n\\right)}\u003e0,p_{ji}^{\\left(m\\right)}\u003e0\\) ，由结论1易得\n\\[ p_{ii}^{\\left(n+m+l\\right)} \\ge p_{ij}^{\\left(n\\right)}p_{jj}^{\\left(l\\right)}p_{ji}^{\\left(m\\right)}\\\\[5pt] p_{jj}^{\\left(n+m+l\\right)} \\ge p_{ji}^{\\left(n\\right)}p_{ii}^{\\left(l\\right)}p_{ij}^{\\left(m\\right)} \\tag{24} \\] 两边求和得到\n\\[ \\sum_{l=0}^{\\infin}{p_{ii}^{\\left(n+m+l\\right)}} \\ge \\sum_{l=0}^{\\infin}{p_{ij}^{\\left(n\\right)}p_{jj}^{\\left(l\\right)}p_{ji}^{\\left(m\\right)}}\\\\[5pt] \\sum_{l=0}^{\\infin}{p_{jj}^{\\left(n+m+l\\right)}} \\ge \\sum_{l=0}^{\\infin}{p_{ji}^{\\left(n\\right)}p_{ii}^{\\left(l\\right)}p_{ij}^{\\left(m\\right)}} \\tag{25} \\] 考虑到 \\(\\displaystyle\\sum_{l=0}^{n+m-1}{p_{ii}^{\\left(l\\right)}}\\) 和 \\(\\displaystyle\\sum_{l=0}^{n+m-1}{p_{jj}^{\\left(l\\right)}}\\) 都是有限的，那么可以把上式写成这样：\n\\[ \\sum_{l=0}^{\\infin}{p_{ii}^{\\left(l\\right)}} - \\sum_{l=0}^{n+m-1}{p_{ii}^{\\left(l\\right)}} \\ge p_{ij}^{\\left(n\\right)}p_{ji}^{\\left(m\\right)}\\sum_{l=0}^{\\infin}{p_{jj}^{\\left(l\\right)}}\\\\[5pt] \\sum_{l=0}^{\\infin}{p_{jj}^{\\left(l\\right)}} - \\sum_{l=0}^{n+m-1}{p_{jj}^{\\left(l\\right)}} \\ge p_{ji}^{\\left(n\\right)}p_{ij}^{\\left(m\\right)}\\sum_{l=0}^{\\infin}{p_{ii}^{\\left(l\\right)}} \\tag{26} \\] 因此我们可以直观的看出 \\(\\displaystyle\\sum_{l=0}^{\\infin}{p_{ii}^{\\left(l\\right)}}\\) 和 \\(\\displaystyle\\sum_{l=0}^{\\infin}{p_{jj}^{\\left(l\\right)}}\\) 当中任意一个为无穷时，另一个必然也为无穷；任意一个为有限时，另一个必然也为有限。因此 \\(i,j\\) 同为常返状态或非常返状态。故常返性是一个类性质，类中任意成员满足，则其他成员也必定满足；反之若类中任一成员不满足，则其他成员也不满足。\n其次还能证明当 \\(i,j\\) 同为常返状态时，它们同为正常返态或零常返态。该证明需要用到下文的推论1。\n假设 \\(i\\) 为零常返状态且 \\(i \\leftrightarrow j\\) 。由推论1可知 \\(\\lim\\limits_{m \\rightarrow \\infin}p_{ii}^{\\left(m\\right)}=0\\) 。由于 \\(i \\leftrightarrow j\\) ，存在 \\(n,l\\) 使得 \\(p_{ij}^{\\left(n\\right)}\u003e0,p_{ji}^{\\left(l\\right)}\u003e0\\) 。同时由结论1可得 \\(p_{ii}^{\\left(n+m+l\\right)} \\ge p_{ij}^{\\left(n\\right)}p_{jj}^{\\left(m\\right)}p_{ji}^{\\left(l\\right)}\\ge0\\) 。令 \\(m \\rightarrow \\infin\\) ，由夹挤准则可知 \\(\\lim\\limits_{m \\rightarrow \\infin}p_{jj}^{\\left(m\\right)}=0\\) ，故由推论1，状态 \\(j\\) 也是零常返状态。\n状态空间分解定理 定理6（状态空间分解定理）：任意Markov链的状态空间 \\(S\\) ，可唯一分解为有限个或可列个互不相交的子集 \\(D,C_1,C_2,\\cdots\\) 之和，使得\n①每一个 \\(C_n\\) 是常返状态组成的不可约闭集， \\(D\\) 由全体非常返状态组成。。\n② \\(C_n\\) 中的状态同类，或者全是正常返态，或者全是零常返态。它们有相同的周期且 \\(f_{ij}=1\\left(i,j \\in C_n\\right)\\) 。\n③ 自 \\(C_n\\) 中的状态出发不能到达 \\(D\\) 中状态。\n证明（状态空间分解定理）‌：设 \\(C\\) 为全体常返状态组成的集合，则 \\(D=S-C\\) 为非常返状态的全体组成的集合。注意到定义在 \\(C\\) 上的互通是一种等价关系，由等价关系与集合的划分可知， \\(C\\) 可以按互通关系划分为 \\(C_1 \\bigcup C_2 \\bigcup \\dots\\) ，其中每一个 \\(C_n\\) 是由同一类常返状态组成的不可约的闭集。因此 \\(S=D \\bigcup C_1 \\bigcup C_2 \\bigcup \\dots\\) 。定理假设和①证毕。由定理5可知 \\(C_n\\) 中的状态都是同类型的（正常返或零常返），由定理3可知 \\(C_n\\) 中的状态都有相同的周期，由引理2可知 \\(C_n\\) 中的状态都满足 \\(f_{ij}=1\\left(i,j \\in C_n\\right)\\) 。②证毕。对于③，可用反证法证明。假设 \\(C_n\\) 中的状态 \\(i\\) 可以到达 \\(D\\) 中的状态 \\(j\\) ，由于 \\(i\\) 是常返的，状态在到达 \\(j\\) 后必定还会再返回 \\(i\\) ，而后再由假设，状态还可能继续回到 \\(j\\) 。因此，状态从 \\(j\\) 出发后再次返回 \\(j\\) 的情况是可能出现的，这与 \\(j\\) 是非常返态相矛盾，因此假设不成立。故 \\(C_n\\) 中的状态 \\(i\\) 不可到达 \\(D\\) 中的状态 \\(j\\) 。③证毕。至此，状态空间分解定理证毕。\n不可约Markov链的转移 定理7：周期为 \\(d\\) 的不可约Markov链，其状态空间 \\(S\\) 可唯一地分解为 \\(d\\) 个互不相交的子集之和，即\n\\[ S=\\bigcup_{r=0}^{d-1}{S_r},\\quad S_r \\bigcap S_s=\\varnothing,\\quad r \\ne S \\tag{27} \\] 且使得自 \\(S_r\\) 任意状态出发，经 \\(1\\) 步转移必进入 \\(S_{r+1}\\) 中（其中 \\(S_d=S_0\\) ）。\n证明（定理7）‌：先给出子集 \\(S_r\\) 的定义：\n任意取状态 \\(i\\) ，对每一个 \\(r=0,1,\\cdots,d-1\\) ，定义集合\n\\[ S_r=\\set{j|存在n \\ge 0使得p_{ij}^{\\left(nd+r\\right)}\u003e0} \\tag{28} \\] 因为 \\(S\\) 不可约，故 \\(S\\) 中从 \\(i\\) 出发一定可以遍历每一个状态，而 \\(nd+r\\left(r=0,1,\\cdots,n-1\\right)\\) 可以遍历从 \\(i\\) 出发后的每一个时间，因此所有 \\(S_r\\) 的并集一定为 \\(S\\) ，即 \\(\\displaystyle\\bigcup_{r=0}^{d-1}{S_r}=S\\) 。\n接下来证明 \\(S_r\\) 不相交。用反证法，假设存在 \\(S_r,S_s\\) 和状态 \\(j\\) 满足 \\(j \\in S_r \\bigcap S_s\\) 。由 \\(S_r\\) 的定义知存在 \\(n,m\\) 使得 \\(p_{ij}^{\\left(nd+r\\right)}\u003e0,p_{ij}^{\\left(md+s\\right)}\u003e0\\) 。又因为 \\(i \\leftrightarrow j\\) ，故存在 \\(h\\) 使得 \\(p_{ji}^{\\left(h\\right)}\u003e0\\) ，于是由结论1可得：\n\\[ p_{ii}^{\\left(nd+r+h\\right)} \\ge p_{ij}^{\\left(nd+r\\right)}p_{ji}^{\\left(h\\right)}\u003e0\\\\[5pt] p_{ii}^{\\left(md+s+h\\right)} \\ge p_{ij}^{\\left(md+s\\right)}p_{ji}^{\\left(h\\right)}\u003e0 \\tag{29} \\] 由周期的定义可知 \\(nd+r+h\\) 和 \\(md+s+h\\) 都可以被 \\(d\\) 整除。省去前面的 \\(n\\) 和 \\(m\\) 可得 \\(r+h\\) 和 \\(s+h\\) 都可被 \\(d\\) 整除。从而其差 \\(\\left(r+h\\right)-\\left(s+h\\right)=r-s\\) 都能被 \\(d\\) 整除\\left(见整除的基本性质\\right)。但是 \\(0 \\le r \\le d-1,0 \\le s \\le d-1\\) ，故 \\(0 \\le r-s \\le d-1\\) ，因此 \\(r-s\\) 只能为 \\(0\\) ，也就是 \\(r=s\\) 。故 \\(S_r=S_s\\) ，假设不成立，故 \\(S_r\\) 不相交。\n接下来证明自 \\(S_r\\) 任意状态出发，经 \\(1\\) 步转移必进入 \\(S_{r+1}\\) 中（其中 \\(S_d=S_0\\) ）。等价于证明对任意 \\(j \\in S_r\\) ，有 \\(\\displaystyle\\sum_{k \\in S_{r+1}}{p_{jk}^{\\left(1\\right)}}=1\\) 。事实上，由 式28可知 \\(p_{ij}^{\\left(nd+r\\right)}\u003e0\\) ，同样可知对 \\(k \\notin S_{r+1}\\) 必有 \\(p_{ik}^{\\left(nd+r+1\\right)}=0\\) 。因此由结论1可推导：\n\\[ 0=p_{ik}^{\\left(nd+r+1\\right)} \\ge p_{ij}^{\\left(nd+r\\right)}p_{jk}^{\\left(1\\right)}\u003e0 \\tag{30} \\] 从而 \\(p_{jk}^{\\left(1\\right)}=0\\) 。于是\n\\[ 1\\:=\\sum_{k \\in S}{p_{jk}}=\\sum_{k \\in S_{r+1}}{p_{jk}^{\\left(1\\right)}} + \\sum_{k \\notin S_{r+1}}{p_{jk}^{\\left(1\\right)}}=\\sum_{k \\in S_{r+1}}{p_{jk}^{\\left(1\\right)}} \\tag{31} \\] 最后证明分解的唯一性。等价于与证明 \\(\\set{S_k}\\) 与初始的 \\(i\\) 无关。也就是，对于任意的 \\(i,i^\\prime\\) 生成的分解 \\(\\set{S_k},\\set{S_k^\\prime}\\) 必相等。\n首先，证明对于 \\(\\set{S_k}\\) 中的任意 \\({S_r}\\) ，存在 \\({S_s^\\prime}\\) 与其状态完全相等。首先证对所有 \\(j \\in S_r\\) ， \\(j\\) 都只能属于 \\(\\set{S_k^\\prime}\\) 中某个固定的集合。假设 \\(i^{\\prime}\\) 满足 \\(i^\\prime \\in S_s\\) 。由于自 \\(S_k\\) 任意状态出发经 \\(1\\) 步转移必进入 \\(S_{k+1}\\) 中，所以当 \\(s \\le r\\) 时，从 \\(i^{\\prime}\\) 到达 \\(j\\) 只可能通过如下过程之一：\n\\[ \\begin{cases} S_s \\rightarrow S_{s+1} \\rightarrow \\cdots \\rightarrow S_r\\\\ S_s \\rightarrow S_{s+1} \\rightarrow \\cdots \\rightarrow S_r\\rightarrow S_{r+1} \\rightarrow \\cdots \\rightarrow S_{d-1} \\rightarrow S_0 \\rightarrow S_1 \\rightarrow \\cdots \\rightarrow S_r\\\\ S_s \\rightarrow S_{s+1} \\rightarrow \\cdots \\rightarrow S_r\\rightarrow \\overbrace{S_{r+1} \\rightarrow \\cdots \\rightarrow S_{d-1} \\rightarrow S_0 \\rightarrow S_1 \\rightarrow \\cdots \\rightarrow S_r}^{重复2次}\\\\ \\quad \\vdots \\end{cases} \\tag{32} \\] 也就是从 \\(i^{\\prime}\\) 出发只能在 \\(r-s,r-s+d,r-s+2d,\\dots\\) 步上到达 \\(j\\) 。我们发现这刚好与 \\(S_{r-s}^{\\prime}\\) 的定义是一致的。因此 \\(j \\in S_{r-s}^{\\prime}\\) 。反过来讨论任意 \\(j^\\prime \\in S_{r-s}^{\\prime}\\) 。从 \\(i\\) 转移到 \\(i^\\prime\\) 需要 \\(s\\) 步，而从 \\(i^\\prime\\) 转移到 \\(j^\\prime\\) 需要 \\(r-s\\) 步，因此从 \\(i\\) 转移到 \\(j^\\prime\\) 需要 \\(r\\) 步，故 \\(j^\\prime \\in S_r\\) 。故 \\(S_r\\) 与 \\(S_{r-s}^\\prime\\) 完全对等。\n另外当 \\(s \u003e r\\) 时，由类似的方法可以证明从 \\(i^{\\prime}\\) 出发，只能在 \\(d-\\left(s-r\\right),2d-\\left(s-r\\right),\\dots\\) 步到达 \\(j\\) ，因此 \\(j \\in S_{d-\\left(s-r\\right)}^{\\prime}\\) 。类似的也可证明 \\(S_r\\) 与 \\(S_{d-\\left(s-r\\right)}^{\\prime}\\) 完全对等。综上，有\n\\[ \\begin{cases} S_r与S_{r-s}^{\\prime}完全对等，若r \\ge s \\\\[5pt] S_r与S_{d-\\left(s-r\\right)}^{\\prime}完全对等，若r \u003c s \\end{cases} \\tag{33} \\] 易证此时 \\(\\set{S_k},\\set{S_k^\\prime}\\) 一一对应。故分解是唯一的。\n极限定理与不变分布 极限定理及其衍生定理 极限定理 定理8（极限定理）：若状态 \\(j\\) 是周期为 \\(d\\) 的常返状态，则\n\\[ \\lim\\limits_{n \\rightarrow \\infin}p_{jj}^{\\left(nd\\right)}=\\frac{d}{\\mu_j} \\tag{34} \\] 证明（极限定理）‌：对 \\(n \\ge 0\\) ，令：\n\\[ r_n=\\sum_{v=n+1}^{\\infin}{f_v} \\tag{35} \\] 其中 \\(f_v=f_{jj}^{\\left(v\\right)}\\) 。于是\n\\[ \\begin{aligned} \\sum_{n=0}^{\\infin}{r_n}=\u0026\\sum_{n=0}^{\\infin}\\sum_{v=n+1}^{\\infin}{f_v}\\\\ =\u0026\\left(f_1+f_2+f_3+\\cdots\\right)+\\left(f_2+f_3+\\cdots\\right)+\\left(f_3+\\cdots\\right)+\\cdots\\\\[5pt] =\u00261\\cdot f_1 + 2 \\cdot f_2 + 3 \\cdot f_3 + \\cdots\\\\ =\u0026\\sum_{n=1}^{\\infin}{nf_n}=\\mu_j \\end{aligned} \\tag{36} \\] 由 \\(r_n\\) 定义可知 \\(f_n=r_{v-1}-r_v\\) ，代入引理1并记 \\(p_v=p_{jj}^{\\left(v\\right)}\\) 可得\n\\[ p_n=p_{jj}^{\\left(n\\right)}=\\sum_{l=1}^{n}{f_{jj}^{\\left(l\\right)}p_{jj}^{\\left(n-l\\right)}}=-\\sum_{v=1}^{n}{\\left(r_v-r_{v-1}\\right)p_{n-v}} \\tag{37} \\] 注意 \\(j\\) 是常返状态，故 \\(r_0=1\\) 。则上式可以写成\n\\[ \\sum_{v=0}^{n}{r_vp_{n-v}}=\\sum_{v=0}^{n-1}r_vp_{n-1-v} \\tag{38} \\] 上面这个式子表示了一个很明显的结论： \\(\\displaystyle\\sum_{v=0}^{n}{r_vp_{n-v}}\\) 的值与 \\(n\\) 无关。因此：\n\\[ \\sum_{v=0}^{n}{r_vp_{n-v}}=r_0p_0=1,\\quad n \\ge 0 \\tag{39} \\] 设\n\\[ \\lambda=\\limsup\\limits_{n \\rightarrow \\infin}p_{nd} \\tag{40} \\] 根据上极限的定义可知，必然存在 \\(\\set{n}\\) 的子列 \\(\\set{n_m},n_m \\rightarrow \\infin\\) 使得\n\\[ \\lambda=\\lim\\limits_{m \\rightarrow \\infin}{p_{n_md}}=\\limsup\\limits_{m \\rightarrow \\infin}{p_{n_md}}=\\liminf\\limits_{m \\rightarrow \\infin}{p_{n_md}} \\tag{41} \\] 任取 \\(s\\) 使得 \\(f_s\u003e0\\) ，由引理1和下极限的性质可得\n\\[ \\begin{aligned} \\lambda=\u0026\\liminf\\limits_{m \\rightarrow \\infin}p_{n_md}=\\liminf\\limits_{m \\rightarrow \\infin}p_{jj}^{\\left(n_md\\right)}=\\liminf\\limits_{m \\rightarrow \\infin}\\sum_{v=1}^{n_md}f_{jj}^{\\left(v\\right)}p_{jj}^{\\left(n_md-v\\right)}\\\\ =\u0026\\liminf\\limits_{m \\rightarrow \\infin}\\sum_{v=1}^{n_md}f_{v}p_{n_md-v}=\\liminf\\limits_{m \\rightarrow \\infin}\\left(f_sp_{n_md-s}+\\sum_{v=1,v \\ne s}^{n_md}f_{v}p_{n_md-v}\\right)\\\\ \\le\u0026\\liminf\\limits_{m \\rightarrow \\infin}f_sp_{n_md-s}+\\liminf\\limits_{m \\rightarrow \\infin}\\sum_{v=1,v \\ne s}^{n_md}f_{v}p_{n_md-v}\\quad\\text{（}\\liminf\\limits_{n \\rightarrow \\infin}\\left(a_n+b_n\\right)\\le\\liminf\\limits_{n \\rightarrow \\infin}a_n+\\liminf\\limits_{n \\rightarrow \\infin}b_n\\text{）} \\end{aligned} \\tag{42} \\] 由概率的非负性和上下极限的性质和可推导出\n\\[ \\begin{aligned} \\liminf\\limits_{m \\rightarrow \\infin}\\sum_{v=1,v \\ne s}^{n_md}f_{v}p_{n_md-v}\\le\u0026\\sum_{v=1,v \\ne s}^{n_md}\\liminf\\limits_{m \\rightarrow \\infin}f_{v}p_{n_md-v}\\quad\\text{（}\\liminf\\limits_{n \\rightarrow \\infin}\\left(a_n+b_n\\right)\\le\\liminf\\limits_{n \\rightarrow \\infin}a_n+\\liminf\\limits_{n \\rightarrow \\infin}b_n\\text{）}\\\\ \\le\u0026\\sum_{v=1,v \\ne s}^{\\infin}\\liminf\\limits_{m \\rightarrow \\infin}f_{v}p_{n_md-v}\\quad\\text{（概率的非负性）}\\\\ \\le\u0026\\sum_{v=1,v \\ne s}^{\\infin}\\liminf\\limits_{m \\rightarrow \\infin}f_{v}\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-v}\\quad\\text{（}\\liminf\\limits_{n \\rightarrow \\infin}a_nb_n\\le\\liminf\\limits_{n \\rightarrow \\infin}a_n\\limsup\\limits_{n \\rightarrow \\infin}b_n\\text{）}\\\\ =\u0026\\sum_{v=1,v \\ne s}^{\\infin}f_{v}\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-v}\\\\ \\end{aligned} \\tag{43} \\] 注意当 \\(v\\) 不是 \\(d\\) 的倍数时 \\(p_{n_md-v}=0\\) ，此时 \\(\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-v} \\le \\limsup\\limits_{m \\rightarrow \\infin}p_{n_md}\\) ；若 \\(v\\) 是 \\(d\\) 的倍数，由上极限的性质可知仍有 \\(\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-v} \\le \\limsup\\limits_{m \\rightarrow \\infin}p_{n_md}\\) 。故接上式\n\\[ \\liminf\\limits_{m \\rightarrow \\infin}\\sum_{v=1,v \\ne s}^{n_md}f_{v}p_{n_md-v}=\\sum_{v=1,v \\ne s}^{\\infin}f_{v}\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-v}\\le\\left(\\sum_{v=1,v \\ne s}^{\\infin}f_{v}\\right)\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md} \\tag{44} \\] 注意状态 \\(j\\) 是常返的，所以 \\(\\displaystyle\\sum_{v=1}^{\\infin}f_{v}=1\\) ，也就是 \\(\\displaystyle\\sum_{v=1,v \\ne s}^{\\infin}f_{v}=1-f_s\\) 。而将式41代入式44后再将式44代回式42得\n\\[ \\lambda\\le f_s\\liminf\\limits_{m \\rightarrow \\infin}p_{n_md-s}+\\left(1-f_s\\right)\\lambda \\tag{45} \\] 即\n\\[ \\liminf\\limits_{m \\rightarrow \\infin}p_{n_md-s}\\ge\\lambda \\tag{46} \\] 由周期的定义和 \\(f_s\u003e0\\) 知 \\(d\\) 必整除 \\(s\\) 。因此 \\(\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-s}=\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md}=\\lambda\\) 。但是由上下极限的定义可知 \\(\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-s}\\ge\\liminf\\limits_{m \\rightarrow \\infin}p_{n_md-s}\\) ，即 \\(\\lambda=\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-s}\\ge\\liminf\\limits_{m \\rightarrow \\infin}p_{n_md-s}\\ge\\lambda\\) 。故由夹挤准则可知 \\(\\limsup\\limits_{m \\rightarrow \\infin}p_{n_md-s}=\\liminf\\limits_{m \\rightarrow \\infin}p_{n_md-s}=\\lim\\limits_{m \\rightarrow \\infin}p_{n_md-s}=\\lambda\\) 。又由式41可得：\n\\[ \\lambda=\\lim\\limits_{m \\rightarrow \\infin}p_{n_md}=\\lim\\limits_{m \\rightarrow \\infin}p_{n_md-s}=\\lim\\limits_{m \\rightarrow \\infin}p_{n_md-2s}=\\cdots \\tag{47} \\] 任取 \\(l\\) 个正整数 \\(c_i\\) 和满足 \\(f_{d_i}\u003e0\\) 的 \\(l\\) 个正整数 \\(d_i,i=1,2,\\cdots,l\\) 。由式47可知有\n\\[ \\lim\\limits_{m \\rightarrow \\infin}p_{n_md-c_id_i}=\\lambda \\tag{48} \\] 注意由周期的定义， \\(d\\) 一定可以整除 \\(d_i\\) 。假设 \\(d_i=k_id\\) ， \\(k_i\\) 为正整数，则上式又可以写为\n\\[ \\lim\\limits_{m \\rightarrow \\infin}p_{\\left(n_m-c_ik_i\\right)d}=\\lambda \\tag{49} \\] 可以定义一个正整数 \\(n_m^\\prime=n_m-c_ik_i\\) 。则上式可以写成\n\\[ \\lim\\limits_{m \\rightarrow \\infin}p_{n_m^\\prime d}=\\lambda \\tag{50} \\] 我们发现上式和式41形式完全一样，因此再次重复从式41到式48的推导又可以得到\n\\[ \\lambda=\\lim\\limits_{m \\rightarrow \\infin}p_{n_m^\\prime d}=\\lim\\limits_{m \\rightarrow \\infin}p_{n_m^\\prime d-s^\\prime}=\\lim\\limits_{m \\rightarrow \\infin}p_{n_m^\\prime d-2s^\\prime}=\\cdots \\tag{51} \\] 也就是\n\\[ \\lim\\limits_{m \\rightarrow \\infin}p_{n_m^\\prime d-c_{i^\\prime}d_{i^\\prime}}=\\lambda \\tag{52} \\] 因此，不同的 \\(c_id_i\\) 可以叠加而不影响结论。故对 \\(u=\\displaystyle\\sum_{i=1}^{l}c_id_i\\) 也满足\n\\[ \\lim\\limits_{m \\rightarrow \\infin}p_{n_md-u}=\\lambda \\tag{53} \\] 由周期的定义知，存在满足 \\(f_{d_i}\u003e0\\) 的 \\(d_i,i=1,2,\\cdots,l\\) 使得 \\(d_1,d_2,\\cdots,d_l\\) 的最大公因子也是 \\(d\\) 。于是，当 \\(k\\) 大于某个正整数 \\(k_0\\) 时，必有正整数 \\(c_i\\) ，使得\n\\[ kd=\\sum_{i=1}^{l}c_id_i \\tag{54} \\] 上述结论见Frobenius问题（实际上 \\(k_0\\) 就是数论中著名的Frobenius数，该数在 \\(l\\ge3\\) 时无一般表示式，但是可以证明 \\(k_0\\le \\displaystyle\\sum_{i=2}^{l}\\frac{d_i\\cdot gcd\\left(d_1,d_2,\\dots,d_{i-1}\\right)}{d \\cdot gcd\\left(d_1,d_2,\\dots,d_i\\right)} - \\displaystyle\\sum_{i=1}^{l}\\frac{d_i}{d}\\) ）。于是，对每一个 \\(k\\ge k_0\\) 有\n\\[ \\lim\\limits_{n \\rightarrow \\infin}p_{\\left(n_m-k\\right)d}=\\lambda \\tag{55} \\] 在式39中令 \\(n=\\left(n_m-k_0\\right)d\\) ， 并注意到 \\(v\\) 不是 \\(d\\) 的整数倍时 \\(p_v=0\\) ，故可把 \\(v\\) 替换为 \\(vd\\) ，则得\n\\[ \\sum_{v=0}^{n_m-k_0}r_{vd}p_{\\left(n_m-k_0-v\\right)d}=1 \\tag{56} \\] 令 \\(m \\rightarrow \\infin\\) 可得\n\\[ \\lambda=\\frac{1}{\\displaystyle\\sum_{v=0}^{\\infin}r_{vd}} \\tag{57} \\] 因为当 \\(v\\) 不是 \\(d\\) 的整数倍时， \\(f_v=0\\) ，由式35可得\n\\[ r_{vd} = r_{vd+1} = \\cdots = r_{vd+d-1} = \\frac{1}{d}\\sum_{j=vd}^{vd+d-1}r_j \\tag{58} \\] 从而由式36得\n\\[ \\sum_{v=0}^{\\infin}r_{vd}=\\frac{1}{d}\\sum_{v=0}^{\\infin}\\sum_{j=vd}^{vd+d-1}r_j=\\frac{1}{d}\\sum_{v=0}^{\\infin}r_v=\\frac{\\mu_j}{d} \\tag{59} \\] 代入式57可得\n\\[ \\lambda = \\frac{d}{\\mu_j} \\tag{60} \\] 把式40换成 \\(\\lambda=\\liminf\\limits_{n \\rightarrow \\infin}p_{nd}\\) ，下面的推导过程完全相同，仍可以得到 \\(\\lambda = \\displaystyle\\frac{d}{\\mu_j}\\) 。因此，由极限的性质可知\n\\[ \\lim\\limits_{n \\rightarrow \\infin}p_{nd}=\\frac{d}{\\mu_j} \\tag{61} \\] 由此，极限定理证毕。\n推论1：设 \\(i\\) 为常返状态，则\n\\[ i\\text{为零常返状态}\\iff\\lim\\limits_{n \\rightarrow \\infin}p_{ii}^{\\left(n\\right)}=0 \\tag{62} \\] 证明（推论1）‌：若 \\(i\\) 为零常返状态，则 \\(\\mu_i \\rightarrow \\infin\\) ，从而由极限定理知 \\(\\lim\\limits_{n \\rightarrow \\infin}p_{ii}^{\\left(nd\\right)}=0\\) 。而当 \\(m\\) 不等于 \\(d\\) 的整数倍时， \\(p_{ii}^{\\left(m\\right)}=0\\) ，故 \\(\\lim\\limits_{n \\rightarrow \\infin}p_{ii}^{\\left(n\\right)}=0\\) 。反之，若 \\(\\lim\\limits_{n \\rightarrow \\infin}p_{ii}^{\\left(n\\right)}=0\\) ，假如 \\(i\\) 为正常返状态，则由极限定理知 \\(\\lim\\limits_{n \\rightarrow \\infin}p_{ii}^{\\left(nd\\right)}\u003e0\\) ，由极限的性质知这与 \\(\\lim\\limits_{n \\rightarrow \\infin}p_{ii}^{\\left(n\\right)}=0\\) 矛盾，因此 \\(i\\) 为零常返状态。\n再论非常返与零常返 定理9：若 \\(j\\) 为非常返状态或零常返状态，则对 \\(\\forall i \\in S\\)\n\\[ \\lim\\limits_{n \\rightarrow \\infin}p_{ij}^{\\left(n\\right)}=0 \\tag{63} \\] 证明（定理9）‌：由引理1得\n\\[ p_{ij}^{\\left(n\\right)}=\\sum_{l=1}^{n}f_{ij}^{\\left(l\\right)}p_{jj}^{\\left(n-l\\right)} \\tag{64} \\] 对 \\(N","date":"2024-09-14T21:05:01+08:00","image":"https://www.brasswrench.com/posts/mathematics/stochastic_processes/markov_process/figures/image.zh-cn.svg","permalink":"https://www.brasswrench.com/posts/mathematics/stochastic_processes/markov_process/","title":"随机过程（四）：Markov过程"}]
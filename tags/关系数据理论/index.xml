<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>关系数据理论 on 黄铜扳手的图书馆</title>
        <link>https://www.brasswrench.com/tags/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%90%86%E8%AE%BA/</link>
        <description>Recent content in 关系数据理论 on 黄铜扳手的图书馆</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>黄铜扳手</copyright>
        <lastBuildDate>Tue, 03 Dec 2024 13:12:07 +0800</lastBuildDate><atom:link href="https://www.brasswrench.com/tags/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%90%86%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数据库系统（六）：关系数据理论</title>
        <link>https://www.brasswrench.com/posts/engineering/computer_science/database_system/relational_data_theory/</link>
        <pubDate>Tue, 03 Dec 2024 10:38:46 +0800</pubDate>
        
        <guid>https://www.brasswrench.com/posts/engineering/computer_science/database_system/relational_data_theory/</guid>
        <description>&lt;img src="https://www.brasswrench.com/true" alt="Featured image of post 数据库系统（六）：关系数据理论" /&gt;







&lt;iframe
  class=&#34;netease-cloud-music-frame&#34;
  title=&#34;song&amp;#39;s 1407789513&#34;
  frameborder=&#34;no&#34;
  border=&#34;0&#34;
  marginwidth=&#34;0&#34;
  marginheight=&#34;0&#34;
  width=&#34;100%&#34;
  height=&#34;86&#34;
  loading=&#34;lazy&#34;
  src=&#34;https://music.163.com/outchain/player?type=2&amp;amp;id=1407789513&amp;amp;auto=0&amp;amp;height=66&#34;&gt;
&lt;/iframe&gt;

&lt;h1 id=&#34;关系数据理论&#34;&gt;关系数据理论
&lt;/h1&gt;&lt;h2 id=&#34;问题的提出&#34;&gt;问题的提出
&lt;/h2&gt;&lt;p&gt;前面已经讨论了数据库系统的一般概念，介绍了关系数据库的基本概念、关系模型的三个部分以及关系数据库的标准语言SQL。但是还有一个很基本的问题尚未涉及：针对一个具体问题，应该如何构造一个适合于它的数据库模式，即应该构造几个关系模式，每个关系由哪些属性组成等。这是数据库设计的问题，确切地讲是关系数据库逻辑设计问题。&lt;br&gt;
  实际上设计任何一种数据库应用系统，不论是层次的、网状的还是关系的，都会遇到如何构造合适的数据模式即逻辑结构的问题。由于关系模型有严格的数学理论基础，并且可以向别的数据模型转换，因此，人们就以关系模型为背景来讨论这个问题，形成了数据库逻辑设计的一个有力工具——关系数据库的规范化理论。规范化理论虽然是以关系模型为背景，但是它对于一般的数据库逻辑设计同样具有理论上的意义。&lt;br&gt;
  下面首先回顾一下关系模型的形式化定义。&lt;br&gt;
  在&lt;a class=&#34;link&#34; href=&#34;https://www.brasswrench.com/posts/engineering/computer_science/database_system/relational_database_system/&#34;&gt;关系数据库&lt;/a&gt;中已经讲过，一个关系模式应当是一个五元组。&lt;/p&gt;
&lt;span id=&#34;20241203124141CST&#34;&gt;&lt;/span&gt;\[
R(U,D,\text{DOM},F)
\tag{1}
    \]
&lt;p&gt;  这里：&lt;br&gt;
  ◦关系名 \(R\) 是符号化的元组语义。&lt;br&gt;
  ◦ \(U\) 为一组属性。&lt;br&gt;
  ◦ \(D\) 为属性组 \(U\) 中的属性所来自的域。&lt;br&gt;
  ◦ \(\text{DOM}\) 为属性到域的映射。&lt;br&gt;
  ◦ \(F\) 为属性组 \(U\) 上的一组数据依赖。&lt;br&gt;
  由于 \(D\) 、 \(\text{DOM}\) 与模式设计关系不大，因此在本章中把关系模式看作一个三元组：&lt;/p&gt;
&lt;span id=&#34;20241203125646CST&#34;&gt;&lt;/span&gt;
    \[
R\text{&lt;}U,F\text{&gt;}
\]
&lt;p&gt;  当且仅当 \(U\) 上的一个关系 \(r\) 满足 \(F\) 时， \(r\) 称为关系模式 \(R\text{&lt;}U,F\text{&gt;}\) 的一个关系。&lt;br&gt;
  作为一个二维表，关系要符合一个最基本的条件：每一个分量必须是不可分的数据项。满足了这个条件的关系模式就属于&lt;strong&gt;第一范式(1NF)&lt;/strong&gt;。&lt;br&gt;
  在模式设计中，假设己知一个模式 \(S\phi\) ，它仅由单个关系模式组成，问题是要设计一个模式 \(SD\) ，它与 \(S\phi\) 等价，但在某些指定的方面更好一些。这里通过一个例子来说明一个不好的模式会有些什么问题，分析它们产生的原因，并从中找出设计一个好的关系模式的办法。&lt;br&gt;
  在举例之前，先非形式地讨论一下数据依赖的概念。&lt;br&gt;
  &lt;strong&gt;数据依赖&lt;/strong&gt;是一个关系内部属性与属性之间的一种约束关系。这种约束关系是通过属性间值的相等与否体现出来的数据间相关联系。它是现实世界属性间相互联系的抽象，是数据内在的性质，是语义的体现。&lt;br&gt;
  人们已经提出了许多种类型的数据依赖，其中最重要的是&lt;strong&gt;函数依赖(Functional Dependency, FD)&lt;/strong&gt;‌和&lt;strong&gt;多值依赖(Multi-Valued Dependency, MVD)&lt;/strong&gt;。&lt;br&gt;
  函数依赖极为普遍地存在于现实生活中。比如描述一个学生的关系，可以有学号( \(\text{Sno}\) )、姓名( \(\text{Sname}\) )、系名( \(\text{Sdept}\) )等几个属性。由于一个学号只对应一个学生，一个学生只在一个系学习。因而当“学号”值确定之后，学生的姓名及所在系的值也就被唯一 地确定了。属性间的这种依赖关系类似于数学中的函数 \(y=f(x)\) ，自变量 \(x\) 确定之后，相应的函数值 \(y\) 也就唯一地确定了。&lt;br&gt;
  类似的有 \(\text{Sname}=f(\text{Sno})\) ， \(\text{Sdept}=f(\text{Sno})\) ，即 \(\text{Sno}\) 函数决定 \(\text{Sname}\) ， \(\text{Sno}\) 函数决定 \(\text{Sdept}\) ，或者说 \(\text{Sname}\) 和 \(\text{Sdept}\) 函数依赖于 \(\text{Sno}\) ，记作 \(\text{Sno}\rightarrow \text{Sname}\) ， \(\text{Sno} \rightarrow \text{Sdept}\) 。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>关系数据理论 on 黄铜扳手的图书馆</title>
        <link>https://www.brasswrench.com/tags/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%90%86%E8%AE%BA/</link>
        <description>Recent content in 关系数据理论 on 黄铜扳手的图书馆</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>黄铜扳手</copyright>
        <lastBuildDate>Wed, 04 Dec 2024 22:07:25 +0800</lastBuildDate><atom:link href="https://www.brasswrench.com/tags/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E7%90%86%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>数据库系统（六）：关系数据理论</title>
        <link>https://www.brasswrench.com/posts/engineering/computer_science/database_system/relational_data_theory/</link>
        <pubDate>Tue, 03 Dec 2024 10:38:46 +0800</pubDate>
        
        <guid>https://www.brasswrench.com/posts/engineering/computer_science/database_system/relational_data_theory/</guid>
        <description>&lt;img src="https://www.brasswrench.com/true" alt="Featured image of post 数据库系统（六）：关系数据理论" /&gt;







&lt;iframe
  class=&#34;netease-cloud-music-frame&#34;
  title=&#34;song&amp;#39;s 1407789513&#34;
  frameborder=&#34;no&#34;
  border=&#34;0&#34;
  marginwidth=&#34;0&#34;
  marginheight=&#34;0&#34;
  width=&#34;100%&#34;
  height=&#34;86&#34;
  loading=&#34;lazy&#34;
  src=&#34;https://music.163.com/outchain/player?type=2&amp;amp;id=1407789513&amp;amp;auto=0&amp;amp;height=66&#34;&gt;
&lt;/iframe&gt;

&lt;h1 id=&#34;关系数据理论&#34;&gt;关系数据理论
&lt;/h1&gt;&lt;h2 id=&#34;问题的提出&#34;&gt;问题的提出
&lt;/h2&gt;&lt;p&gt;前面已经讨论了数据库系统的一般概念，介绍了关系数据库的基本概念、关系模型的三个部分以及关系数据库的标准语言SQL。但是还有一个很基本的问题尚未涉及：针对一个具体问题，应该如何构造一个适合于它的数据库模式，即应该构造几个关系模式，每个关系由哪些属性组成等。这是数据库设计的问题，确切地讲是关系数据库逻辑设计问题。&lt;br&gt;
  实际上设计任何一种数据库应用系统，不论是层次的、网状的还是关系的，都会遇到如何构造合适的数据模式即逻辑结构的问题。由于关系模型有严格的数学理论基础，并且可以向别的数据模型转换，因此，人们就以关系模型为背景来讨论这个问题，形成了数据库逻辑设计的一个有力工具——关系数据库的规范化理论。规范化理论虽然是以关系模型为背景，但是它对于一般的数据库逻辑设计同样具有理论上的意义。&lt;br&gt;
  下面首先回顾一下关系模型的形式化定义。&lt;br&gt;
  在&lt;a class=&#34;link&#34; href=&#34;https://www.brasswrench.com/posts/engineering/computer_science/database_system/relational_database_system/&#34;&gt;关系数据库&lt;/a&gt;中已经讲过，一个关系模式应当是一个五元组。&lt;/p&gt;
&lt;span id=&#34;20241203124141CST&#34;&gt;&lt;/span&gt;\[
R(U,D,\text{DOM},F)
\tag{1}
    \]
&lt;p&gt;  这里：&lt;br&gt;
  ◦关系名 \(R\) 是符号化的元组语义。&lt;br&gt;
  ◦ \(U\) 为一组属性。&lt;br&gt;
  ◦ \(D\) 为属性组 \(U\) 中的属性所来自的域。&lt;br&gt;
  ◦ \(\text{DOM}\) 为属性到域的映射。&lt;br&gt;
  ◦ \(F\) 为属性组 \(U\) 上的一组数据依赖。&lt;br&gt;
  由于 \(D\) 、 \(\text{DOM}\) 与模式设计关系不大，因此在本章中把关系模式看作一个三元组：&lt;/p&gt;
&lt;span id=&#34;20241203125646CST&#34;&gt;&lt;/span&gt;\[
R\text{&lt;}U,F\text{&gt;}
\tag{2}
    \]
&lt;p&gt;  当且仅当 \(U\) 上的一个关系 \(r\) 满足 \(F\) 时， \(r\) 称为关系模式 \(R\text{&lt;}U,F\text{&gt;}\) 的一个关系。&lt;br&gt;
  作为一个二维表，关系要符合一个最基本的条件：每一个分量必须是不可分的数据项。满足了这个条件的关系模式就属于&lt;strong&gt;第一范式(1NF)&lt;/strong&gt;。&lt;br&gt;
  在模式设计中，假设己知一个模式 \(S\phi\) ，它仅由单个关系模式组成，问题是要设计一个模式 \(SD\) ，它与 \(S\phi\) 等价，但在某些指定的方面更好一些。这里通过一个例子来说明一个不好的模式会有些什么问题，分析它们产生的原因，并从中找出设计一个好的关系模式的办法。&lt;br&gt;
  在举例之前，先非形式地讨论一下数据依赖的概念。&lt;br&gt;
  &lt;strong&gt;数据依赖&lt;/strong&gt;是一个关系内部属性与属性之间的一种约束关系。这种约束关系是通过属性间值的相等与否体现出来的数据间相关联系。它是现实世界属性间相互联系的抽象，是数据内在的性质，是语义的体现。&lt;br&gt;
  人们已经提出了许多种类型的数据依赖，其中最重要的是&lt;strong&gt;函数依赖(Functional Dependency, FD)&lt;/strong&gt;‌和&lt;strong&gt;多值依赖(Multi-Valued Dependency, MVD)&lt;/strong&gt;。&lt;br&gt;
  函数依赖极为普遍地存在于现实生活中。比如描述一个学生的关系，可以有学号( \(\text{Sno}\) )、姓名( \(\text{Sname}\) )、系名( \(\text{Sdept}\) )等几个属性。由于一个学号只对应一个学生，一个学生只在一个系学习。因而当“学号”值确定之后，学生的姓名及所在系的值也就被唯一 地确定了。属性间的这种依赖关系类似于数学中的函数 \(y=f(x)\) ，自变量 \(x\) 确定之后，相应的函数值 \(y\) 也就唯一地确定了。&lt;br&gt;
  类似的有 \(\text{Sname}=f(\text{Sno})\) ， \(\text{Sdept}=f(\text{Sno})\) ，即 \(\text{Sno}\) 函数决定 \(\text{Sname}\) ， \(\text{Sno}\) 函数决定 \(\text{Sdept}\) ，或者说 \(\text{Sname}\) 和 \(\text{Sdept}\) 函数依赖于 \(\text{Sno}\) ，记作 \(\text{Sno}\rightarrow \text{Sname}\) ， \(\text{Sno} \rightarrow \text{Sdept}\) 。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241203143746CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;例1&lt;/strong&gt;：建立一个描述学校教务的数据库，该数据库涉及的对象包括学生的学号( \(\text{Sno}\) )、所在系( \(\text{Sdept}\) )、系主任姓名( \(\text{Mname}\) )、课程号( \(\text{Cno}\) )和成绩( \(\text{Grade}\) )。假设用一个单一的关系模式 \(\text{Student}\) 来表示，则该关系模式的属性集合为&lt;/p&gt;
&lt;span id=&#34;20241203150217CST&#34;&gt;&lt;/span&gt;\[
U = \set{ \text{Sno}, \text{Sdept}, \text{Mname}, \text{Cno}, \text{Grade}}
\tag{3}
    \]
&lt;p&gt;  现实世界的己知事实（语义）告诉我们：&lt;br&gt;
  ①一个系有若干学生，但一个学生只属于一个系。&lt;br&gt;
  ②一个系只有一名（正职）负责人。&lt;br&gt;
  ③一个学生可以选修多门课程，每门课程有若干学生选修。&lt;br&gt;
  ④每个学生学习每一门课程有一个成绩。&lt;br&gt;
  于是得到属性组U上的一组函数依赖 \(F\) （如&lt;a class=&#34;link&#34; href=&#34;#20241203151705CST&#34;&gt;图1&lt;/a&gt;所示）。&lt;/p&gt;
&lt;span id=&#34;20241203150727CST&#34;&gt;&lt;/span&gt;\[
F=\set{\text{Sno}\rightarrow\text{Sdept},\text{Sdept}\rightarrow\text{Mname},(\text{Sno},\text{Cno})\rightarrow\text{Grade}}
\tag{4}
    \]
&lt;div class=&#34;figure_container&#34;&gt;
            &lt;span class=&#34;anchor&#34; id=&#34;20241203151705CST&#34;&gt;&lt;/span&gt;
            &lt;div class=&#34;svg-figure&#34;&gt;
                &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;svg id=&#34;_图层_1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 298.1429 130.3702&#34; style=&#34;max-width:298.1429;&#34;&gt;
  &lt;text transform=&#34;translate(29.0365 45.0588)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Sno&lt;/tspan&gt;&lt;/text&gt;
  &lt;text transform=&#34;translate(112.6347 45.0588)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Cno&lt;/tspan&gt;&lt;/text&gt;
  &lt;text transform=&#34;translate(233.6992 45.0588)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;G&lt;/tspan&gt;&lt;tspan x=&#34;13.3379&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.014em;&#34;&gt;r&lt;/tspan&gt;&lt;tspan x=&#34;21.4019&#34; y=&#34;0&#34;&gt;ade&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;17.2619&#34; y=&#34;23.759&#34; width=&#34;56.381&#34; height=&#34;28.8154&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;rect x=&#34;101.9762&#34; y=&#34;23.759&#34; width=&#34;56.381&#34; height=&#34;28.8154&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;rect x=&#34;.5&#34; y=&#34;.5&#34; width=&#34;174.2857&#34; height=&#34;73.3333&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;rect x=&#34;222.352&#34; y=&#34;23.811&#34; width=&#34;75.2908&#34; height=&#34;28.8154&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;g&gt;
    &lt;line x1=&#34;174.7857&#34; y1=&#34;37.1667&#34; x2=&#34;216.3823&#34; y2=&#34;37.1667&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;213.5737 40.8698 215.147 37.1667 213.5737 33.4635 222.352 37.1667 213.5737 40.8698&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;45.4524&#34; y1=&#34;52.5744&#34; x2=&#34;45.4524&#34; y2=&#34;94.3052&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;41.7492 91.4966 45.4524 93.0699 49.1555 91.4966 45.4524 100.275 41.7492 91.4966&#34;/&gt;
  &lt;/g&gt;
  &lt;text transform=&#34;translate(19.1542 121.5228)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Sd&lt;/tspan&gt;&lt;tspan x=&#34;21.5278&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;e&lt;/tspan&gt;&lt;tspan x=&#34;31.2837&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.002em;&#34;&gt;p&lt;/tspan&gt;&lt;tspan x=&#34;42.7314&#34; y=&#34;0&#34;&gt;t&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;7.807&#34; y=&#34;100.275&#34; width=&#34;75.2908&#34; height=&#34;28.8154&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;text transform=&#34;translate(139.1541 121.5228)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;M&lt;/tspan&gt;&lt;tspan x=&#34;17.5498&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.001em;&#34;&gt;n&lt;/tspan&gt;&lt;tspan x=&#34;29.4297&#34; y=&#34;0&#34;&gt;ame&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;127.807&#34; y=&#34;100.275&#34; width=&#34;90.0264&#34; height=&#34;28.8154&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;g&gt;
    &lt;line x1=&#34;83.0978&#34; y1=&#34;114.6826&#34; x2=&#34;121.8372&#34; y2=&#34;114.6826&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;119.0287 118.3858 120.6019 114.6826 119.0287 110.9795 127.807 114.6826 119.0287 118.3858&#34;/&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;p class=&#34;svg-title&#34; style=&#34;text-align:center; margin-top: 0; margin-bottom:0&#34;&gt;图1&amp;emsp;Student上的一组函数依赖&lt;/p&gt;
&lt;p&gt;  如果只考虑函数依赖这一种数据依赖，可以得到一个描述学生的关系模式 \(\text{Student}\text{&lt;}U,F \text{&gt;} \) 。&lt;a class=&#34;link&#34; href=&#34;#20241203160635CST&#34;&gt;表1&lt;/a&gt;是某一时刻关系模式Student的一个实例，即数据表。&lt;/p&gt;
&lt;span id=&#34;20241203160635CST&#34;&gt;&lt;/span&gt;&lt;div class=&#34;normal-table&#34;&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Sno&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Sdept&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Mname&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Cno&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Grade&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;S1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算机系&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;95&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;S2&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算机系&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;90&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;S3&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算机系&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;88&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;S4&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算机系&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;70&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;S5&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算机系&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;78&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;p class=&#34;table-title&#34; style=&#34;text-align:center; margin-top: 0; margin-bottom:0&#34;&gt;表1&amp;emsp;Student表&lt;/p&gt;
&lt;p&gt;  但是，这个关系模式存在以下问题：&lt;br&gt;
  (1)&lt;strong&gt;数据冗余&lt;/strong&gt;。比如，每一个系的系主任姓名重复出现，重复次数与该系所有学生的所有课程成绩出 现次数相同，如&lt;a class=&#34;link&#34; href=&#34;#20241203160635CST&#34;&gt;表1&lt;/a&gt;所示。这将浪费大量的存储空间。&lt;br&gt;
  (2)&lt;strong&gt;更新异常&lt;/strong&gt;(update anomalies)。由于数据冗余，当更新数据库中的数据时，系统要付出很大的代价来维护数据库的完整性，否则会面临数据不一致的危险。比如，某系更换系主任后，必须修改与该系学生有关的每一个元组。&lt;br&gt;
  (3)&lt;strong&gt;插入异常&lt;/strong&gt;(insertion anomalies)。如果一个系刚成立，尚无学生，则无法把这个系及其系主任的信息存入数据库。&lt;br&gt;
  (4)&lt;strong&gt;删除异常&lt;/strong&gt;(deletion anomalies)。如果某个系的学生全部毕业了，则在删除该系学生信息的同时，这个系及其系主任的信息也丢掉了。&lt;br&gt;
  鉴于存在以上种种问题，可以得出这样的结论：\(\text{Student}\) 关系模式不是一个好的模式。一个好的模式应当不会发生插入异常、删除异常和更新异常，数据冗余应尽可能少。&lt;br&gt;
  为什么会发生这些问题呢？&lt;br&gt;
  这是因为这个模式中的函数依赖存在某些不好的性质。这正是本章要讨论的问题。假如把这个单一的模式改造一下，分成三个关系模式：&lt;br&gt;
   \(\text{S}(\text{Sno},\text{Sdept},\text{Sno}\rightarrow\text{Sdept});\)&lt;br&gt;
   \(\text{SC}(\text{Sno},\text{Cno},\text{Grade},(\text{Sno},\text{Cno})\rightarrow \text{Grade});\)&lt;br&gt;
   \(\text{DEPT}(\text{Sdept},\text{Mname}, \text{Sdept}\rightarrow \text{Mname})\)&lt;br&gt;
  这三个模式都不会发生插入异常、删除异常的问题，数据的冗余也得到了控制。&lt;br&gt;
  一个模式的数据依赖会有哪些不好的性质，如何改造一个不好的模式，这就是下一节规范化要讨论的内容。&lt;/p&gt;
&lt;h2 id=&#34;规范化&#34;&gt;规范化
&lt;/h2&gt;&lt;p&gt;  本节首先讨论一个关系属性间不同的依赖情况，讨论如何根据属性间依赖情况来判定关系是否具有某些不合适的性质，通常按属性间依赖情况来区分关系规范化程度为第一范式、第二范式、第三范式和第四范式等；然后直观地描述如何将具有不合适性质的关系转换为更合适的形式。&lt;br&gt;
  第一节关系模式 \(\text{Student}\text{&lt;}U,F \text{&gt;} \) 中有 \(\text{Sno}\rightarrow \text{Sdept}\) 成立，也就是说在任何时刻 \(\text{Student}\) 的关系实例（即 \(\text{Student}\) 数据表）中，不可能存在两个元组在 \(\text{Sno}\) 上的值相等，而在 \(\text{Sdept}\) 上的值不等。因此，表6.2的 \(\text{Student}\) 表是错误的。因为表中有两个元组在 \(\text{Sno}\) 上都等于 \(\text{S}_1\) ，而 \(\text{Sdept}\) 一个为计算机系，一个为自动化系。&lt;/p&gt;
&lt;span id=&#34;20241203164608CST&#34;&gt;&lt;/span&gt;&lt;div class=&#34;normal-table&#34;&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Sno&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Sdept&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Mname&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Cno&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Grade&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;span style=&#34;border: 1px solid var(--article-font-color);&#34;&gt;S1&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;span style=&#34;border: 1px solid var(--article-font-color);&#34;&gt;计算机系&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;95&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;span style=&#34;border: 1px solid var(--article-font-color);&#34;&gt;S1&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;span style=&#34;border: 1px solid var(--article-font-color);&#34;&gt;自动化系&lt;/span&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;90&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;S3&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算机系&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;88&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;S4&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算机系&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;70&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;S5&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;计算机系&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;张明&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;C1&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;78&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;⋮&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;p class=&#34;table-title&#34; style=&#34;text-align:center; margin-top: 0; margin-bottom:0&#34;&gt;表2&amp;emsp;一个错误的Student表&lt;/p&gt;
&lt;h3 id=&#34;函数依赖&#34;&gt;函数依赖
&lt;/h3&gt;&lt;p&gt;  &lt;span id=&#34;20241203204551CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;定义1&lt;/strong&gt;：设 \(R(U)\) 是属性集 \(U\) 上的关系模式， \(X,Y\) 是 \(U\) 的子集。若对于 \(R(U)\) 的任意 一个可能的关系 \(r\) ， \(r\) 中不可能存在两个元组在 \(X\) 上的属性值相等，而在 \(Y\) 上的属性值不等，则称&lt;strong&gt; \(X\) 函数确定 \(Y\) &lt;/strong&gt;或&lt;strong&gt; \(Y\) 函数依赖于 \(X\) &lt;/strong&gt;，记作 \(X \rightarrow Y\) 。&lt;br&gt;
  函数依赖和别的数据依赖一样是语义范畴的概念，只能根据语义来确定一个函数依赖。例如，姓名一年龄这个函数依赖只有在该部门没有同名人的条件下成立。如果允许有同名人，则年龄就不再函数依赖于姓名了。&lt;br&gt;
  设计者也可以对现实世界作强制性规定，例如规定不允许同名人出现，因而使姓名—年龄函数依赖成立。这样当插入某个元组时这个元组上的属性值必须满足规定的函数依赖, 若发现有同名人存在，则拒绝插入该元组。&lt;br&gt;
  注意，函数依赖不是指关系模式 \(R\) 的某个或某些关系满足的约束条件，而是指 \(R\) 的一切关系均要满足的约束条件。&lt;br&gt;
  下面介绍一些术语和记号。&lt;br&gt;
  ◦ \(X \rightarrow Y\) ，但 \(Y \nsubseteq X\) ，则称 \(X \rightarrow Y\) 是&lt;strong&gt;非平凡的函数依赖&lt;/strong&gt;。&lt;br&gt;
  ◦ \(X \rightarrow Y\) ，但 \(Y \subseteq X\) ，则称 \(X \rightarrow Y\) 是&lt;strong&gt;平凡的函数依赖&lt;/strong&gt;。对于任一关系模式，平凡函数依赖都是必然成立的，它不反映新的语义。若不特别声明，总是讨论非平凡的函数依赖。&lt;br&gt;
  ◦若 \(X \rightarrow Y\) ，则 \(X\) 称为这个函数依赖的决定属性组，也称为&lt;strong&gt;决定因素&lt;/strong&gt;(determinant)。&lt;br&gt;
  ◦若 \(X \rightarrow Y\) ， \(Y \rightarrow X\) ，则记作 \(X \leftarrow \rightarrow Y\) 。&lt;br&gt;
  ◦若 \(Y\) 不函数依赖于 \(X\) ，则记作 \(X \nrightarrow Y\) 。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241203215706CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;定义2&lt;/strong&gt;：在 \(R(U)\) 中，如果 \(X \rightarrow Y\) ，并且对于 \(X\) 的任何一个真子集 \(X&#39;\) ，都有 \(X&#39; \nrightarrow Y\) ，则称 \(Y\) 对 \(X\) &lt;strong&gt;完全函数依赖&lt;/strong&gt;，记作&lt;/p&gt;
&lt;span id=&#34;20241203222841CST&#34;&gt;&lt;/span&gt;\[
X \xrightarrow{F} Y
\tag{5}
    \]
&lt;p&gt;  若 \(X \rightarrow Y\) ，但 \(Y\) 不完全函数依赖于 \(X\) ，则称 \(Y\) 对 \(X\) &lt;strong&gt;部分函数依赖&lt;/strong&gt;(partial functional dependency)，记作&lt;/p&gt;
&lt;span id=&#34;20241203223507CST&#34;&gt;&lt;/span&gt;\[
X \xrightarrow{P} Y
\tag{6}
    \]
&lt;p&gt;  &lt;a class=&#34;link&#34; href=&#34;#20241203143746CST&#34;&gt;例1&lt;/a&gt;中 \((\text{Sno},\text{Cno})\xrightarrow{F} \text{Grade}\) 是完全函数依赖， \((\text{Sno},\text{Cno})\xrightarrow{P} \text{Sdept}\) 是部分函数依赖，因为 \(\text{Sno}\rightarrow \text{Sdept}\) 成立，而 \(\text{Sno}\) 是 \((\text{Sno},\text{Cno})\) 的真子集。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204065834CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;定义3&lt;/strong&gt;：在 \(R(U)\) 中，如果 \(X \rightarrow Y(Y \nsubseteq X),Y \nrightarrow X,Y \rightarrow Z, Z \nsubseteq Y\) 则称 \(Z\) 对 \(X\) &lt;strong&gt;传递函数依赖&lt;/strong&gt;(transitive functional dependency)。记为 \(X \xrightarrow{传递} Z\) 。这里加上条件 \(Y \nrightarrow X\) 是因为如果 \(Y \rightarrow X\) ，则 \(X \leftarrow \rightarrow Y\) ，实际上是 \(X \xrightarrow{直接} Z\) ，是直接函数依赖而不是传递函数依赖。&lt;/p&gt;
&lt;p&gt;  &lt;a class=&#34;link&#34; href=&#34;#20241203143746CST&#34;&gt;例1&lt;/a&gt;中 \(\text{Sno}\rightarrow \text{Sdept},\text{Sdept} \rightarrow \text{Mname}\) 成立，所以 \(\text{Sno} \xrightarrow{传递} \text{Mname}\) 。&lt;/p&gt;
&lt;h3 id=&#34;码&#34;&gt;码
&lt;/h3&gt;&lt;p&gt;  码是关系模式中的一个重要概念。在&lt;a class=&#34;link&#34; href=&#34;https://www.brasswrench.com/posts/engineering/computer_science/database_system/relational_database_system/#20241204071151CST&#34;&gt;关系数据库-关系&lt;/a&gt;中已给出了有关码的若干定义，这里用函数依赖的概念来定义码。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204072216CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;定义4&lt;/strong&gt;：设 \(K\) 为 \(R \text{&lt;} U,F \text{&gt;}\) 中的属性或属性组合，若 \(K \xrightarrow{F} U\) ，则 \(K\) 为 \(R\) 的&lt;strong&gt;候选码&lt;/strong&gt;(candidate key)。&lt;/p&gt;
&lt;p&gt;  注意 \(U\) 是完全函数依赖于 \(K\) ，而不是部分函数依赖于 \(K\) 。如果 \(U\) 部分函数依赖于 \(K\) ，即 \(K \xrightarrow{P} U\) ,则 \(K\) 称为&lt;strong&gt;超码&lt;/strong&gt;(Surpkey)。候选码是最小的超码，即 \(K\) 的任意一个真子集都不是候选码。&lt;br&gt;
  若候选码多于一个，则选定其中的一个为&lt;strong&gt;主码&lt;/strong&gt;(primary key)。&lt;br&gt;
  包含在任何一个候选码中的属性称为&lt;strong&gt;主属性&lt;/strong&gt;(prime attribute)；不包含在任何候选码中的属性称为&lt;strong&gt;非主属性&lt;/strong&gt;(nonprime attribute)或&lt;strong&gt;非码属性&lt;/strong&gt;(non-key attribute)。最简单的情况，单个属性是码；最极端的情况，整个属性组是码，称为&lt;strong&gt;全码&lt;/strong&gt;(all-key)。&lt;br&gt;
  在后面的章节中主码或候选码都简称为码。读者可以根据上下文加以识别。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204090414CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;例2&lt;/strong&gt;：关系模式 \(\text{S}(\underline{\text{Sno}},\text{Sdept},\text{Sage})\) 中单个属性 \(\text{Sno}\) 是码，用下划线显示出来。 \(\text{SC}(\underline{\text{Sno},\text{Cno}},\text{Grade})\) 中属性组合 \((\text{Sno},\text{Cno})\) 是码。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204090751CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;例3&lt;/strong&gt;：关系模式 \(R(\underline{P,W,A})\) 中，属性 \(P\) 表示演奏者， \(W\) 表示作品， \(A\) 表示听众。假设一个演奏者可以演奏多个作品，某一作品可被多个演奏者演奏，听众也可以欣赏不同演奏者的不同作品，这个关系模式的码为 \((P,W,A)\) ，即全码。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204091325CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;定义5&lt;/strong&gt;：关系模式 \(R\) 中属性或属性组 \(X\) 并非 \(R\) 的码，但 \(X\) 是另一个关模式的码，则称 \(X\) 是 \(R\) 的&lt;strong&gt;外部码&lt;/strong&gt;(foreignkey)，也称&lt;strong&gt;外码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;  如在 \(\text{SC}(\underline{\text{Sno},\text{Cno}},\text{Grade})\) ， \(\text{Sno}\) 不是码，但 \(\text{Sno}\) 是关系模式 \(\text{S}(\underline{\text{Sno}},\text{Sdept},\text{Sage})\) 的码，则 \(\text{Sno}\) 是关系模式 \(\text{SC}\) 的外码。&lt;/p&gt;
&lt;p&gt;  主码与外码提供了一个表示关系间联系的手段，如&lt;a class=&#34;link&#34; href=&#34;#20241204090414CST&#34;&gt;例2&lt;/a&gt;中关系模式 \(\text{S}\) 与 \(\text{SC}\) 的联系就是通过 \(\text{Sno}\) 来体现的。&lt;/p&gt;
&lt;h3 id=&#34;范式&#34;&gt;范式
&lt;/h3&gt;&lt;p&gt;  关系数据库中的关系是要满足一定要求的，满足不同程度要求的为不同范式。满足最低要求的叫第一范式，简称1NF；在第一范式中满足进一步要求的为第二范式，其余以此类推。有关范式理论的研究主要是E. F. Codd做的工作。1971—1972年Codd系统地提出了1NF、2NF、3NF的概念，讨论了规范化的问题。1974年，Codd和Boyce共同提出了一个新范式，即BCNF。1976年Fagin提出了4NF。后来又有研究人员提出了5NF。&lt;br&gt;
  所谓“第几范式”原本是表示关系的某一种级别，所以常称某一关系模式 \(K\) 为第几范式。现在则把范式这个概念理解成符合某一种级别的关系模式的集合，即 \(R\) 为第几范式就可以写成 \(R \in x \text{NF}\) 。&lt;br&gt;
  对于各种范式之间的关系有&lt;/p&gt;
&lt;span id=&#34;20241204093419CST&#34;&gt;&lt;/span&gt;\[
5 \text{NF} \sub 4 \text{NF} \sub \text{BCNF} \sub 3 \text{NF} \sub 2 \text{NF} \sub 1 \text{NF}
\tag{7}
    \]
&lt;p&gt;  成立，如&lt;a class=&#34;link&#34; href=&#34;#20241204095857CST&#34;&gt;图2&lt;/a&gt;所示。&lt;/p&gt;
&lt;div class=&#34;figure_container&#34;&gt;
            &lt;span class=&#34;anchor&#34; id=&#34;20241204095857CST&#34;&gt;&lt;/span&gt;
            &lt;div class=&#34;svg-figure&#34;&gt;
                &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;svg id=&#34;_图层_1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 347.958 347.959&#34; style=&#34;max-width:347.958;&#34;&gt;
  &lt;text transform=&#34;translate(156.2484 180.4584)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;5&lt;/tspan&gt;&lt;tspan x=&#34;9.8994&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;N&lt;/tspan&gt;&lt;tspan x=&#34;24.1377&#34; y=&#34;0&#34;&gt;F&lt;/tspan&gt;&lt;/text&gt;
  &lt;path d=&#34;M173.9785,347.459C78.3223,347.459.5,269.6367.5,173.9795S78.3223.5,173.9785.5s173.4795,77.8223,173.4795,173.4795-77.8223,173.4795-173.4795,173.4795Z&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;path d=&#34;M173.9785,319.1123c-80.0264,0-145.1323-65.1064-145.1323-145.1328S93.9521,28.8467,173.9785,28.8467s145.1328,65.1064,145.1328,145.1328-65.1064,145.1328-145.1328,145.1328Z&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;path d=&#34;M173.9785,290.7656c-64.3955,0-116.7861-52.3906-116.7861-116.7861s52.3906-116.7861,116.7861-116.7861,116.7861,52.3906,116.7861,116.7861-52.3906,116.7861-116.7861,116.7861Z&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;path d=&#34;M173.9785,262.4189c-48.7656,0-88.4395-39.6738-88.4395-88.4395s39.6738-88.4395,88.4395-88.4395,88.4395,39.6738,88.4395,88.4395-39.6738,88.4395-88.4395,88.4395Z&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;path d=&#34;M173.9782,234.0723c-33.1348,0-60.0928-26.958-60.0928-60.0928s26.958-60.0928,60.0928-60.0928,60.0928,26.958,60.0928,60.0928-26.958,60.0928-60.0928,60.0928Z&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;circle cx=&#34;173.9782&#34; cy=&#34;173.9791&#34; r=&#34;31.746&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;text transform=&#34;translate(156.2487 136.6084)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;4&lt;/tspan&gt;&lt;tspan x=&#34;9.8994&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;N&lt;/tspan&gt;&lt;tspan x=&#34;24.1377&#34; y=&#34;0&#34;&gt;F&lt;/tspan&gt;&lt;/text&gt;
  &lt;text transform=&#34;translate(148.9683 107.7438)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.002em;&#34;&gt;B&lt;/tspan&gt;&lt;tspan x=&#34;12.0244&#34; y=&#34;0&#34;&gt;C&lt;/tspan&gt;&lt;tspan x=&#34;24.4619&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;N&lt;/tspan&gt;&lt;tspan x=&#34;38.7002&#34; y=&#34;0&#34; style=&#34;letter-spacing: 0em;&#34;&gt;F&lt;/tspan&gt;&lt;/text&gt;
  &lt;text transform=&#34;translate(156.2486 76.5848)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;3&lt;/tspan&gt;&lt;tspan x=&#34;9.8994&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;N&lt;/tspan&gt;&lt;tspan x=&#34;24.1377&#34; y=&#34;0&#34;&gt;F&lt;/tspan&gt;&lt;/text&gt;
  &lt;text transform=&#34;translate(156.2487 51.0294)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;2&lt;/tspan&gt;&lt;tspan x=&#34;9.8994&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;N&lt;/tspan&gt;&lt;tspan x=&#34;24.1377&#34; y=&#34;0&#34;&gt;F&lt;/tspan&gt;&lt;/text&gt;
  &lt;text transform=&#34;translate(156.2495 19.8607)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;1&lt;/tspan&gt;&lt;tspan x=&#34;9.8994&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;N&lt;/tspan&gt;&lt;tspan x=&#34;24.1377&#34; y=&#34;0&#34;&gt;F&lt;/tspan&gt;&lt;/text&gt;
&lt;/svg&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;p class=&#34;svg-title&#34; style=&#34;text-align:center; margin-top: 0; margin-bottom:0&#34;&gt;图2&amp;emsp;各种范式之间的关系&lt;/p&gt;
&lt;p&gt;  一个低一级范式的关系模式通过模式分解(schema decomposition)可以转换为若干个高一级范式的关系模式的集合，这种过程就叫&lt;strong&gt;规范化&lt;/strong&gt;(normalization)。&lt;/p&gt;
&lt;h3 id=&#34;1nf&#34;&gt;1NF
&lt;/h3&gt;&lt;p&gt;  满足了每一个分量必须是不可分的数据项的关系模式就属于&lt;strong&gt;第一范式(1NF)&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2nf&#34;&gt;2NF
&lt;/h3&gt;&lt;p&gt;  &lt;span id=&#34;20241204100714CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;定义6&lt;/strong&gt;：若 \(R \in 1 \text{NF}\) ，且每一个非主属性完全函数依赖于任何一个候选码，则 \(R \in 2 \text{NF}\) 。下面举一个不是 \(2 \text{NF}\) 的例子。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204100956CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;例4&lt;/strong&gt;：有关系模式 \(\text{S-L-C}(\text{Sno},\text{Sdept},\text{Sloc},\text{Cno},\text{Grade})\) ，其中 \(\text{Sloc}\) 为学生的住处， 并且每个系的学生住在同一个地方。 \(\text{S-L-C}\) 的码为 \((\text{Sno},\text{Cno})\) 。则函数依赖有&lt;br&gt;
   \((\text{Sno},\text{Cno})\xrightarrow{F} \text{Grade}\)&lt;br&gt;
   \(\text{Sno}\rightarrow \text{Sdept},(\text{Sno},\text{Cno})\xrightarrow{P} \text{Grade}\)&lt;br&gt;
   \(\text{Sno}\rightarrow \text{Sloc},(\text{Sno},\text{Cno})\xrightarrow{P} \text{Sloc}\)&lt;br&gt;
   \( \text{Sdept} \rightarrow \text{Sloc}\) （每个系的学生只住一个地方）&lt;br&gt;
  函数依赖关系如&lt;a class=&#34;link&#34; href=&#34;#20241204135645CST&#34;&gt;图3&lt;/a&gt;所示。&lt;/p&gt;
&lt;div class=&#34;figure_container&#34;&gt;
            &lt;span class=&#34;anchor&#34; id=&#34;20241204135645CST&#34;&gt;&lt;/span&gt;
            &lt;div class=&#34;svg-figure&#34;&gt;
                &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;svg id=&#34;_图层_1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 334.8549 140.4286&#34; style=&#34;max-width:334.8549;&#34;&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(145.9232 35.8679)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Sno&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;133.4501&#34; y=&#34;16.5&#34; width=&#34;57.7778&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(144.8073 118.4479)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Cno&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;133.4501&#34; y=&#34;98.8492&#34; width=&#34;57.7778&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(274.0243 35.8679)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Sd&lt;/tspan&gt;&lt;tspan x=&#34;21.5278&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;e&lt;/tspan&gt;&lt;tspan x=&#34;31.2837&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.002em;&#34;&gt;p&lt;/tspan&gt;&lt;tspan x=&#34;42.7314&#34; y=&#34;0&#34;&gt;t&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;261.5512&#34; y=&#34;16.5&#34; width=&#34;72.8036&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(280.6909 118.3326)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.002em;&#34;&gt;S&lt;/tspan&gt;&lt;tspan x=&#34;10.1699&#34; y=&#34;0&#34; style=&#34;letter-spacing: 0em;&#34;&gt;l&lt;/tspan&gt;&lt;tspan x=&#34;16.1816&#34; y=&#34;0&#34; style=&#34;letter-spacing: .001em;&#34;&gt;o&lt;/tspan&gt;&lt;tspan x=&#34;26.9272&#34; y=&#34;0&#34;&gt;c&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;268.2179&#34; y=&#34;98.9647&#34; width=&#34;59.4703&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(9.973 76.4572)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;G&lt;/tspan&gt;&lt;tspan x=&#34;13.3379&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.014em;&#34;&gt;r&lt;/tspan&gt;&lt;tspan x=&#34;21.4019&#34; y=&#34;0&#34;&gt;ade&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;.5&#34; y=&#34;57.0893&#34; width=&#34;72.8036&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;rect x=&#34;119.7993&#34; y=&#34;.5&#34; width=&#34;85.0794&#34; height=&#34;139.4286&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;g&gt;
    &lt;line x1=&#34;191.2279&#34; y1=&#34;29.3889&#34; x2=&#34;263.7888&#34; y2=&#34;94.9621&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;259.2222 95.8265 262.8723 94.1338 264.1879 90.3316 268.2179 98.9647 259.2222 95.8265&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;255.5815&#34; y1=&#34;29.3889&#34; x2=&#34;191.2279&#34; y2=&#34;29.3889&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;252.7729 25.6858 254.3462 29.3889 252.7729 33.092 261.5513 29.3889 252.7729 25.6858&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;191.2279&#34; y1=&#34;111.8536&#34; x2=&#34;197.2279&#34; y2=&#34;111.8536&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;line x1=&#34;203.1299&#34; y1=&#34;111.8536&#34; x2=&#34;253.2972&#34; y2=&#34;111.8536&#34; style=&#34;fill: none; stroke: #000; stroke-dasharray: 11.8041 5.902; stroke-miterlimit: 10;&#34;/&gt;
    &lt;line x1=&#34;256.2482&#34; y1=&#34;111.8536&#34; x2=&#34;262.2482&#34; y2=&#34;111.8536&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;259.4396 115.5567 261.0128 111.8536 259.4396 108.1505 268.2179 111.8536 259.4396 115.5567&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;257.3075&#34; y1=&#34;46.4764&#34; x2=&#34;253.0423&#34; y2=&#34;50.6963&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;line x1=&#34;248.6154&#34; y1=&#34;55.0761&#34; x2=&#34;197.7066&#34; y2=&#34;105.4438&#34; style=&#34;fill: none; stroke: #000; stroke-dasharray: 12.4547 6.2273; stroke-miterlimit: 10;&#34;/&gt;
    &lt;line x1=&#34;195.4932&#34; y1=&#34;107.6337&#34; x2=&#34;191.2279&#34; y2=&#34;111.8536&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;252.7065 45.8193 256.4293 47.3452 257.9155 51.0842 261.5513 42.2778 252.7065 45.8193&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;297.9531&#34; y1=&#34;42.2778&#34; x2=&#34;297.9531&#34; y2=&#34;92.995&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;294.25 90.1864 297.9531 91.7596 301.6562 90.1864 297.9531 98.9647 294.25 90.1864&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;119.7993&#34; y1=&#34;70.2143&#34; x2=&#34;79.2734&#34; y2=&#34;70.2143&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;82.082 66.5112 80.5087 70.2143 82.082 73.9174 73.3037 70.2143 82.082 66.5112&#34;/&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;p class=&#34;svg-title&#34; style=&#34;text-align:center; margin-top: 0; margin-bottom:0&#34;&gt;图3&amp;emsp;函数依赖示例&lt;/p&gt;
&lt;p&gt;  图中用虚线表示部分函数依赖。另外 \(\text{Sdept}\) 还函数确定 \(\text{Sloc}\) ，这一点在讨论第二范式时暂不考虑。&lt;br&gt;
  可以看到非主属性 \(\text{Sdept}、\text{Sloc}\) 并不完全函数依赖于码。因此 \(\text{S-L-C}(\text{Sno},\text{Sdept},\text{Sloc},\text{Cno},\text{Grade})\) 不符合 \(2\text{NF}\) 定义，即  \(\text{S-L-C} \notin 2 \text{NF}\) 。&lt;br&gt;
  一个关系模式 \(R\) 不属于 \(2 \text{NF}\) ，就会产生以下几个问题：&lt;br&gt;
  (1)插入异常。假若要插入一个学生 \(\text{Sno}=\text{S7},\text{Sdept}=\text{PHY},\text{Sloc}=\text{BLD2}\) ，但该生还未选课，即这个学生无 \(\text{Cno}\) ，这样的元组就插不进 \(\text{S-L-C}\) 中。因为插入元组时必须给定码值，而这时码值的一部分为空，因而学生的固有信息无法插入。&lt;br&gt;
  (2)删除异常。假定某个学生只选一门课，如 \(\text{S4}\) 就选了一门课 \(\text{C3}\) ，现在 \(\text{C3}\) 这门课他也不选了，那么 \(\text{C3}\) 这个数据项就要删除。而 \(\text{C3}\) 是主属性，删除了 \(\text{C3}\) ，整个元组就必须一起删除，使得 \(\text{S4}\) 的其他信息也被删除了，从而造成删除异常，即不应删除的信息也删除了。&lt;br&gt;
  (3)修改复杂。某个学生从数学系(\(\text{MA}\))转到计算机科学系(\(\text{CS}\))，这本来只需修改此学生元组中的 \(\text{Sdept}\) 分量即可，但因为关系模式 \(\text{S-L-C}\) 中还含有系的住处 \(\text{Sloc}\) 属性，学 生转系将同时改变住处，因而还必须修改元组中的 \(\text{Sloc}\) 分量。另外，如果这个学生选修了 \(k\) 门课， \(\text{Sdept}、\text{Sloc}\) 重复存储了 \(4\) 次，不仅存储冗余度大，而且必须无遗漏地修改后个元组中全部 \(\text{Sdept}、\text{Sloc}\) 信息，造成修改的复杂化。&lt;br&gt;
  分析上面的例子可以发现问题在于有两类非主属性，一类如 \(\text{Grade}\) ，它对码是完全函数依赖；另一类如 \(\text{Sdept}、\text{Sloc}\) ，它们对码不是完全函数依赖。解决的办法是用投影分解把关系模式  \(\text{S-L-C}\) 分解为两个关系模式：\(\text{SC(Sno,Cno,Grade)}\) 和 \(\text{S-L(Sno,Sdept,Sloc)}\) 。&lt;br&gt;
  关系模式 \(\text{SC}\) 与 \(\text{S-L}\) 中属性间的函数依赖可以用&lt;a class=&#34;link&#34; href=&#34;#20241204142005CST&#34;&gt;图4&lt;/a&gt;、&lt;a class=&#34;link&#34; href=&#34;#20241204142008CST&#34;&gt;图5&lt;/a&gt;表示如下。&lt;/p&gt;
&lt;div class=&#34;figures-container&#34;&gt;&lt;div class=&#34;figure_container&#34;&gt;
            &lt;span class=&#34;anchor&#34; id=&#34;20241204142005CST&#34;&gt;&lt;/span&gt;
            &lt;div class=&#34;svg-figure&#34;&gt;
                &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;svg id=&#34;_图层_1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 205.3787 140.4286&#34; style=&#34;max-width:205.3787;&#34;&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(145.9232 35.8679)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Sno&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;133.4501&#34; y=&#34;16.5&#34; width=&#34;57.7778&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(144.8073 118.4479)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Cno&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;133.4501&#34; y=&#34;98.8492&#34; width=&#34;57.7778&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(9.973 76.4572)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;G&lt;/tspan&gt;&lt;tspan x=&#34;13.3379&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.014em;&#34;&gt;r&lt;/tspan&gt;&lt;tspan x=&#34;21.4019&#34; y=&#34;0&#34;&gt;ade&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;.5&#34; y=&#34;57.0893&#34; width=&#34;72.8036&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;rect x=&#34;119.7993&#34; y=&#34;.5&#34; width=&#34;85.0794&#34; height=&#34;139.4286&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;g&gt;
    &lt;line x1=&#34;119.7993&#34; y1=&#34;70.2143&#34; x2=&#34;79.2734&#34; y2=&#34;70.2143&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;82.082 66.5112 80.5087 70.2143 82.082 73.9174 73.3037 70.2143 82.082 66.5112&#34;/&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;p class=&#34;svg-title&#34; style=&#34;text-align:center; margin-top: 0; margin-bottom:0&#34;&gt;图4&amp;emsp;SC中的函数依赖&lt;/p&gt;
&lt;div class=&#34;figure_container&#34;&gt;
            &lt;span class=&#34;anchor&#34; id=&#34;20241204142008CST&#34;&gt;&lt;/span&gt;
            &lt;div class=&#34;svg-figure&#34;&gt;
                &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;svg id=&#34;_图层_1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 172.9048 109.6154&#34; style=&#34;max-width:172.9048;&#34;&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(12.973 62.8642)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Sno&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;.5&#34; y=&#34;43.4963&#34; width=&#34;57.7778&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(112.0741 19.8679)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;Sd&lt;/tspan&gt;&lt;tspan x=&#34;21.5278&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.005em;&#34;&gt;e&lt;/tspan&gt;&lt;tspan x=&#34;31.2837&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.002em;&#34;&gt;p&lt;/tspan&gt;&lt;tspan x=&#34;42.7314&#34; y=&#34;0&#34;&gt;t&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;99.6011&#34; y=&#34;.5&#34; width=&#34;72.8036&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;text transform=&#34;translate(118.7408 102.3326)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34; style=&#34;letter-spacing: -.002em;&#34;&gt;S&lt;/tspan&gt;&lt;tspan x=&#34;10.1699&#34; y=&#34;0&#34; style=&#34;letter-spacing: 0em;&#34;&gt;l&lt;/tspan&gt;&lt;tspan x=&#34;16.1816&#34; y=&#34;0&#34; style=&#34;letter-spacing: .001em;&#34;&gt;o&lt;/tspan&gt;&lt;tspan x=&#34;26.9272&#34; y=&#34;0&#34;&gt;c&lt;/tspan&gt;&lt;/text&gt;
    &lt;rect x=&#34;106.2678&#34; y=&#34;82.9647&#34; width=&#34;59.4703&#34; height=&#34;25.7778&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;136.0029&#34; y1=&#34;26.2778&#34; x2=&#34;136.0029&#34; y2=&#34;76.995&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;132.2998 74.1864 136.0029 75.7596 139.7061 74.1864 136.0029 82.9647 132.2998 74.1864&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;29.3889&#34; y1=&#34;43.4963&#34; x2=&#34;94.1145&#34; y2=&#34;15.7416&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;92.9927 20.2519 92.9792 16.2284 90.0738 13.445 99.6011 13.3889 92.9927 20.2519&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;29.3889&#34; y1=&#34;69.2741&#34; x2=&#34;100.6695&#34; y2=&#34;95.6693&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;96.7498 98.1667 99.5111 95.2404 99.3217 91.2214 106.2678 97.7424 96.7498 98.1667&#34;/&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;p class=&#34;svg-title&#34; style=&#34;text-align:center; margin-top: 0; margin-bottom:0&#34;&gt;图5&amp;emsp;S-L中的函数依赖&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;  关系模式 \(\text{SC}\) 的码为 \((\text{Sno},\text{Cno})\) ，关系模式 \(\text{S-L}\) 的码为 \(\text{Sno}\) ，这样就使得非主属性对码都是完全函数依赖了。&lt;/p&gt;
&lt;h3 id=&#34;3nf&#34;&gt;3NF
&lt;/h3&gt;&lt;p&gt;  &lt;span id=&#34;20241204194628CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;定义7&lt;/strong&gt;：设关系模式 \(R \text{&lt;} U,F \text{&gt;} \in 1 \text{NF}\) ，若 \(R\) 中不存在这样的码 \(X\) ，属性组 \(Y\) 及非主属性 \(Z(Z \nsupseteq Y)\)使得 \(X \rightarrow Y, Y \rightarrow Z\) 成立， \(Y \nrightarrow X\) ，则称 \(R \text{&lt;} U,F \text{&gt;} \in 3 \text{NF}\) 。&lt;br&gt;
  由&lt;a class=&#34;link&#34; href=&#34;#20241204194628CST&#34;&gt;定义7&lt;/a&gt;可以证明，若 \(R \in 3 \text{NF}\) ，则每一个非主属性既不传递依赖于码，也不部分依赖于码。也就是说，可以证明如果 \(R\) 属于 \(3 \text{NF}\) ，则必有 \(R\) 属于 \(2 \text{NF}\) 。&lt;br&gt;
  在&lt;a class=&#34;link&#34; href=&#34;#20241204142005CST&#34;&gt;图4&lt;/a&gt;中关系模式 \(\text{SC}\) 没有传递依赖，而&lt;a class=&#34;link&#34; href=&#34;#20241204142008CST&#34;&gt;图5&lt;/a&gt;中关系模式 \(\text{S-L}\) 存在非主属性对码的传递依赖。在 \(\text{S-L}\) 中，由 \(\text{Sno} \rightarrow \text{Sdept}(\text{Sdept} \nrightarrow \text{Sno})\) ， \(\text{Sdept} \rightarrow \text{Sloc}\) ，可得 \(\text{Sno}\rightarrow \text{Sloc}\) 。因此 \(\text{SC} \in 3 \text{NF}\) ，而 \( \text{S-L} \notin 3 \text{NF}\) 。&lt;br&gt;
  一个关系模式 \(R\) 若不是 \(3 \text{NF}\) ，就会产生2NF相类似的问题。解决的办法同样是将 \(\text{S-L}\) 分解为：\(\text{S-D(Sno,Sdept)}\) 和 \(\text{D-L(Sdept,Sloc)}\) 。分解后的关系模式 \(\text{S-D}\) 与 \(\text{D-L}\) 中不再存在传递依赖。&lt;/p&gt;
&lt;h3 id=&#34;bcnf&#34;&gt;BCNF
&lt;/h3&gt;&lt;p&gt;   \(\text{BCNF}\) (Boyce Codd Normal Form)是由Boyce与Codd提出的，比上述的 \(\text{3NF}\) 又进了一步，通常认为 \(\text{BCNF}\) 是修正的第三范式，有时也称为扩充的第三范式。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204204622CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;定义8&lt;/strong&gt;：关系模式 \(R \text{&lt;} U,F \text{&gt;} \in 1 \text{NF}\) ，若 \(X \rightarrow Y\) 且 \(Y \nsubseteq X\) 时 \(X\) 必含有码，则 \(R \text{&lt;} U,F \text{&gt;} \in \text{BCNF}\) 。&lt;/p&gt;
&lt;p&gt;  也就是说，关系模式 \(R \text{&lt;} U,F \text{&gt;}\) 中，若每一个决定因素都包含码，则 \(R \text{&lt;} U,F \text{&gt;} \in \text{BCNF}\) 。&lt;br&gt;
  由 \(\text{BCNF}\) 的定义可以得到结论，一个满足 \(\text{BCNF}\) 的关系模式有：&lt;br&gt;
  ◦所有非主属性对每一个码都是完全函数依赖。&lt;br&gt;
  ◦所有主属性对每一个不包含它的码也是完全函数依赖。&lt;br&gt;
  ◦没有任何属性完全函数依赖于非码的任何一组属性。&lt;br&gt;
  由于 \(R \in \text{BCNF}\) ，按定义排除了任何属性对码的传递依赖与部分依赖，所以 \(R \in \text{3NF}\) 。 但是若 \(R \in \text{3NF}\) ， \(R\) 未必属于 \(\text{BCNF}\) 。&lt;br&gt;
  下面用几个例子说明属于 \(\text{3NF}\) 的关系模式有的属于 \(\text{BCNF}\) ，但有的不属于 \(\text{BCNF}\) 。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204211140CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;例5&lt;/strong&gt;：考察关系模式 \(\text{C(Cno, Cname, Pcno)}\) ，它只有一个码 \(\text{Cno}\) ，这里没有任何属性对 \(\text{Cno}\) 部分依赖或传递依赖，所以 \(\text{C} \in \text{3NF}\) 。同时 \(\text{C}\) 中 \(\text{Cno}\) 是唯一的决定因素，所以 \(\text{C} \in \text{BCNF}\) 。对于关系模式 \(\text{C(Sno, Cno, Grade)}\) 可作同样分析。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204211945CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;例6&lt;/strong&gt;：关系模式 \(\text{S(Sno, Sname, Sdept, Sage)}\) ，假定 \(\text{Sname}\) 也具有唯一性，那么 \(\text{S}\) 就有两个码，这两个码都由单个属性组成，彼此不相交。其他属性不存在对码的传递依赖与部分依赖，所以 \(\text{S} \in \text{3NF}\) 。同时 \(\text{S}\) 中除 \(\text{Sno}、\text{Sname}\) 外没有其他决定因素，所以 \(\text{S}\) 也属于 \(\text{BCNF}\) 。&lt;/p&gt;
&lt;p&gt;  以下再举几个例子。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204212155CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;例7&lt;/strong&gt;：关系模式 \(\text{SJP(S, J, P)}\) 中，\(\text{S}\) 是学生， \(\text{J}\) 表示课程， \(\text{P}\) 表示名次。每一个学生选修每门课程的成绩有一定的名次，每门课程中每一名次只有一个学生（即没有并列名次）。由语义可得到下面的函数依赖：&lt;/p&gt;
&lt;span id=&#34;20241204212354CST&#34;&gt;&lt;/span&gt;\[
\text{(S,J)} \rightarrow \text{P}\quad (\text{J},\text{P}) \rightarrow S
\tag{8}
    \]
&lt;p&gt;  所以 \(\text{(S,J)}\) 与 \(\text{(J,P)}\) 都可以作为候选码。这两个码各由两个属性组成，而且它们是相交的。这个关系模式中显然没有属性对码传递依赖或部分依赖。所以 \(\text{SJP} \in \text{3NF}\) ，而且除 \(\text{(S,J)}\) 与 \(\text{(J,P)}\) 以外没有其他决定因素，所以 \(\text{SJP} \in \text{BCNF}\) 。&lt;/p&gt;
&lt;p&gt;  &lt;span id=&#34;20241204213227CST&#34;&gt;&lt;/span&gt;&lt;strong&gt;例8&lt;/strong&gt;：关系模式 \(\text{STJ(S, T, J)}\) 中， \(\text{S}\) 表示学生， \(\text{T}\) 表示教师， \(\text{J}\) 表示课程。每一教师只教一门课，每门课有若干教师，某一学生选定某门课，就对应一个固定的教师。由语义可得到如下的函数依赖。&lt;/p&gt;
&lt;span id=&#34;20241204213304CST&#34;&gt;&lt;/span&gt;\[
\text{(S,J)} \rightarrow \text{T}, \text{(S,T)} \rightarrow \text{J}, \text{T} \rightarrow \text{J}
\tag{9}
    \]
&lt;p&gt;  函数依赖关系可以用图6.6表示，这里 \(\text{(S,J)}、\text{(S,T)}\) 都是候选码。&lt;/p&gt;
&lt;div class=&#34;figure_container&#34;&gt;
            &lt;span class=&#34;anchor&#34; id=&#34;20241204215138CST&#34;&gt;&lt;/span&gt;
            &lt;div class=&#34;svg-figure&#34;&gt;
                &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;
&lt;svg id=&#34;_图层_1&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 284.4683 109.9524&#34; style=&#34;max-width:284.4683;&#34;&gt;
  &lt;text transform=&#34;translate(18.1468 32.4028)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;13.0079&#34; y=&#34;15.8333&#34; width=&#34;20.4444&#34; height=&#34;20.4444&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;text transform=&#34;translate(20.1468 90.0144)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;J&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;13.0079&#34; y=&#34;74.4449&#34; width=&#34;20.4444&#34; height=&#34;20.4444&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;text transform=&#34;translate(109.1941 31.9098)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;T&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;105.0552&#34; y=&#34;15.3403&#34; width=&#34;20.4444&#34; height=&#34;20.4444&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;rect x=&#34;.5&#34; y=&#34;.5&#34; width=&#34;45.8413&#34; height=&#34;108.9524&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;g&gt;
    &lt;line x1=&#34;46.3413&#34; y1=&#34;25.5625&#34; x2=&#34;99.0854&#34; y2=&#34;25.5625&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;96.2768 29.2656 97.8501 25.5625 96.2768 21.8594 105.0552 25.5625 96.2768 29.2656&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;115.2774&#34; y1=&#34;35.7847&#34; x2=&#34;38.5772&#34; y2=&#34;81.6055&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;39.0892 76.9861 39.6378 80.972 42.8875 83.3442 33.4524 84.6671 39.0892 76.9861&#34;/&gt;
  &lt;/g&gt;
  &lt;text transform=&#34;translate(172.638 32.4028)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;S&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;167.4991&#34; y=&#34;15.8333&#34; width=&#34;20.4444&#34; height=&#34;20.4444&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;text transform=&#34;translate(266.6852 31.132)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;J&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;259.5463&#34; y=&#34;15.5625&#34; width=&#34;20.4444&#34; height=&#34;20.4444&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;text transform=&#34;translate(171.6379 91.0144)&#34; style=&#34;font-family: NotoSerifSC-Regular, &amp;apos;Noto Serif SC&amp;apos;; font-size: 18px;&#34;&gt;&lt;tspan x=&#34;0&#34; y=&#34;0&#34;&gt;T&lt;/tspan&gt;&lt;/text&gt;
  &lt;rect x=&#34;167.4991&#34; y=&#34;74.4449&#34; width=&#34;20.4444&#34; height=&#34;20.4444&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;rect x=&#34;154.9911&#34; y=&#34;.5&#34; width=&#34;45.8413&#34; height=&#34;108.9524&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
  &lt;g&gt;
    &lt;line x1=&#34;200.8324&#34; y1=&#34;25.5625&#34; x2=&#34;253.5766&#34; y2=&#34;25.5625&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;250.768 29.2656 252.3412 25.5625 250.768 21.8594 259.5463 25.5625 250.768 29.2656&#34;/&gt;
  &lt;/g&gt;
  &lt;g&gt;
    &lt;line x1=&#34;265.0292&#34; y1=&#34;39.0473&#34; x2=&#34;187.9435&#34; y2=&#34;84.6671&#34; style=&#34;fill: none; stroke: #000; stroke-miterlimit: 10;&#34;/&gt;
    &lt;polygon points=&#34;260.7261 37.2909 263.9661 39.6765 264.4981 43.6646 270.1667 36.007 260.7261 37.2909&#34;/&gt;
  &lt;/g&gt;
&lt;/svg&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;p class=&#34;svg-title&#34; style=&#34;text-align:center; margin-top: 0; margin-bottom:0&#34;&gt;图6&amp;emsp;STJ中的函数依赖&lt;/p&gt;
&lt;p&gt;   \(\text{STJ}\) 是 \(\text{3NF}\) ，因为没有任何非主属性对码传递依赖或部分依赖，但 \(\text{STJ}\) 不是 \(\text{BCNF}\) 关系，因为 \(\text{T}\) 是决定因素，而 \(\text{T}\) 不包含码。&lt;/p&gt;
&lt;p&gt;  对于不是 \(\text{BCNF}\) 的关系模式，仍然存在不合适的地方。非 \(\text{BCNF}\) 的关系模式也可以通过分解成为 \(\text{BCNF}\) 。例如 \(\text{STJ}\) 可分解为 \(\text{ST(S,T)}\) 与 \(\text{TJ(T,J)}\) ，它们都是 \(\text{BCNF}\) 。&lt;/p&gt;
&lt;p&gt;   \(\text{3NF}\) 和 \(\text{BCNF}\) 是在函数依赖的条件下对模式分解所能达到的分离程度的测度。一个模式中的关系模式如果都属于 \(\text{BCNF}\) ，那么在函数依赖范畴内它已实现了彻底的分离，己消除了插入和删除的异常。 \(\text{3NF}\) 的“不彻底”性表现在可能存在主属性对码的部分依赖和传递依赖。&lt;/p&gt;
&lt;h3 id=&#34;多值依赖&#34;&gt;多值依赖
&lt;/h3&gt;</description>
        </item>
        
    </channel>
</rss>
